{"@version":"2.10.0","@generated":"Mon, 29 Mar 2021 08:55:36","site":[{"@name":"https://datacollecte.equipements.sports.gouv.fr","@host":"datacollecte.equipements.sports.gouv.fr","@port":"443","@ssl":"true","alerts":[{"pluginid":"10054","alertRef":"10054","alert":"Cookie Without SameSite Attribute","name":"Cookie Without SameSite Attribute","riskcode":"1","confidence":"2","riskdesc":"Low (Medium)","desc":"<p>A cookie has been set without the SameSite attribute, which means that the cookie can be sent as a result of a 'cross-site' request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.<\/p>","instances":[{"uri":"https://datacollecte.equipements.sports.gouv.fr","method":"GET","param":"BIGipServerpool-dsb5-dataes.cegedim.cloud-HTTP","evidence":"Set-Cookie: BIGipServerpool-dsb5-dataes.cegedim.cloud-HTTP"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/","method":"GET","param":"BIGipServerpool-dsb5-dataes.cegedim.cloud-HTTP","evidence":"Set-Cookie: BIGipServerpool-dsb5-dataes.cegedim.cloud-HTTP"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/robots.txt","method":"GET","param":"BIGipServerpool-dsb5-dataes.cegedim.cloud-HTTP","evidence":"Set-Cookie: BIGipServerpool-dsb5-dataes.cegedim.cloud-HTTP"}],"count":"3","solution":"<p>Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies.<\/p>","reference":"<p>https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site<\/p>","cweid":"16","wascid":"13","sourceid":"3"},{"pluginid":"10109","alertRef":"10109","alert":"Modern Web Application","name":"Modern Web Application","riskcode":"0","confidence":"2","riskdesc":"Informational (Medium)","desc":"<p>The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.<\/p>","instances":[{"uri":"https://datacollecte.equipements.sports.gouv.fr/sitemap.xml","method":"GET","evidence":"<script src=\"https://www.google.com/recaptcha/api.js?render=explicit&onload=initRecaptcha\" async defer><\/script>"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/vendor.bundle.js","method":"GET","evidence":"<a *ngIf=\\\"isEllipsis(pageNumber)\\\" class=\\\"page-link\\\">...<\/a>"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/","method":"GET","evidence":"<script src=\"https://www.google.com/recaptcha/api.js?render=explicit&onload=initRecaptcha\" async defer><\/script>"},{"uri":"https://datacollecte.equipements.sports.gouv.fr","method":"GET","evidence":"<script src=\"https://www.google.com/recaptcha/api.js?render=explicit&onload=initRecaptcha\" async defer><\/script>"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/robots.txt","method":"GET","evidence":"<script src=\"https://www.google.com/recaptcha/api.js?render=explicit&onload=initRecaptcha\" async defer><\/script>"}],"count":"5","solution":"<p>This is an informational alert and so no changes are required.<\/p>","otherinfo":"<p>No links have been found while there are scripts, which is an indication that this is a modern web application.<\/p>","reference":"<p><\/p>","sourceid":"3"},{"pluginid":"10015","alertRef":"10015","alert":"Incomplete or No Cache-control and Pragma HTTP Header Set","name":"Incomplete or No Cache-control and Pragma HTTP Header Set","riskcode":"1","confidence":"2","riskdesc":"Low (Medium)","desc":"<p>The cache-control and pragma HTTP header have not been set properly or are missing allowing the browser and proxies to cache content.<\/p>","instances":[{"uri":"https://datacollecte.equipements.sports.gouv.fr/","method":"GET","param":"Cache-Control"},{"uri":"https://datacollecte.equipements.sports.gouv.fr","method":"GET","param":"Cache-Control"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/robots.txt","method":"GET","param":"Cache-Control"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/sitemap.xml","method":"GET","param":"Cache-Control"}],"count":"4","solution":"<p>Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate; and that the pragma HTTP header is set with no-cache.<\/p>","reference":"<p>https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching<\/p>","cweid":"525","wascid":"13","sourceid":"3"},{"pluginid":"10049","alertRef":"10049","alert":"Storable and Cacheable Content","name":"Storable and Cacheable Content","riskcode":"0","confidence":"2","riskdesc":"Informational (Medium)","desc":"<p>The response contents are storable by caching components such as proxy servers, and may be retrieved directly from the cache, rather than from the origin server by the caching servers, in response to similar requests from other users.  If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where \"shared\" caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance.<\/p>","instances":[{"uri":"https://datacollecte.equipements.sports.gouv.fr/assets/Images/loader.gif","method":"GET"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/polyfills.bundle.js","method":"GET"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/scripts.bundle.js","method":"GET"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/robots.txt","method":"GET"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/inline.bundle.js","method":"GET"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/favicon.ico","method":"GET"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/styles.bundle.js","method":"GET"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/","method":"GET"},{"uri":"https://datacollecte.equipements.sports.gouv.fr","method":"GET"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/sitemap.xml","method":"GET"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/main.bundle.js","method":"GET"}],"count":"11","solution":"<p>Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:<\/p><p>Cache-Control: no-cache, no-store, must-revalidate, private<\/p><p>Pragma: no-cache<\/p><p>Expires: 0<\/p><p>This configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request. <\/p>","otherinfo":"<p>In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234.<\/p>","reference":"<p>https://tools.ietf.org/html/rfc7234<\/p><p>https://tools.ietf.org/html/rfc7231<\/p><p>http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)<\/p>","cweid":"524","wascid":"13","sourceid":"3"},{"pluginid":"10096","alertRef":"10096","alert":"Timestamp Disclosure - Unix","name":"Timestamp Disclosure - Unix","riskcode":"0","confidence":"1","riskdesc":"Informational (Low)","desc":"<p>A timestamp was disclosed by the application/web server - Unix<\/p>","instances":[{"uri":"https://datacollecte.equipements.sports.gouv.fr/styles.bundle.js","method":"GET","evidence":"80000000"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/styles.bundle.js","method":"GET","evidence":"66666667"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/styles.bundle.js","method":"GET","evidence":"33333333"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/polyfills.bundle.js","method":"GET","evidence":"115759028"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/styles.bundle.js","method":"GET","evidence":"42857143"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/polyfills.bundle.js","method":"GET","evidence":"62425156"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/styles.bundle.js","method":"GET","evidence":"26603875"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/styles.bundle.js","method":"GET","evidence":"00000000"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/polyfills.bundle.js","method":"GET","evidence":"94906265"}],"count":"9","solution":"<p>Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.<\/p>","otherinfo":"<p>80000000, which evaluates to: 1972-07-14 22:13:20<\/p>","reference":"<p>http://projects.webappsec.org/w/page/13246936/Information%20Leakage<\/p>","cweid":"200","wascid":"13","sourceid":"3"},{"pluginid":"10063","alertRef":"10063","alert":"Feature Policy Header Not Set","name":"Feature Policy Header Not Set","riskcode":"1","confidence":"2","riskdesc":"Low (Medium)","desc":"<p>Feature Policy Header is an added layer of security that helps to restrict from unauthorized access or usage of browser/client features by web resources. This policy ensures the user privacy by limiting or specifying the features of the browsers can be used by the web resources. Feature Policy provides a set of standard HTTP headers that allow website owners to limit which features of browsers can be used by the page such as camera, microphone, location, full screen etc.<\/p>","instances":[{"uri":"https://datacollecte.equipements.sports.gouv.fr/polyfills.bundle.js","method":"GET"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/","method":"GET"},{"uri":"https://datacollecte.equipements.sports.gouv.fr","method":"GET"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/inline.bundle.js","method":"GET"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/styles.bundle.js","method":"GET"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/main.bundle.js","method":"GET"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/robots.txt","method":"GET"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/sitemap.xml","method":"GET"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/vendor.bundle.js","method":"GET"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/scripts.bundle.js","method":"GET"}],"count":"10","solution":"<p>Ensure that your web server, application server, load balancer, etc. is configured to set the Feature-Policy header.<\/p>","reference":"<p>https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy<\/p><p>https://developers.google.com/web/updates/2018/06/feature-policy<\/p><p>https://scotthelme.co.uk/a-new-security-header-feature-policy/<\/p><p>https://w3c.github.io/webappsec-feature-policy/<\/p><p>https://www.smashingmagazine.com/2018/12/feature-policy/<\/p>","cweid":"16","wascid":"15","sourceid":"3"},{"pluginid":"10003","alertRef":"10003","alert":"Vulnerable JS Library","name":"Vulnerable JS Library","riskcode":"2","confidence":"2","riskdesc":"Medium (Medium)","desc":"<p>The identified library bootstrap, version 3.3.7 is vulnerable.<\/p>","instances":[{"uri":"https://datacollecte.equipements.sports.gouv.fr/styles.bundle.js","method":"GET","evidence":"* Bootstrap v3.3.7"}],"count":"1","solution":"<p>Please upgrade to the latest version of bootstrap.<\/p>","otherinfo":"<p>CVE-2019-8331<\/p><p>CVE-2018-14041<\/p><p>CVE-2018-14040<\/p><p>CVE-2018-14042<\/p><p><\/p>","reference":"<p>https://github.com/twbs/bootstrap/issues/28236<\/p><p>https://github.com/twbs/bootstrap/issues/20184<\/p><p><\/p>","cweid":"829","sourceid":"3"},{"pluginid":"10055","alertRef":"10055","alert":"CSP: Notices","name":"CSP: Notices","riskcode":"1","confidence":"2","riskdesc":"Low (Medium)","desc":"<p>Warnings:<\/p><p>1:1: The upgrade-insecure-requests directive is an experimental directive that will be likely added to the CSP specification.<\/p><p><\/p>","instances":[{"uri":"https://datacollecte.equipements.sports.gouv.fr","method":"GET","param":"Content-Security-Policy","evidence":"upgrade-insecure-requests"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/","method":"GET","param":"Content-Security-Policy","evidence":"upgrade-insecure-requests"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/robots.txt","method":"GET","param":"Content-Security-Policy","evidence":"upgrade-insecure-requests"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/sitemap.xml","method":"GET","param":"Content-Security-Policy","evidence":"upgrade-insecure-requests"}],"count":"4","solution":"<p>Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.<\/p>","reference":"<p>http://www.w3.org/TR/CSP2/<\/p><p>http://www.w3.org/TR/CSP/<\/p><p>http://caniuse.com/#search=content+security+policy<\/p><p>http://content-security-policy.com/<\/p><p>https://github.com/shapesecurity/salvation<\/p><p>https://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources<\/p>","cweid":"16","wascid":"15","sourceid":"3"},{"pluginid":"90003","alertRef":"90003","alert":"Sub Resource Integrity Attribute Missing","name":"Sub Resource Integrity Attribute Missing","riskcode":"2","confidence":"3","riskdesc":"Medium (High)","desc":"<p>The integrity attribute is missing on a script or link tag served by an external server. The integrity tag prevents an attacker who have gained access to this server from injecting a malicious content. <\/p>","instances":[{"uri":"https://datacollecte.equipements.sports.gouv.fr","method":"GET","evidence":"<script src=\"https://www.google.com/recaptcha/api.js?render=explicit&onload=initRecaptcha\" async defer><\/script>"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/","method":"GET","evidence":"<script src=\"https://www.google.com/recaptcha/api.js?render=explicit&onload=initRecaptcha\" async defer><\/script>"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/robots.txt","method":"GET","evidence":"<script src=\"https://www.google.com/recaptcha/api.js?render=explicit&onload=initRecaptcha\" async defer><\/script>"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/sitemap.xml","method":"GET","evidence":"<script src=\"https://www.google.com/recaptcha/api.js?render=explicit&onload=initRecaptcha\" async defer><\/script>"}],"count":"4","solution":"<p>Provide a valid integrity attribute to the tag.<\/p>","reference":"<p>https://developer.mozilla.org/en/docs/Web/Security/Subresource_Integrity<\/p>","cweid":"16","wascid":"15","sourceid":"3"},{"pluginid":"10027","alertRef":"10027","alert":"Information Disclosure - Suspicious Comments","name":"Information Disclosure - Suspicious Comments","riskcode":"0","confidence":"1","riskdesc":"Informational (Low)","desc":"<p>The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.<\/p>","instances":[{"uri":"https://datacollecte.equipements.sports.gouv.fr/styles.bundle.js","method":"GET","evidence":"query"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/polyfills.bundle.js","method":"GET","evidence":"bugs"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/polyfills.bundle.js","method":"GET","evidence":"from"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/styles.bundle.js","method":"GET","evidence":"username"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/styles.bundle.js","method":"GET","evidence":"user"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/styles.bundle.js","method":"GET","evidence":"bug"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/styles.bundle.js","method":"GET","evidence":"select"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/polyfills.bundle.js","method":"GET","evidence":"TODO"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/styles.bundle.js","method":"GET","evidence":"TODO"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/styles.bundle.js","method":"GET","evidence":"from"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/polyfills.bundle.js","method":"GET","evidence":"bug"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/polyfills.bundle.js","method":"GET","evidence":"select"}],"count":"12","solution":"<p>Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.<\/p>","otherinfo":"<p>The following pattern was used: \\bQUERY\\b and was detected 2 times, the first in the element starting with: \"exports.push([module.i, \".ui-widget *{box-sizing:border-box}.ui-helper-hidden{display:none}.ui-helper-hidden-accessible{border:0\", see evidence field for the suspicious comment/snippet.<\/p>","reference":"<p><\/p>","cweid":"200","wascid":"13","sourceid":"3"},{"pluginid":"10094","alertRef":"10094","alert":"Base64 Disclosure","name":"Base64 Disclosure","riskcode":"0","confidence":"2","riskdesc":"Informational (Medium)","desc":"<p>Base64 encoded data was disclosed by the application/web server. Note: in the interests of performance not all base64 strings in the response were analyzed individually, the entire response should be looked at by the analyst/security team/developer(s).<\/p>","instances":[{"uri":"https://datacollecte.equipements.sports.gouv.fr/main.bundle.js","method":"GET","evidence":"eyJmaWxlIjoiRDovMDJfZGV2cy9hcHAvbmV0YXBzeXMvUkVTL3RpcmFtaXN1LXJlcy12Mi9SRVMvc3JjL0NsaWVudC9yZXMvc3JjL2FwcC9hcHAuY29tcG9uZW50LmNzcy5zaGltLm5nc3R5bGUudHMiLCJ2ZXJzaW9uIjozLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJuZzovLy9EOi8wMl9kZXZzL2FwcC9uZXRhcHN5cy9SRVMvdGlyYW1pc3UtcmVzLXYyL1JFUy9zcmMvQ2xpZW50L3Jlcy9zcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIl0sInNvdXJjZXNDb250ZW50IjpbIiAiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OzsifQ=="},{"uri":"https://datacollecte.equipements.sports.gouv.fr","method":"GET","evidence":"e1VQ+MeQLOdSiCsqJlLL3fNyljz02Sv9XmKIdlSZcdqJ4Kkx6Zzl9vQ/PI4C2BxpNcp5I5AWQA/BquN2c18SOltQbqU="},{"uri":"https://datacollecte.equipements.sports.gouv.fr/vendor.bundle.js","method":"GET","evidence":"__WEBPACK_IMPORTED_MODULE_0__angular_core__"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/styles.bundle.js","method":"GET","evidence":"iVBORw0KGgoAAAANSUhEUgAAAEYAAAAsCAYAAADYQc64AAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAATpJREFUaAXtmLGNg1AQRM3JtVAECSGiAURIdwQ0QC0IUQBN+KyTWI1sz8l3BmOkR8L8Cf4uTzMJyeX6nHjuCHzdORg/BABjggAYwBgCxiYxgDEEjE1iAGMIGJvEAMYQMDaJAYwhYGwSY8Ccjb+p3XVd3F9VVeh3irquY1zbtqEXQWIWEjdvwNwAWY67VCnP82X+KU3T0MMwhN5aNE3z6wgSY/AAxoBJ9v7nO01TrFaWZegtatX3fdxfFEXoR4LEPKJy9QBjwOxeJd1ri1r9pT66C4lRGqIBIzBUflSVdLFXavXf+uh8EqM0RANGYKj82Crpks/Uao366EwSozREA0ZgqDxElXTheZ7jOI5j6CzLQq8hSIyhCBgD5nBVMt+xuk1iDFLAAMYQMDaJAYwhYGwSAxhDwNgkxoD5Bg+KURfM/L2eAAAAAElFTkSuQmCC"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/robots.txt","method":"GET","evidence":"dWgSpUNI7UVh+i4qJlLL3fNyljz02a1dtHCr0sCKNM02y1pJADN41CiqUyTKq5nE3JELqW6mHXI1TeYVFniV+2Pp2Tc="},{"uri":"https://datacollecte.equipements.sports.gouv.fr/","method":"GET","evidence":"CeVYDrbLsVvK+FoqJlLL3fNyljz02SWbS22rnfXaxbVANOkuVYTr15QmzJtYTQ8uKBcnq/DUGEzKNcduCCzwrBXO4ec="},{"uri":"https://datacollecte.equipements.sports.gouv.fr/scripts.bundle.js","method":"GET","evidence":"info/licences/Licence_CeCILL-B_V1-en"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/polyfills.bundle.js","method":"GET","evidence":"__WEBPACK_IMPORTED_MODULE_0_core_js_client_shim_min_js__"}],"count":"8","solution":"<p>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.<\/p>","otherinfo":"<p>{\"file\":\"D:/02_devs/app/netapsys/RES/tiramisu-res-v2/RES/src/Client/res/src/app/app.component.css.shim.ngstyle.ts\",\"version\":3,\"sourceRoot\":\"\",\"sources\":[\"ng:///D:/02_devs/app/netapsys/RES/tiramisu-res-v2/RES/src/Client/res/src/app/app.component.css\"],\"sourcesContent\":[\" \"],\"mappings\":\"AAAA;;;;;;;;\"}<\/p>","reference":"<p>http://projects.webappsec.org/w/page/13246936/Information%20Leakage<\/p>","cweid":"200","wascid":"13","sourceid":"3"},{"pluginid":"10017","alertRef":"10017","alert":"Cross-Domain JavaScript Source File Inclusion","name":"Cross-Domain JavaScript Source File Inclusion","riskcode":"1","confidence":"2","riskdesc":"Low (Medium)","desc":"<p>The page includes one or more script files from a third-party domain.<\/p>","instances":[{"uri":"https://datacollecte.equipements.sports.gouv.fr/sitemap.xml","method":"GET","param":"https://www.google.com/recaptcha/api.js?render=explicit&onload=initRecaptcha","evidence":"<script src=\"https://www.google.com/recaptcha/api.js?render=explicit&onload=initRecaptcha\" async defer><\/script>"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/robots.txt","method":"GET","param":"https://www.google.com/recaptcha/api.js?render=explicit&onload=initRecaptcha","evidence":"<script src=\"https://www.google.com/recaptcha/api.js?render=explicit&onload=initRecaptcha\" async defer><\/script>"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/","method":"GET","param":"https://www.google.com/recaptcha/api.js?render=explicit&onload=initRecaptcha","evidence":"<script src=\"https://www.google.com/recaptcha/api.js?render=explicit&onload=initRecaptcha\" async defer><\/script>"},{"uri":"https://datacollecte.equipements.sports.gouv.fr","method":"GET","param":"https://www.google.com/recaptcha/api.js?render=explicit&onload=initRecaptcha","evidence":"<script src=\"https://www.google.com/recaptcha/api.js?render=explicit&onload=initRecaptcha\" async defer><\/script>"}],"count":"4","solution":"<p>Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.<\/p>","reference":"<p><\/p>","cweid":"829","wascid":"15","sourceid":"3"},{"pluginid":"10110","alertRef":"10110","alert":"Dangerous JS Functions","name":"Dangerous JS Functions","riskcode":"1","confidence":"1","riskdesc":"Low (Low)","desc":"<p>A dangerous JS function seems to be in use that would leave the site vulnerable.<\/p>","instances":[{"uri":"https://datacollecte.equipements.sports.gouv.fr/main.bundle.js","method":"GET","evidence":"eVal"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/polyfills.bundle.js","method":"GET","evidence":"eVal"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/scripts.bundle.js","method":"GET","evidence":"eVal"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/vendor.bundle.js","method":"GET","evidence":"bypassSecurityTrustHtml"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/styles.bundle.js","method":"GET","evidence":"eVal"}],"count":"5","solution":"<p>See the references for security advice on the use of these functions.<\/p>","reference":"<p>https://angular.io/guide/security<\/p>","cweid":"749","sourceid":"3"},{"pluginid":"10055","alertRef":"10055","alert":"CSP: Wildcard Directive","name":"CSP: Wildcard Directive","riskcode":"2","confidence":"2","riskdesc":"Medium (Medium)","desc":"<p>The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: <\/p><p>script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, frame-ancestors, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src, form-action<\/p><p><\/p><p>The directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.<\/p>","instances":[{"uri":"https://datacollecte.equipements.sports.gouv.fr/robots.txt","method":"GET","param":"Content-Security-Policy","evidence":"upgrade-insecure-requests"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/sitemap.xml","method":"GET","param":"Content-Security-Policy","evidence":"upgrade-insecure-requests"},{"uri":"https://datacollecte.equipements.sports.gouv.fr/","method":"GET","param":"Content-Security-Policy","evidence":"upgrade-insecure-requests"},{"uri":"https://datacollecte.equipements.sports.gouv.fr","method":"GET","param":"Content-Security-Policy","evidence":"upgrade-insecure-requests"}],"count":"4","solution":"<p>Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.<\/p>","reference":"<p>http://www.w3.org/TR/CSP2/<\/p><p>http://www.w3.org/TR/CSP/<\/p><p>http://caniuse.com/#search=content+security+policy<\/p><p>http://content-security-policy.com/<\/p><p>https://github.com/shapesecurity/salvation<\/p><p>https://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources<\/p>","cweid":"16","wascid":"15","sourceid":"3"},{"pluginid":"10099","alertRef":"10099","alert":"Source Code Disclosure - Java","name":"Source Code Disclosure - Java","riskcode":"2","confidence":"2","riskdesc":"Medium (Medium)","desc":"<p>Application Source Code was disclosed by the web server - Java<\/p>","instances":[{"uri":"https://datacollecte.equipements.sports.gouv.fr/vendor.bundle.js","method":"GET","evidence":"class for {\\@link FormControl}, {\\@link FormGroup}, and\n * {\\@link FormArray}.\n *\n * It provides some of the shared behavior that all controls and groups of controls have, like\n * running validators, calculating status, and resetting state. It also defines the properties\n * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n * instantiated directly.\n *\n * \\@stable\n * @abstract\n */\nvar AbstractControl = (function () {\n    /**\n     * @param {?} validator\n     * @param {?} asyncValidator\n     */\n    function AbstractControl(validator, asyncValidator) {\n        this.validator = validator;\n        this.asyncValidator = asyncValidator;\n        /**\n         * \\@internal\n         */\n        this._onCollectionChange = function () { };\n        this._pristine = true;\n        this._touched = false;\n        /**\n         * \\@internal\n         */\n        this._onDisabledChange = [];\n    }\n    Object.defineProperty(AbstractControl.prototype, \"value\", {\n        /**\n         * The value of the control.\n         * @return {?}\n         */\n        get: function () { return this._value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"parent\", {\n        /**\n         * The parent control.\n         * @return {?}\n         */\n        get: function () { return this._parent; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"status\", {\n        /**\n         * The validation status of the control. There are four possible\n         * validation statuses:\n         *\n         * * **VALID**:  control has passed all validation checks\n         * * **INVALID**: control has failed at least one validation check\n         * * **PENDING**: control is in the midst of conducting a validation check\n         * * **DISABLED**: control is exempt from validation checks\n         *\n         * These statuses are mutually exclusive, so a control cannot be\n         * both valid AND invalid or invalid AND disabled.\n         * @return {?}\n         */\n        get: function () { return this._status; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"valid\", {\n        /**\n         * A control is `valid` when its `status === VALID`.\n         *\n         * In order to have this status, the control must have passed all its\n         * validation checks.\n         * @return {?}\n         */\n        get: function () { return this._status === VALID; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"invalid\", {\n        /**\n         * A control is `invalid` when its `status === INVALID`.\n         *\n         * In order to have this status, the control must have failed\n         * at least one of its validation checks.\n         * @return {?}\n         */\n        get: function () { return this._status === INVALID; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"pending\", {\n        /**\n         * A control is `pending` when its `status === PENDING`.\n         *\n         * In order to have this status, the control must be in the\n         * middle of conducting a validation check.\n         * @return {?}\n         */\n        get: function () { return this._status == PENDING; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"disabled\", {\n        /**\n         * A control is `disabled` when its `status === DISABLED`.\n         *\n         * Disabled controls are exempt from validation checks and\n         * are not included in the aggregate value of their ancestor\n         * controls.\n         * @return {?}\n         */\n        get: function () { return this._status === DISABLED; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"enabled\", {\n        /**\n         * A control is `enabled` as long as its `status !== DISABLED`.\n         *\n         * In other words, it has a status of `VALID`, `INVALID`, or\n         * `PENDING`.\n         * @return {?}\n         */\n        get: function () { return this._status !== DISABLED; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"errors\", {\n        /**\n         * Returns any errors generated by failing validation. If there\n         * are no errors, it will return null.\n         * @return {?}\n         */\n        get: function () { return this._errors; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"pristine\", {\n        /**\n         * A control is `pristine` if the user has not yet changed\n         * the value in the UI.\n         *\n         * Note that programmatic changes to a control's value will\n         * *not* mark it dirty.\n         * @return {?}\n         */\n        get: function () { return this._pristine; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"dirty\", {\n        /**\n         * A control is `dirty` if the user has changed the value\n         * in the UI.\n         *\n         * Note that programmatic changes to a control's value will\n         * *not* mark it dirty.\n         * @return {?}\n         */\n        get: function () { return !this.pristine; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"touched\", {\n        /**\n         * A control is marked `touched` once the user has triggered\n         * a `blur` event on it.\n         * @return {?}\n         */\n        get: function () { return this._touched; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"untouched\", {\n        /**\n         * A control is `untouched` if the user has not yet triggered\n         * a `blur` event on it.\n         * @return {?}\n         */\n        get: function () { return !this._touched; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"valueChanges\", {\n        /**\n         * Emits an event every time the value of the control changes, in\n         * the UI or programmatically.\n         * @return {?}\n         */\n        get: function () { return this._valueChanges; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"statusChanges\", {\n        /**\n         * Emits an event every time the validation status of the control\n         * is re-calculated.\n         * @return {?}\n         */\n        get: function () { return this._statusChanges; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the synchronous validators that are active on this control.  Calling\n     * this will overwrite any existing sync validators.\n     * @param {?} newValidator\n     * @return {?}\n     */\n    AbstractControl.prototype.setValidators = function (newValidator) {\n        this.validator = coerceToValidator(newValidator);\n    };\n    /**\n     * Sets the async validators that are active on this control. Calling this\n     * will overwrite any existing async validators.\n     * @param {?} newValidator\n     * @return {?}\n     */\n    AbstractControl.prototype.setAsyncValidators = function (newValidator) {\n        this.asyncValidator = coerceToAsyncValidator(newValidator);\n    };\n    /**\n     * Empties out the sync validator list.\n     * @return {?}\n     */\n    AbstractControl.prototype.clearValidators = function () { this.validator = null; };\n    /**\n     * Empties out the async validator list.\n     * @return {?}\n     */\n    AbstractControl.prototype.clearAsyncValidators = function () { this.asyncValidator = null; };\n    /**\n     * Marks the control as `touched`.\n     *\n     * This will also mark all direct ancestors as `touched` to maintain\n     * the model.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsTouched = function (opts) {\n        if (opts === void 0) { opts = {}; }\n        this._touched = true;\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsTouched(opts);\n        }\n    };\n    /**\n     * Marks the control as `untouched`.\n     *\n     * If the control has any children, it will also mark all children as `untouched`\n     * to maintain the model, and re-calculate the `touched` status of all parent\n     * controls.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsUntouched = function (opts) {\n        if (opts === void 0) { opts = {}; }\n        this._touched = false;\n        this._forEachChild(function (control) { control.markAsUntouched({ onlySelf: true }); });\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updateTouched(opts);\n        }\n    };\n    /**\n     * Marks the control as `dirty`.\n     *\n     * This will also mark all direct ancestors as `dirty` to maintain\n     * the model.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsDirty = function (opts) {\n        if (opts === void 0) { opts = {}; }\n        this._pristine = false;\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsDirty(opts);\n        }\n    };\n    /**\n     * Marks the control as `pristine`.\n     *\n     * If the control has any children, it will also mark all children as `pristine`\n     * to maintain the model, and re-calculate the `pristine` status of all parent\n     * controls.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsPristine = function (opts) {\n        if (opts === void 0) { opts = {}; }\n        this._pristine = true;\n        this._forEachChild(function (control) { control.markAsPristine({ onlySelf: true }); });\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updatePristine(opts);\n        }\n    };\n    /**\n     * Marks the control as `pending`.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsPending = function (opts) {\n        if (opts === void 0) { opts = {}; }\n        this._status = PENDING;\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsPending(opts);\n        }\n    };\n    /**\n     * Disables the control. This means the control will be exempt from validation checks and\n     * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n     *\n     * If the control has children, all children will be disabled to maintain the model.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.disable = function (opts) {\n        if (opts === void 0) { opts = {}; }\n        this._status = DISABLED;\n        this._errors = null;\n        this._forEachChild(function (control) { control.disable({ onlySelf: true }); });\n        this._updateValue();\n        if (opts.emitEvent !== false) {\n            this._valueChanges.emit(this._value);\n            this._statusChanges.emit(this._status);\n        }\n        this._updateAncestors(!!opts.onlySelf);\n        this._onDisabledChange.forEach(function (changeFn) { return changeFn(true); });\n    };\n    /**\n     * Enables the control. This means the control will be included in validation checks and\n     * the aggregate value of its parent. Its status is re-calculated based on its value and\n     * its validators.\n     *\n     * If the control has children, all children will be enabled.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.enable = function (opts) {\n        if (opts === void 0) { opts = {}; }\n        this._status = VALID;\n        this._forEachChild(function (control) { control.enable({ onlySelf: true }); });\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });\n        this._updateAncestors(!!opts.onlySelf);\n        this._onDisabledChange.forEach(function (changeFn) { return changeFn(false); });\n    };\n    /**\n     * @param {?} onlySelf\n     * @return {?}\n     */\n    AbstractControl.prototype._updateAncestors = function (onlySelf) {\n        if (this._parent && !onlySelf) {\n            this._parent.updateValueAndValidity();\n            this._parent._updatePristine();\n            this._parent._updateTouched();\n        }\n    };\n    /**\n     * @param {?} parent\n     * @return {?}\n     */\n    AbstractControl.prototype.setParent = function (parent) { this._parent = parent; };\n    /**\n     * Sets the value of the control. Abstract method (implemented in sub-classes).\n     * @abstract\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    AbstractControl.prototype.setValue = function (value, options) { };\n    /**\n     * Patches the value of the control. Abstract method (implemented in sub-classes).\n     * @abstract\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    AbstractControl.prototype.patchValue = function (value, options) { };\n    /**\n     * Resets the control. Abstract method (implemented in sub-classes).\n     * @abstract\n     * @param {?=} value\n     * @param {?=} options\n     * @return {?}\n     */\n    AbstractControl.prototype.reset = function (value, options) { };\n    /**\n     * Re-calculates the value and validation status of the control.\n     *\n     * By default, it will also update the value and validity of its ancestors.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.updateValueAndValidity = function (opts) {\n        if (opts === void 0) { opts = {}; }\n        this._setInitialStatus();\n        this._updateValue();\n        if (this.enabled) {\n            this._cancelExistingSubscription();\n            this._errors = this._runValidator();\n            this._status = this._calculateStatus();\n            if (this._status === VALID || this._status === PENDING) {\n                this._runAsyncValidator(opts.emitEvent);\n            }\n        }\n        if (opts.emitEvent !== false) {\n            this._valueChanges.emit(this._value);\n            this._statusChanges.emit(this._status);\n        }\n        if (this._parent && !opts.onlySelf) {\n            this._parent.updateValueAndValidity(opts);\n        }\n    };\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype._updateTreeValidity = function (opts) {\n        if (opts === void 0) { opts = { emitEvent: true }; }\n        this._forEachChild(function (ctrl) { return ctrl._updateTreeValidity(opts); });\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });\n    };\n    /**\n     * @return {?}\n     */\n    AbstractControl.prototype._setInitialStatus = function () { this._status = this._allControlsDisabled() ? DISABLED : VALID; };\n    /**\n     * @return {?}\n     */\n    AbstractControl.prototype._runValidator = function () {\n        return this.validator ? this.validator(this) : null;\n    };\n    /**\n     * @param {?=} emitEvent\n     * @return {?}\n     */\n    AbstractControl.prototype._runAsyncValidator = function (emitEvent) {\n        var _this = this;\n        if (this.asyncValidator) {\n            this._status = PENDING;\n            var /** @type {?} */ obs = toObservable(this.asyncValidator(this));\n            this._asyncValidationSubscription =\n                obs.subscribe(function (errors) { return _this.setErrors(errors, { emitEvent: emitEvent }); });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    AbstractControl.prototype._cancelExistingSubscription = function () {\n        if (this._asyncValidationSubscription) {\n            this._asyncValidationSubscription.unsubscribe();\n        }\n    };\n    /**\n     * Sets errors on a form control.\n     *\n     * This is used when validations are run manually by the user, rather than automatically.\n     *\n     * Calling `setErrors` will also update the validity of the parent control.\n     *\n     * ### Example\n     *\n     * ```\n     * const login = new FormControl(\"someLogin\");\n     * login.setErrors({\n     *   \"notUnique\": true\n     * });\n     *\n     * expect(login.valid).toEqual(false);\n     * expect(login.errors).toEqual({\"notUnique\": true});\n     *\n     * login.setValue(\"someOtherLogin\");\n     *\n     * expect(login.valid).toEqual(true);\n     * ```\n     * @param {?} errors\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.setErrors = function (errors, opts) {\n        if (opts === void 0) { opts = {}; }\n        this._errors = errors;\n        this._updateControlsErrors(opts.emitEvent !== false);\n    };\n    /**\n     * Retrieves a child control given the control's name or path.\n     *\n     * Paths can be passed in as an array or a string delimited by a dot.\n     *\n     * To get a control nested within a `person` sub-group:\n     *\n     * * `this.form.get('person.name');`\n     *\n     * -OR-\n     *\n     * * `this.form.get(['person', 'name']);`\n     * @param {?} path\n     * @return {?}\n     */\n    AbstractControl.prototype.get = function (path) { return _find(this, path, '.'); };\n    /**\n     * Returns error data if the control with the given path has the error specified. Otherwise\n     * returns null or undefined.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    AbstractControl.prototype.getError = function (errorCode, path) {\n        var /** @type {?} */ control = path ? this.get(path) : this;\n        return control && control._errors ? control._errors[errorCode] : null;\n    };\n    /**\n     * Returns true if the control with the given path has the error specified. Otherwise\n     * returns false.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    AbstractControl.prototype.hasError = function (errorCode, path) { return !!this.getError(errorCode, path); };\n    Object.defineProperty(AbstractControl.prototype, \"root\", {\n        /**\n         * Retrieves the top-level ancestor of this control.\n         * @return {?}\n         */\n        get: function () {\n            var /** @type {?} */ x = this;\n            while (x._parent) {\n                x = x._parent;\n            }\n            return x;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * \\@internal\n     * @param {?} emitEvent\n     * @return {?}\n     */\n    AbstractControl.prototype._updateControlsErrors = function (emitEvent) {\n        this._status = this._calculateStatus();\n        if (emitEvent) {\n            this._statusChanges.emit(this._status);\n        }\n        if (this._parent) {\n            this._parent._updateControlsErrors(emitEvent);\n        }\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    AbstractControl.prototype._initObservables = function () {\n        this._valueChanges = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"EventEmitter\"]();\n        this._statusChanges = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"EventEmitter\"]();\n    };\n    /**\n     * @return {?}\n     */\n    AbstractControl.prototype._calculateStatus = function () {\n        if (this._allControlsDisabled())\n            return DISABLED;\n        if (this._errors)\n            return INVALID;\n        if (this._anyControlsHaveStatus(PENDING))\n            return PENDING;\n        if (this._anyControlsHaveStatus(INVALID))\n            return INVALID;\n        return VALID;\n    };\n    /**\n     * \\@internal\n     * @abstract\n     * @return {?}\n     */\n    AbstractControl.prototype._updateValue = function () { };\n    /**\n     * \\@internal\n     * @abstract\n     * @param {?} cb\n     * @return {?}\n     */\n    AbstractControl.prototype._forEachChild = function (cb) { };\n    /**\n     * \\@internal\n     * @abstract\n     * @param {?} condition\n     * @return {?}\n     */\n    AbstractControl.prototype._anyControls = function (condition) { };\n    /**\n     * \\@internal\n     * @abstract\n     * @return {?}\n     */\n    AbstractControl.prototype._allControlsDisabled = function () { };\n    /**\n     * \\@internal\n     * @param {?} status\n     * @return {?}\n     */\n    AbstractControl.prototype._anyControlsHaveStatus = function (status) {\n        return this._anyControls(function (control) { return control.status === status; });\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    AbstractControl.prototype._anyControlsDirty = function () {\n        return this._anyControls(function (control) { return control.dirty; });\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    AbstractControl.prototype._anyControlsTouched = function () {\n        return this._anyControls(function (control) { return control.touched; });\n    };\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype._updatePristine = function (opts) {\n        if (opts === void 0) { opts = {}; }\n        this._pristine = !this._anyControlsDirty();\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updatePristine(opts);\n        }\n    };\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype._updateTouched = function (opts) {\n        if (opts === void 0) { opts = {}; }\n        this._touched = this._anyControlsTouched();\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updateTouched(opts);\n        }\n    };\n    /**\n     * \\@internal\n     * @param {?} formState\n     * @return {?}\n     */\n    AbstractControl.prototype._isBoxedValue = function (formState) {\n        return typeof formState === 'object' && formState !== null &&\n            Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;\n    };\n    /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    AbstractControl.prototype._registerOnCollectionChange = function (fn) { this._onCollectionChange = fn; };\n    return AbstractControl;\n}());\n/**\n * \\@whatItDoes Tracks the value and validation status of an individual form control.\n *\n * It is one of the three fundamental building blocks of Angular forms, along with\n * {\\@link FormGroup} and {\\@link FormArray}.\n *\n * \\@howToUse\n *\n * When instantiating a {\\@link FormControl}, you can pass in an initial value as the\n * first argument. Example:\n *\n * ```ts\n * const ctrl = new FormControl('some value');\n * console.log(ctrl.value);     // 'some value'\n * ```\n *\n * You can also initialize the control with a form state object on instantiation,\n * which includes both the value and whether or not the control is disabled.\n * You can't use the value key without the disabled key; both are required\n * to use this way of initialization.\n *\n * ```ts\n * const ctrl = new FormControl({value: 'n/a', disabled: true});\n * console.log(ctrl.value);     // 'n/a'\n * console.log(ctrl.status);   // 'DISABLED'\n * ```\n *\n * To include a sync validator (or an array of sync validators) with the control,\n * pass it in as the second argument. Async validators are also supported, but\n * have to be passed in separately as the third arg.\n *\n * ```ts\n * const ctrl = new FormControl('', Validators.required);\n * console.log(ctrl.value);     // ''\n * console.log(ctrl.status);   // 'INVALID'\n * ```\n *\n * See its superclass, {\\@link AbstractControl}, for more properties and methods.\n *\n * * **npm package**: `\\@angular/forms`\n *\n * \\@stable\n */\nvar FormControl = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](FormControl, _super);\n    /**\n     * @param {?=} formState\n     * @param {?=} validator\n     * @param {?=} asyncValidator\n     */\n    function FormControl(formState, validator, asyncValidator) {\n        if (formState === void 0) { formState = null; }\n        var _this = _super.call(this, coerceToValidator(validator), coerceToAsyncValidator(asyncValidator)) || this;\n        /**\n         * \\@internal\n         */\n        _this._onChange = [];\n        _this._applyFormState(formState);\n        _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        _this._initObservables();\n        return _this;\n    }\n    /**\n     * Set the value of the form control to `value`.\n     *\n     * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\n     * and not its parent component. This defaults to false.\n     *\n     * If `emitEvent` is `true`, this\n     * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults\n     * to true (as it falls through to `updateValueAndValidity`).\n     *\n     * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n     * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n     * specified.\n     *\n     * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\n     * model.  This is the default behavior if `emitViewToModelChange` is not specified.\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormControl.prototype.setValue = function (value, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        this._value = value;\n        if (this._onChange.length && options.emitModelToViewChange !== false) {\n            this._onChange.forEach(function (changeFn) { return changeFn(_this._value, options.emitViewToModelChange !== false); });\n        }\n        this.updateValueAndValidity(options);\n    };\n    /**\n     * Patches the value of a control.\n     *\n     * This function is functionally the same as {\\@link FormControl#setValue} at this level.\n     * It exists for symmetry with {\\@link FormGroup#patchValue} on `FormGroups` and `FormArrays`,\n     * where it does behave differently.\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormControl.prototype.patchValue = function (value, options) {\n        if (options === void 0) { options = {}; }\n        this.setValue(value, options);\n    };\n    /**\n     * Resets the form control. This means by default:\n     *\n     * * it is marked as `pristine`\n     * * it is marked as `untouched`\n     * * value is set to null\n     *\n     * You can also reset to a specific form state by passing through a standalone\n     * value or a form state object that contains both a value and a disabled state\n     * (these are the only two properties that cannot be calculated).\n     *\n     * Ex:\n     *\n     * ```ts\n     * this.control.reset('Nancy');\n     *\n     * console.log(this.control.value);  // 'Nancy'\n     * ```\n     *\n     * OR\n     *\n     * ```\n     * this.control.reset({value: 'Nancy', disabled: true});\n     *\n     * console.log(this.control.value);  // 'Nancy'\n     * console.log(this.control.status);  // 'DISABLED'\n     * ```\n     * @param {?=} formState\n     * @param {?=} options\n     * @return {?}\n     */\n    FormControl.prototype.reset = function (formState, options) {\n        if (formState === void 0) { formState = null; }\n        if (options === void 0) { options = {}; }\n        this._applyFormState(formState);\n        this.markAsPristine(options);\n        this.markAsUntouched(options);\n        this.setValue(this._value, options);\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormControl.prototype._updateValue = function () { };\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    FormControl.prototype._anyControls = function (condition) { return false; };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormControl.prototype._allControlsDisabled = function () { return this.disabled; };\n    /**\n     * Register a listener for change events.\n     * @param {?} fn\n     * @return {?}\n     */\n    FormControl.prototype.registerOnChange = function (fn) { this._onChange.push(fn); };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormControl.prototype._clearChangeFns = function () {\n        this._onChange = [];\n        this._onDisabledChange = [];\n        this._onCollectionChange = function () { };\n    };\n    /**\n     * Register a listener for disabled events.\n     * @param {?} fn\n     * @return {?}\n     */\n    FormControl.prototype.registerOnDisabledChange = function (fn) {\n        this._onDisabledChange.push(fn);\n    };\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    FormControl.prototype._forEachChild = function (cb) { };\n    /**\n     * @param {?} formState\n     * @return {?}\n     */\n    FormControl.prototype._applyFormState = function (formState) {\n        if (this._isBoxedValue(formState)) {\n            this._value = formState.value;\n            formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :\n                this.enable({ onlySelf: true, emitEvent: false });\n        }\n        else {\n            this._value = formState;\n        }\n    };\n    return FormControl;\n}(AbstractControl));\n/**\n * \\@whatItDoes Tracks the value and validity state of a group of {\\@link FormControl}\n * instances.\n *\n * A `FormGroup` aggregates the values of each child {\\@link FormControl} into one object,\n * with each control name as the key.  It calculates its status by reducing the statuses\n * of its children. For example, if one of the controls in a group is invalid, the entire\n * group becomes invalid.\n *\n * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n * along with {\\@link FormControl} and {\\@link FormArray}.\n *\n * \\@howToUse\n *\n * When instantiating a {\\@link FormGroup}, pass in a collection of child controls as the first\n * argument. The key for each child will be the name under which it is registered.\n *\n * ### Example\n *\n * ```\n * const form = new FormGroup({\n *   first: new FormControl('Nancy', Validators.minLength(2)),\n *   last: new FormControl('Drew'),\n * });\n *\n * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n * console.log(form.status);  // 'VALID'\n * ```\n *\n * You can also include group-level validators as the second arg, or group-level async\n * validators as the third arg. These come in handy when you want to perform validation\n * that considers the value of more than one child control.\n *\n * ### Example\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('', Validators.minLength(2)),\n *   passwordConfirm: new FormControl('', Validators.minLength(2)),\n * }, passwordMatchValidator);\n *\n *\n * function passwordMatchValidator(g: FormGroup) {\n *    return g.get('password').value === g.get('passwordConfirm').value\n *       ? null : {'mismatch': true};\n * }\n * ```\n *\n * * **npm package**: `\\@angular/forms`\n *\n * \\@stable\n */\nvar FormGroup = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](FormGroup, _super);\n    /**\n     * @param {?} controls\n     * @param {?=} validator\n     * @param {?=} asyncValidator\n     */\n    function FormGroup(controls, validator, asyncValidator) {\n        var _this = _super.call(this, validator || null, asyncValidator || null) || this;\n        _this.controls = controls;\n        _this._initObservables();\n        _this._setUpControls();\n        _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        return _this;\n    }\n    /**\n     * Registers a control with the group's list of controls.\n     *\n     * This method does not update value or validity of the control, so for\n     * most cases you'll want to use {\\@link FormGroup#addControl} instead.\n     * @param {?} name\n     * @param {?} control\n     * @return {?}\n     */\n    FormGroup.prototype.registerControl = function (name, control) {\n        if (this.controls[name])\n            return this.controls[name];\n        this.controls[name] = control;\n        control.setParent(this);\n        control._registerOnCollectionChange(this._onCollectionChange);\n        return control;\n    };\n    /**\n     * Add a control to this group.\n     * @param {?} name\n     * @param {?} control\n     * @return {?}\n     */\n    FormGroup.prototype.addControl = function (name, control) {\n        this.registerControl(name, control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Remove a control from this group.\n     * @param {?} name\n     * @return {?}\n     */\n    FormGroup.prototype.removeControl = function (name) {\n        if (this.controls[name])\n            this.controls[name]._registerOnCollectionChange(function () { });\n        delete (this.controls[name]);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Replace an existing control.\n     * @param {?} name\n     * @param {?} control\n     * @return {?}\n     */\n    FormGroup.prototype.setControl = function (name, control) {\n        if (this.controls[name])\n            this.controls[name]._registerOnCollectionChange(function () { });\n        delete (this.controls[name]);\n        if (control)\n            this.registerControl(name, control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Check whether there is an enabled control with the given name in the group.\n     *\n     * It will return false for disabled controls. If you'd like to check for\n     * existence in the group only, use {\\@link AbstractControl#get} instead.\n     * @param {?} controlName\n     * @return {?}\n     */\n    FormGroup.prototype.contains = function (controlName) {\n        return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n    };\n    /**\n     *  Sets the value of the {\\@link FormGroup}. It accepts an object that matches\n     *  the structure of the group, with control names as keys.\n     *\n     * This method performs strict checks, so it will throw an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const form = new FormGroup({\n     *     first: new FormControl(),\n     *     last: new FormControl()\n     *  });\n     *  console.log(form.value);   // {first: null, last: null}\n     *\n     *  form.setValue({first: 'Nancy', last: 'Drew'});\n     *  console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n     *\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormGroup.prototype.setValue = function (value, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        this._checkAllValuesPresent(value);\n        Object.keys(value).forEach(function (name) {\n            _this._throwIfControlMissing(name);\n            _this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n    };\n    /**\n     *  Patches the value of the {\\@link FormGroup}. It accepts an object with control\n     *  names as keys, and will do its best to match the values to the correct controls\n     *  in the group.\n     *\n     *  It accepts both super-sets and sub-sets of the group without throwing an error.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const form = new FormGroup({\n     *     first: new FormControl(),\n     *     last: new FormControl()\n     *  });\n     *  console.log(form.value);   // {first: null, last: null}\n     *\n     *  form.patchValue({first: 'Nancy'});\n     *  console.log(form.value);   // {first: 'Nancy', last: null}\n     *\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormGroup.prototype.patchValue = function (value, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        Object.keys(value).forEach(function (name) {\n            if (_this.controls[name]) {\n                _this.controls[name].patchValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n            }\n        });\n        this.updateValueAndValidity(options);\n    };\n    /**\n     * Resets the {\\@link FormGroup}. This means by default:\n     *\n     * * The group and all descendants are marked `pristine`\n     * * The group and all descendants are marked `untouched`\n     * * The value of all descendants will be null or null maps\n     *\n     * You can also reset to a specific form state by passing in a map of states\n     * that matches the structure of your form, with control names as keys. The state\n     * can be a standalone value or a form state object with both a value and a disabled\n     * status.\n     *\n     * ### Example\n     *\n     * ```ts\n     * this.form.reset({first: 'name', last: 'last name'});\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * ```\n     *\n     * - OR -\n     *\n     * ```\n     * this.form.reset({\n     *   first: {value: 'name', disabled: true},\n     *   last: 'last'\n     * });\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * console.log(this.form.get('first').status);  // 'DISABLED'\n     * ```\n     * @param {?=} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormGroup.prototype.reset = function (value, options) {\n        if (value === void 0) { value = {}; }\n        if (options === void 0) { options = {}; }\n        this._forEachChild(function (control, name) {\n            control.reset(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n        this._updatePristine(options);\n        this._updateTouched(options);\n    };\n    /**\n     * The aggregate value of the {\\@link FormGroup}, including any disabled controls.\n     *\n     * If you'd like to include all values regardless of disabled status, use this method.\n     * Otherwise, the `value` property is the best way to get the value of the group.\n     * @return {?}\n     */\n    FormGroup.prototype.getRawValue = function () {\n        return this._reduceChildren({}, function (acc, control, name) {\n            acc[name] = control instanceof FormControl ? control.value : ((control)).getRawValue();\n            return acc;\n        });\n    };\n    /**\n     * \\@internal\n     * @param {?} name\n     * @return {?}\n     */\n    FormGroup.prototype._throwIfControlMissing = function (name) {\n        if (!Object.keys(this.controls).length) {\n            throw new Error(\"\\n        There are no form controls registered with this group yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n        }\n        if (!this.controls[name]) {\n            throw new Error(\"Cannot find form control with name: \" + name + \".\");\n        }\n    };\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    FormGroup.prototype._forEachChild = function (cb) {\n        var _this = this;\n        Object.keys(this.controls).forEach(function (k) { return cb(_this.controls[k], k); });\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroup.prototype._setUpControls = function () {\n        var _this = this;\n        this._forEachChild(function (control) {\n            control.setParent(_this);\n            control._registerOnCollectionChange(_this._onCollectionChange);\n        });\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroup.prototype._updateValue = function () { this._value = this._reduceValue(); };\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    FormGroup.prototype._anyControls = function (condition) {\n        var _this = this;\n        var /** @type {?} */ res = false;\n        this._forEachChild(function (control, name) {\n            res = res || (_this.contains(name) && condition(control));\n        });\n        return res;\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroup.prototype._reduceValue = function () {\n        var _this = this;\n        return this._reduceChildren({}, function (acc, control, name) {\n            if (control.enabled || _this.disabled) {\n                acc[name] = control.value;\n            }\n            return acc;\n        });\n    };\n    /**\n     * \\@internal\n     * @param {?} initValue\n     * @param {?} fn\n     * @return {?}\n     */\n    FormGroup.prototype._reduceChildren = function (initValue, fn) {\n        var /** @type {?} */ res = initValue;\n        this._forEachChild(function (control, name) { res = fn(res, control, name); });\n        return res;\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroup.prototype._allControlsDisabled = function () {\n        for (var _i = 0, _a = Object.keys(this.controls); _i < _a.length; _i++) {\n            var controlName = _a[_i];\n            if (this.controls[controlName].enabled) {\n                return false;\n            }\n        }\n        return Object.keys(this.controls).length > 0 || this.disabled;\n    };\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    FormGroup.prototype._checkAllValuesPresent = function (value) {\n        this._forEachChild(function (control, name) {\n            if (value[name] === undefined) {\n                throw new Error(\"Must supply a value for form control with name: '\" + name + \"'.\");\n            }\n        });\n    };\n    return FormGroup;\n}(AbstractControl));\n/**\n * \\@whatItDoes Tracks the value and validity state of an array of {\\@link FormControl},\n * {\\@link FormGroup} or {\\@link FormArray} instances.\n *\n * A `FormArray` aggregates the values of each child {\\@link FormControl} into an array.\n * It calculates its status by reducing the statuses of its children. For example, if one of\n * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n *\n * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n * along with {\\@link FormControl} and {\\@link FormGroup}.\n *\n * \\@howToUse\n *\n * When instantiating a {\\@link FormArray}, pass in an array of child controls as the first\n * argument.\n *\n * ### Example\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy', Validators.minLength(2)),\n *   new FormControl('Drew'),\n * ]);\n *\n * console.log(arr.value);   // ['Nancy', 'Drew']\n * console.log(arr.status);  // 'VALID'\n * ```\n *\n * You can also include array-level validators as the second arg, or array-level async\n * validators as the third arg. These come in handy when you want to perform validation\n * that considers the value of more than one child control.\n *\n * ### Adding or removing controls\n *\n * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\n * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n * the `FormArray` directly, as that will result in strange and unexpected behavior such\n * as broken change detection.\n *\n * * **npm package**: `\\@angular/forms`\n *\n * \\@stable\n */\nvar FormArray = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](FormArray, _super);\n    /**\n     * @param {?} controls\n     * @param {?=} validator\n     * @param {?=} asyncValidator\n     */\n    function FormArray(controls, validator, asyncValidator) {\n        var _this = _super.call(this, validator || null, asyncValidator || null) || this;\n        _this.controls = controls;\n        _this._initObservables();\n        _this._setUpControls();\n        _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        return _this;\n    }\n    /**\n     * Get the {\\@link AbstractControl} at the given `index` in the array.\n     * @param {?} index\n     * @return {?}\n     */\n    FormArray.prototype.at = function (index) { return this.controls[index]; };\n    /**\n     * Insert a new {\\@link AbstractControl} at the end of the array.\n     * @param {?} control\n     * @return {?}\n     */\n    FormArray.prototype.push = function (control) {\n        this.controls.push(control);\n        this._registerControl(control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Insert a new {\\@link AbstractControl} at the given `index` in the array.\n     * @param {?} index\n     * @param {?} control\n     * @return {?}\n     */\n    FormArray.prototype.insert = function (index, control) {\n        this.controls.splice(index, 0, control);\n        this._registerControl(control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Remove the control at the given `index` in the array.\n     * @param {?} index\n     * @return {?}\n     */\n    FormArray.prototype.removeAt = function (index) {\n        if (this.controls[index])\n            this.controls[index]._registerOnCollectionChange(function () { });\n        this.controls.splice(index, 1);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Replace an existing control.\n     * @param {?} index\n     * @param {?} control\n     * @return {?}\n     */\n    FormArray.prototype.setControl = function (index, control) {\n        if (this.controls[index])\n            this.controls[index]._registerOnCollectionChange(function () { });\n        this.controls.splice(index, 1);\n        if (control) {\n            this.controls.splice(index, 0, control);\n            this._registerControl(control);\n        }\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    Object.defineProperty(FormArray.prototype, \"length\", {\n        /**\n         * Length of the control array.\n         * @return {?}\n         */\n        get: function () { return this.controls.length; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     *  Sets the value of the {\\@link FormArray}. It accepts an array that matches\n     *  the structure of the control.\n     *\n     * This method performs strict checks, so it will throw an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const arr = new FormArray([\n     *     new FormControl(),\n     *     new FormControl()\n     *  ]);\n     *  console.log(arr.value);   // [null, null]\n     *\n     *  arr.setValue(['Nancy', 'Drew']);\n     *  console.log(arr.value);   // ['Nancy', 'Drew']\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormArray.prototype.setValue = function (value, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        this._checkAllValuesPresent(value);\n        value.forEach(function (newValue, index) {\n            _this._throwIfControlMissing(index);\n            _this.at(index).setValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n    };\n    /**\n     *  Patches the value of the {\\@link FormArray}. It accepts an array that matches the\n     *  structure of the control, and will do its best to match the values to the correct\n     *  controls in the group.\n     *\n     *  It accepts both super-sets and sub-sets of the array without throwing an error.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const arr = new FormArray([\n     *     new FormControl(),\n     *     new FormControl()\n     *  ]);\n     *  console.log(arr.value);   // [null, null]\n     *\n     *  arr.patchValue(['Nancy']);\n     *  console.log(arr.value);   // ['Nancy', null]\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormArray.prototype.patchValue = function (value, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        value.forEach(function (newValue, index) {\n            if (_this.at(index)) {\n                _this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });\n            }\n        });\n        this.updateValueAndValidity(options);\n    };\n    /**\n     * Resets the {\\@link FormArray}. This means by default:\n     *\n     * * The array and all descendants are marked `pristine`\n     * * The array and all descendants are marked `untouched`\n     * * The value of all descendants will be null or null maps\n     *\n     * You can also reset to a specific form state by passing in an array of states\n     * that matches the structure of the control. The state can be a standalone value\n     * or a form state object with both a value and a disabled status.\n     *\n     * ### Example\n     *\n     * ```ts\n     * this.arr.reset(['name', 'last name']);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * ```\n     *\n     * - OR -\n     *\n     * ```\n     * this.arr.reset([\n     *   {value: 'name', disabled: true},\n     *   'last'\n     * ]);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * console.log(this.arr.get(0).status);  // 'DISABLED'\n     * ```\n     * @param {?=} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormArray.prototype.reset = function (value, options) {\n        if (value === void 0) { value = []; }\n        if (options === void 0) { options = {}; }\n        this._forEachChild(function (control, index) {\n            control.reset(value[index], { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n        this._updatePristine(options);\n        this._updateTouched(options);\n    };\n    /**\n     * The aggregate value of the array, including any disabled controls.\n     *\n     * If you'd like to include all values regardless of disabled status, use this method.\n     * Otherwise, the `value` property is the best way to get the value of the array.\n     * @return {?}\n     */\n    FormArray.prototype.getRawValue = function () {\n        return this.controls.map(function (control) {\n            return control instanceof FormControl ? control.value : ((control)).getRawValue();\n        });\n    };\n    /**\n     * \\@internal\n     * @param {?} index\n     * @return {?}\n     */\n    FormArray.prototype._throwIfControlMissing = function (index) {\n        if (!this.controls.length) {\n            throw new Error(\"\\n        There are no form controls registered with this array yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n        }\n        if (!this.at(index)) {\n            throw new Error(\"Cannot find form control at index \" + index);\n        }\n    };\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    FormArray.prototype._forEachChild = function (cb) {\n        this.controls.forEach(function (control, index) { cb(control, index); });\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormArray.prototype._updateValue = function () {\n        var _this = this;\n        this._value = this.controls.filter(function (control) { return control.enabled || _this.disabled; })\n            .map(function (control) { return control.value; });\n    };\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    FormArray.prototype._anyControls = function (condition) {\n        return this.controls.some(function (control) { return control.enabled && condition(control); });\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormArray.prototype._setUpControls = function () {\n        var _this = this;\n        this._forEachChild(function (control) { return _this._registerControl(control); });\n    };\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    FormArray.prototype._checkAllValuesPresent = function (value) {\n        this._forEachChild(function (control, i) {\n            if (value[i] === undefined) {\n                throw new Error(\"Must supply a value for form control at index: \" + i + \".\");\n            }\n        });\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormArray.prototype._allControlsDisabled = function () {\n        for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {\n            var control = _a[_i];\n            if (control.enabled)\n                return false;\n        }\n        return this.controls.length > 0 || this.disabled;\n    };\n    /**\n     * @param {?} control\n     * @return {?}\n     */\n    FormArray.prototype._registerControl = function (control) {\n        control.setParent(this);\n        control._registerOnCollectionChange(this._onCollectionChange);\n    };\n    return FormArray;\n}(AbstractControl));\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formDirectiveProvider = {\n    provide: ControlContainer,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return NgForm; })\n};\nvar resolvedPromise = Promise.resolve(null);\n/**\n * \\@whatItDoes Creates a top-level {\\@link FormGroup} instance and binds it to a form\n * to track aggregate form value and validation status.\n *\n * \\@howToUse\n *\n * As soon as you import the `FormsModule`, this directive becomes active by default on\n * all `<form>` tags.  You don't need to add a special selector.\n *\n * You can export the directive into a local template variable using `ngForm` as the key\n * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n * {\\@link FormGroup} instance are duplicated on the directive itself, so a reference to it\n * will give you access to the aggregate value and validity status of the form, as well as\n * user interaction properties like `dirty` and `touched`.\n *\n * To register child controls with the form, you'll want to use {\\@link NgModel} with a\n * `name` attribute.  You can also use {\\@link NgModelGroup} if you'd like to create\n * sub-groups within the form.\n *\n * You can listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n * submission event.\n *\n * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `FormsModule`\n *\n *  \\@stable\n */\nvar NgForm = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](NgForm, _super);\n    /**\n     * @param {?} validators\n     * @param {?} asyncValidators\n     */\n    function NgForm(validators, asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this._submitted = false;\n        _this.ngSubmit = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"EventEmitter\"]();\n        _this.form =\n            new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n        return _this;\n    }\n    Object.defineProperty(NgForm.prototype, \"submitted\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._submitted; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForm.prototype, \"formDirective\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForm.prototype, \"control\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.form; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForm.prototype, \"path\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return []; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForm.prototype, \"controls\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.form.controls; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.addControl = function (dir) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ container = _this._findContainer(dir.path);\n            dir._control = (container.registerControl(dir.name, dir.control));\n            setUpControl(dir.control, dir);\n            dir.control.updateValueAndValidity({ emitEvent: false });\n        });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.getControl = function (dir) { return (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.removeControl = function (dir) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ container = _this._findContainer(dir.path);\n            if (container) {\n                container.removeControl(dir.name);\n            }\n        });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.addFormGroup = function (dir) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ container = _this._findContainer(dir.path);\n            var /** @type {?} */ group = new FormGroup({});\n            setUpFormContainer(group, dir);\n            container.registerControl(dir.name, group);\n            group.updateValueAndValidity({ emitEvent: false });\n        });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.removeFormGroup = function (dir) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ container = _this._findContainer(dir.path);\n            if (container) {\n                container.removeControl(dir.name);\n            }\n        });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.getFormGroup = function (dir) { return (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @param {?} value\n     * @return {?}\n     */\n    NgForm.prototype.updateModel = function (dir, value) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ ctrl = (_this.form.get(/** @type {?} */ ((dir.path))));\n            ctrl.setValue(value);\n        });\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NgForm.prototype.setValue = function (value) { this.control.setValue(value); };\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    NgForm.prototype.onSubmit = function ($event) {\n        this._submitted = true;\n        this.ngSubmit.emit($event);\n        return false;\n    };\n    /**\n     * @return {?}\n     */\n    NgForm.prototype.onReset = function () { this.resetForm(); };\n    /**\n     * @param {?=} value\n     * @return {?}\n     */\n    NgForm.prototype.resetForm = function (value) {\n        if (value === void 0) { value = undefined; }\n        this.form.reset(value);\n        this._submitted = false;\n    };\n    /**\n     * \\@internal\n     * @param {?} path\n     * @return {?}\n     */\n    NgForm.prototype._findContainer = function (path) {\n        path.pop();\n        return path.length ? (this.form.get(path)) : this.form;\n    };\n    return NgForm;\n}(ControlContainer));\nNgForm.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{\n                selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',\n                providers: [formDirectiveProvider],\n                host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                outputs: ['ngSubmit'],\n                exportAs: 'ngForm'\n            },] },\n];\n/**\n * @nocollapse\n */\nNgForm.ctorParameters = function () { return [\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_VALIDATORS,] },] },\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar FormErrorExamples = {\n    formControlName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <input formControlName=\\\"firstName\\\">\\n    <\/div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       firstName: new FormControl()\\n    });\",\n    formGroupName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <div formGroupName=\\\"person\\\">\\n          <input formControlName=\\\"firstName\\\">\\n       <\/div>\\n    <\/div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       person: new FormGroup({ firstName: new FormControl() })\\n    });\",\n    formArrayName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <div formArrayName=\\\"cities\\\">\\n        <div *ngFor=\\\"let city of cityArray.controls; index as i\\\">\\n          <input [formControlName]=\\\"i\\\">\\n        <\/div>\\n      <\/div>\\n    <\/div>\\n\\n    In your class:\\n\\n    this.cityArray = new FormArray([new FormControl('SF')]);\\n    this.myGroup = new FormGroup({\\n      cities: this.cityArray\\n    });\",\n    ngModelGroup: \"\\n    <form>\\n       <div ngModelGroup=\\\"person\\\">\\n          <input [(ngModel)]=\\\"person.name\\\" name=\\\"firstName\\\">\\n       <\/div>\\n    <\/form>\",\n    ngModelWithFormGroup: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <input formControlName=\\\"firstName\\\">\\n       <input [(ngModel)]=\\\"showMoreControls\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n    <\/div>\\n  \"\n};\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar TemplateDrivenErrors = (function () {\n    function TemplateDrivenErrors() {\n    }\n    /**\n     * @return {?}\n     */\n    TemplateDrivenErrors.modelParentException = function () {\n        throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\\n      formGroup's partner directive \\\"formControlName\\\" instead.  Example:\\n\\n      \" + FormErrorExamples.formControlName + \"\\n\\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\\n\\n      Example:\\n\\n      \" + FormErrorExamples.ngModelWithFormGroup);\n    };\n    /**\n     * @return {?}\n     */\n    TemplateDrivenErrors.formGroupNameException = function () {\n        throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\\n\\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\\n\\n      \" + FormErrorExamples.formGroupName + \"\\n\\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\\n\\n      \" + FormErrorExamples.ngModelGroup);\n    };\n    /**\n     * @return {?}\n     */\n    TemplateDrivenErrors.missingNameException = function () {\n        throw new Error(\"If ngModel is used within a form tag, either the name attribute must be set or the form\\n      control must be defined as 'standalone' in ngModelOptions.\\n\\n      Example 1: <input [(ngModel)]=\\\"person.firstName\\\" name=\\\"first\\\">\\n      Example 2: <input [(ngModel)]=\\\"person.firstName\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\");\n    };\n    /**\n     * @return {?}\n     */\n    TemplateDrivenErrors.modelGroupParentException = function () {\n        throw new Error(\"\\n      ngModelGroup cannot be used with a parent formGroup directive.\\n\\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\\n\\n      \" + FormErrorExamples.formGroupName + \"\\n\\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\\n\\n      \" + FormErrorExamples.ngModelGroup);\n    };\n    return TemplateDrivenErrors;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar modelGroupProvider = {\n    provide: ControlContainer,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return NgModelGroup; })\n};\n/**\n * \\@whatItDoes Creates and binds a {\\@link FormGroup} instance to a DOM element.\n *\n * \\@howToUse\n *\n * This directive can only be used as a child of {\\@link NgForm} (or in other words,\n * within `<form>` tags).\n *\n * Use this directive if you'd like to create a sub-group within a form. This can\n * come in handy if you want to validate a sub-group of your form separately from\n * the rest of your form, or if some values in your domain model make more sense to\n * consume together in a nested object.\n *\n * Pass in the name you'd like this sub-group to have and it will become the key\n * for the sub-group in the form's full value. You can also export the directive into\n * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n *\n * {\\@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `FormsModule`\n *\n * \\@stable\n */\nvar NgModelGroup = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](NgModelGroup, _super);\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     */\n    function NgModelGroup(parent, validators, asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this._parent = parent;\n        _this._validators = validators;\n        _this._asyncValidators = asyncValidators;\n        return _this;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    NgModelGroup.prototype._checkParentType = function () {\n        if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n            TemplateDrivenErrors.modelGroupParentException();\n        }\n    };\n    return NgModelGroup;\n}(AbstractFormGroupDirective));\nNgModelGroup.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' },] },\n];\n/**\n * @nocollapse\n */\nNgModelGroup.ctorParameters = function () { return [\n    { type: ControlContainer, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Host\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"SkipSelf\"] },] },\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_VALIDATORS,] },] },\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },\n]; };\nNgModelGroup.propDecorators = {\n    'name': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['ngModelGroup',] },],\n};\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formControlBinding = {\n    provide: NgControl,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return NgModel; })\n};\n/**\n * `ngModel` forces an additional change detection run when its inputs change:\n * E.g.:\n * ```\n * <div>{{myModel.valid}}<\/div>\n * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n * ```\n * I.e. `ngModel` can export itself on the element and then be used in the template.\n * Normally, this would result in expressions before the `input` that use the exported directive\n * to have and old value as they have been\n * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n * detection run.\n *\n * Notes:\n * - this is just one extra run no matter how many `ngModel` have been changed.\n * - this is a general problem when using `exportAs` for directives!\n */\nvar resolvedPromise$1 = Promise.resolve(null);\n/**\n * \\@whatItDoes Creates a {\\@link FormControl} instance from a domain model and binds it\n * to a form control element.\n *\n * The {\\@link FormControl} instance will track the value, user interaction, and\n * validation status of the control and keep the view synced with the model. If used\n * within a parent form, the directive will also register itself with the form as a child\n * control.\n *\n * \\@howToUse\n *\n * This directive can be used by itself or as part of a larger form. All you need is the\n * `ngModel` selector to activate it.\n *\n * It accepts a domain model as an optional {\\@link Input}. If you have a one-way binding\n * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\n * class will set the value in the view. If you have a two-way binding with `[()]` syntax\n * (also known as 'banana-box syntax'), the value in the UI will always be synced back to\n * the domain model in your class as well.\n *\n * If you wish to inspect the properties of the associated {\\@link FormControl} (like\n * validity state), you can also export the directive into a local template variable using\n * `ngModel` as the key (ex: `#myVar=\"ngModel\"`). You can then access the control using the\n * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)\n * will fall through to the control anyway, so you can access them directly. You can see a\n * full list of properties directly available in {\\@link AbstractControlDirective}.\n *\n * The following is an example of a simple standalone control using `ngModel`:\n *\n * {\\@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n *\n * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n * so that the control can be registered with the parent form under that name.\n *\n * It's worth noting that in the context of a parent form, you often can skip one-way or\n * two-way binding because the parent form will sync the value for you. You can access\n * its properties by exporting it into a local template variable using `ngForm` (ex:\n * `#f=\"ngForm\"`). Then you can pass it where it needs to go on submit.\n *\n * If you do need to populate initial values into your form, using a one-way binding for\n * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n * than the domain model's value on submit.\n *\n * Take a look at an example of using `ngModel` within a form:\n *\n * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * To see `ngModel` examples with different form control types, see:\n *\n * * Radio buttons: {\\@link RadioControlValueAccessor}\n * * Selects: {\\@link SelectControlValueAccessor}\n *\n * **npm package**: `\\@angular/forms`\n *\n * **NgModule**: `FormsModule`\n *\n *  \\@stable\n */\nvar NgModel = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](NgModel, _super);\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     * @param {?} valueAccessors\n     */\n    function NgModel(parent, validators, asyncValidators, valueAccessors) {\n        var _this = _super.call(this) || this;\n        /**\n         * \\@internal\n         */\n        _this._control = new FormControl();\n        /**\n         * \\@internal\n         */\n        _this._registered = false;\n        _this.update = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"EventEmitter\"]();\n        _this._parent = parent;\n        _this._rawValidators = validators || [];\n        _this._rawAsyncValidators = asyncValidators || [];\n        _this.valueAccessor = selectValueAccessor(_this, valueAccessors);\n        return _this;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NgModel.prototype.ngOnChanges = function (changes) {\n        this._checkForErrors();\n        if (!this._registered)\n            this._setUpControl();\n        if ('isDisabled' in changes) {\n            this._updateDisabled(changes);\n        }\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            this._updateValue(this.model);\n            this.viewModel = this.model;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype.ngOnDestroy = function () { this.formDirective && this.formDirective.removeControl(this); };\n    Object.defineProperty(NgModel.prototype, \"control\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._control; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgModel.prototype, \"path\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._parent ? controlPath(this.name, this._parent) : [this.name];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgModel.prototype, \"formDirective\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._parent ? this._parent.formDirective : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgModel.prototype, \"validator\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return composeValidators(this._rawValidators); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgModel.prototype, \"asyncValidator\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return composeAsyncValidators(this._rawAsyncValidators);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    NgModel.prototype.viewToModelUpdate = function (newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._setUpControl = function () {\n        this._isStandalone() ? this._setUpStandalone() :\n            this.formDirective.addControl(this);\n        this._registered = true;\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._isStandalone = function () {\n        return !this._parent || !!(this.options && this.options.standalone);\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._setUpStandalone = function () {\n        setUpControl(this._control, this);\n        this._control.updateValueAndValidity({ emitEvent: false });\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._checkForErrors = function () {\n        if (!this._isStandalone()) {\n            this._checkParentType();\n        }\n        this._checkName();\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._checkParentType = function () {\n        if (!(this._parent instanceof NgModelGroup) &&\n            this._parent instanceof AbstractFormGroupDirective) {\n            TemplateDrivenErrors.formGroupNameException();\n        }\n        else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n            TemplateDrivenErrors.modelParentException();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._checkName = function () {\n        if (this.options && this.options.name)\n            this.name = this.options.name;\n        if (!this._isStandalone() && !this.name) {\n            TemplateDrivenErrors.missingNameException();\n        }\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NgModel.prototype._updateValue = function (value) {\n        var _this = this;\n        resolvedPromise$1.then(function () { _this.control.setValue(value, { emitViewToModelChange: false }); });\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NgModel.prototype._updateDisabled = function (changes) {\n        var _this = this;\n        var /** @type {?} */ disabledValue = changes['isDisabled'].currentValue;\n        var /** @type {?} */ isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');\n        resolvedPromise$1.then(function () {\n            if (isDisabled && !_this.control.disabled) {\n                _this.control.disable();\n            }\n            else if (!isDisabled && _this.control.disabled) {\n                _this.control.enable();\n            }\n        });\n    };\n    return NgModel;\n}(NgControl));\nNgModel.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{\n                selector: '[ngModel]:not([formControlName]):not([formControl])',\n                providers: [formControlBinding],\n                exportAs: 'ngModel'\n            },] },\n];\n/**\n * @nocollapse\n */\nNgModel.ctorParameters = function () { return [\n    { type: ControlContainer, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Host\"] },] },\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_VALIDATORS,] },] },\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_VALUE_ACCESSOR,] },] },\n]; };\nNgModel.propDecorators = {\n    'name': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],\n    'isDisabled': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['disabled',] },],\n    'model': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['ngModel',] },],\n    'options': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['ngModelOptions',] },],\n    'update': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Output\"], args: ['ngModelChange',] },],\n};\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ReactiveErrors = (function () {\n    function ReactiveErrors() {\n    }\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.controlParentException = function () {\n        throw new Error(\"formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + FormErrorExamples.formControlName);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.ngModelGroupException = function () {\n        throw new Error(\"formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\\n       that also have a \\\"form\\\" prefix: formGroupName, formArrayName, or formGroup.\\n\\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\\n\\n        \" + FormErrorExamples.formGroupName + \"\\n\\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\\n\\n        \" + FormErrorExamples.ngModelGroup);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.missingFormException = function () {\n        throw new Error(\"formGroup expects a FormGroup instance. Please pass one in.\\n\\n       Example:\\n\\n       \" + FormErrorExamples.formControlName);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.groupParentException = function () {\n        throw new Error(\"formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n      directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + FormErrorExamples.formGroupName);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.arrayParentException = function () {\n        throw new Error(\"formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n        Example:\\n\\n        \" + FormErrorExamples.formArrayName);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.disabledAttrWarning = function () {\n        console.warn(\"\\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\\n      you. We recommend using this approach to avoid 'changed after checked' errors.\\n       \\n      Example: \\n      form = new FormGroup({\\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\\n        last: new FormControl('Drew', Validators.required)\\n      });\\n    \");\n    };\n    return ReactiveErrors;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formControlBinding$1 = {\n    provide: NgControl,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return FormControlDirective; })\n};\n/**\n * \\@whatItDoes Syncs a standalone {\\@link FormControl} instance to a form control element.\n *\n * In other words, this directive ensures that any values written to the {\\@link FormControl}\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\n * any values written to the DOM element through user input will be reflected in the\n * {\\@link FormControl} instance (view -> model).\n *\n * \\@howToUse\n *\n * Use this directive if you'd like to create and manage a {\\@link FormControl} instance directly.\n * Simply create a {\\@link FormControl}, save it to your component class, and pass it into the\n * {\\@link FormControlDirective}.\n *\n * This directive is designed to be used as a standalone control.  Unlike {\\@link FormControlName},\n * it does not require that your {\\@link FormControl} instance be part of any parent\n * {\\@link FormGroup}, and it won't be registered to any {\\@link FormGroupDirective} that\n * exists above it.\n *\n * **Get the value**: the `value` property is always synced and available on the\n * {\\@link FormControl} instance. See a full list of available properties in\n * {\\@link AbstractControl}.\n *\n * **Set the value**: You can pass in an initial value when instantiating the {\\@link FormControl},\n * or you can set it programmatically later using {\\@link AbstractControl#setValue} or\n * {\\@link AbstractControl#patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the control, you can\n * subscribe to the {\\@link AbstractControl#valueChanges} event.  You can also listen to\n * {\\@link AbstractControl#statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * {\\@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `ReactiveFormsModule`\n *\n *  \\@stable\n */\nvar FormControlDirective = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](FormControlDirective, _super);\n    /**\n     * @param {?} validators\n     * @param {?} asyncValidators\n     * @param {?} valueAccessors\n     */\n    function FormControlDirective(validators, asyncValidators, valueAccessors) {\n        var _this = _super.call(this) || this;\n        _this.update = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"EventEmitter\"]();\n        _this._rawValidators = validators || [];\n        _this._rawAsyncValidators = asyncValidators || [];\n        _this.valueAccessor = selectValueAccessor(_this, valueAccessors);\n        return _this;\n    }\n    Object.defineProperty(FormControlDirective.prototype, \"isDisabled\", {\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FormControlDirective.prototype.ngOnChanges = function (changes) {\n        if (this._isControlChanged(changes)) {\n            setUpControl(this.form, this);\n            if (this.control.disabled && ((this.valueAccessor)).setDisabledState) {\n                ((((this.valueAccessor)).setDisabledState))(true);\n            }\n            this.form.updateValueAndValidity({ emitEvent: false });\n        }\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            this.form.setValue(this.model);\n            this.viewModel = this.model;\n        }\n    };\n    Object.defineProperty(FormControlDirective.prototype, \"path\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return []; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlDirective.prototype, \"validator\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return composeValidators(this._rawValidators); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlDirective.prototype, \"asyncValidator\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return composeAsyncValidators(this._rawAsyncValidators);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlDirective.prototype, \"control\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.form; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    FormControlDirective.prototype.viewToModelUpdate = function (newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FormControlDirective.prototype._isControlChanged = function (changes) {\n        return changes.hasOwnProperty('form');\n    };\n    return FormControlDirective;\n}(NgControl));\nFormControlDirective.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' },] },\n];\n/**\n * @nocollapse\n */\nFormControlDirective.ctorParameters = function () { return [\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_VALIDATORS,] },] },\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_VALUE_ACCESSOR,] },] },\n]; };\nFormControlDirective.propDecorators = {\n    'form': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['formControl',] },],\n    'model': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['ngModel',] },],\n    'update': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Output\"], args: ['ngModelChange',] },],\n    'isDisabled': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['disabled',] },],\n};\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formDirectiveProvider$1 = {\n    provide: ControlContainer,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return FormGroupDirective; })\n};\n/**\n * \\@whatItDoes Binds an existing {\\@link FormGroup} to a DOM element.\n *\n * \\@howToUse\n *\n * This directive accepts an existing {\\@link FormGroup} instance. It will then use this\n * {\\@link FormGroup} instance to match any child {\\@link FormControl}, {\\@link FormGroup},\n * and {\\@link FormArray} instances to child {\\@link FormControlName}, {\\@link FormGroupName},\n * and {\\@link FormArrayName} directives.\n *\n * **Set value**: You can set the form's initial value when instantiating the\n * {\\@link FormGroup}, or you can set it programmatically later using the {\\@link FormGroup}'s\n * {\\@link AbstractControl#setValue} or {\\@link AbstractControl#patchValue} methods.\n *\n * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe\n * to the {\\@link FormGroup}'s {\\@link AbstractControl#valueChanges} event.  You can also listen to\n * its {\\@link AbstractControl#statusChanges} event to be notified when the validation status is\n * re-calculated.\n *\n * Furthermore, you can listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n * submission event.\n *\n * ### Example\n *\n * In this example, we create form controls for first name and last name.\n *\n * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * **npm package**: `\\@angular/forms`\n *\n * **NgModule**: {\\@link ReactiveFormsModule}\n *\n *  \\@stable\n */\nvar FormGroupDirective = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](FormGroupDirective, _super);\n    /**\n     * @param {?} _validators\n     * @param {?} _asyncValidators\n     */\n    function FormGroupDirective(_validators, _asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this._validators = _validators;\n        _this._asyncValidators = _asyncValidators;\n        _this._submitted = false;\n        _this.directives = [];\n        _this.form = ((null));\n        _this.ngSubmit = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"EventEmitter\"]();\n        return _this;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FormGroupDirective.prototype.ngOnChanges = function (changes) {\n        this._checkFormPresent();\n        if (changes.hasOwnProperty('form')) {\n            this._updateValidators();\n            this._updateDomValue();\n            this._updateRegistrations();\n        }\n    };\n    Object.defineProperty(FormGroupDirective.prototype, \"submitted\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._submitted; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormGroupDirective.prototype, \"formDirective\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormGroupDirective.prototype, \"control\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.form; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormGroupDirective.prototype, \"path\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return []; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.addControl = function (dir) {\n        var /** @type {?} */ ctrl = this.form.get(dir.path);\n        setUpControl(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n        this.directives.push(dir);\n        return ctrl;\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.getControl = function (dir) { return (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.removeControl = function (dir) { remove(this.directives, dir); };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.addFormGroup = function (dir) {\n        var /** @type {?} */ ctrl = this.form.get(dir.path);\n        setUpFormContainer(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.removeFormGroup = function (dir) { };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.getFormGroup = function (dir) { return (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.addFormArray = function (dir) {\n        var /** @type {?} */ ctrl = this.form.get(dir.path);\n        setUpFormContainer(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.removeFormArray = function (dir) { };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.getFormArray = function (dir) { return (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @param {?} value\n     * @return {?}\n     */\n    FormGroupDirective.prototype.updateModel = function (dir, value) {\n        var /** @type {?} */ ctrl = (this.form.get(dir.path));\n        ctrl.setValue(value);\n    };\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    FormGroupDirective.prototype.onSubmit = function ($event) {\n        this._submitted = true;\n        this.ngSubmit.emit($event);\n        return false;\n    };\n    /**\n     * @return {?}\n     */\n    FormGroupDirective.prototype.onReset = function () { this.resetForm(); };\n    /**\n     * @param {?=} value\n     * @return {?}\n     */\n    FormGroupDirective.prototype.resetForm = function (value) {\n        if (value === void 0) { value = undefined; }\n        this.form.reset(value);\n        this._submitted = false;\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroupDirective.prototype._updateDomValue = function () {\n        var _this = this;\n        this.directives.forEach(function (dir) {\n            var /** @type {?} */ newCtrl = _this.form.get(dir.path);\n            if (dir._control !== newCtrl) {\n                cleanUpControl(dir._control, dir);\n                if (newCtrl)\n                    setUpControl(newCtrl, dir);\n                dir._control = newCtrl;\n            }\n        });\n        this.form._updateTreeValidity({ emitEvent: false });\n    };\n    /**\n     * @return {?}\n     */\n    FormGroupDirective.prototype._updateRegistrations = function () {\n        var _this = this;\n        this.form._registerOnCollectionChange(function () { return _this._updateDomValue(); });\n        if (this._oldForm)\n            this._oldForm._registerOnCollectionChange(function () { });\n        this._oldForm = this.form;\n    };\n    /**\n     * @return {?}\n     */\n    FormGroupDirective.prototype._updateValidators = function () {\n        var /** @type {?} */ sync = composeValidators(this._validators);\n        this.form.validator = Validators.compose([/** @type {?} */ ((this.form.validator)), /** @type {?} */ ((sync))]);\n        var /** @type {?} */ async = composeAsyncValidators(this._asyncValidators);\n        this.form.asyncValidator = Validators.composeAsync([/** @type {?} */ ((this.form.asyncValidator)), /** @type {?} */ ((async))]);\n    };\n    /**\n     * @return {?}\n     */\n    FormGroupDirective.prototype._checkFormPresent = function () {\n        if (!this.form) {\n            ReactiveErrors.missingFormException();\n        }\n    };\n    return FormGroupDirective;\n}(ControlContainer));\nFormGroupDirective.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{\n                selector: '[formGroup]',\n                providers: [formDirectiveProvider$1],\n                host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                exportAs: 'ngForm'\n            },] },\n];\n/**\n * @nocollapse\n */\nFormGroupDirective.ctorParameters = function () { return [\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_VALIDATORS,] },] },\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },\n]; };\nFormGroupDirective.propDecorators = {\n    'form': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['formGroup',] },],\n    'ngSubmit': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Output\"] },],\n};\n/**\n * @template T\n * @param {?} list\n * @param {?} el\n * @return {?}\n */\nfunction remove(list, el) {\n    var /** @type {?} */ index = list.indexOf(el);\n    if (index > -1) {\n        list.splice(index, 1);\n    }\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formGroupNameProvider = {\n    provide: ControlContainer,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return FormGroupName; })\n};\n/**\n * \\@whatItDoes Syncs a nested {\\@link FormGroup} to a DOM element.\n *\n * \\@howToUse\n *\n * This directive can only be used with a parent {\\@link FormGroupDirective} (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested {\\@link FormGroup} you want to link, and\n * will look for a {\\@link FormGroup} registered with that name in the parent\n * {\\@link FormGroup} instance you passed into {\\@link FormGroupDirective}.\n *\n * Nested form groups can come in handy when you want to validate a sub-group of a\n * form separately from the rest or when you'd like to group the values of certain\n * controls into their own nested object.\n *\n * **Access the group**: You can access the associated {\\@link FormGroup} using the\n * {\\@link AbstractControl#get} method. Ex: `this.form.get('name')`.\n *\n * You can also access individual controls within the group using dot syntax.\n * Ex: `this.form.get('name.first')`\n *\n * **Get the value**: the `value` property is always synced and available on the\n * {\\@link FormGroup}. See a full list of available properties in {\\@link AbstractControl}.\n *\n * **Set the value**: You can set an initial value for each child control when instantiating\n * the {\\@link FormGroup}, or you can set it programmatically later using\n * {\\@link AbstractControl#setValue} or {\\@link AbstractControl#patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the group, you can\n * subscribe to the {\\@link AbstractControl#valueChanges} event.  You can also listen to\n * {\\@link AbstractControl#statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * {\\@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `ReactiveFormsModule`\n *\n * \\@stable\n */\nvar FormGroupName = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](FormGroupName, _super);\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     */\n    function FormGroupName(parent, validators, asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this._parent = parent;\n        _this._validators = validators;\n        _this._asyncValidators = asyncValidators;\n        return _this;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroupName.prototype._checkParentType = function () {\n        if (_hasInvalidParent(this._parent)) {\n            ReactiveErrors.groupParentException();\n        }\n    };\n    return FormGroupName;\n}(AbstractFormGroupDirective));\nFormGroupName.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] },] },\n];\n/**\n * @nocollapse\n */\nFormGroupName.ctorParameters = function () { return [\n    { type: ControlContainer, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Host\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"SkipSelf\"] },] },\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_VALIDATORS,] },] },\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },\n]; };\nFormGroupName.propDecorators = {\n    'name': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['formGroupName',] },],\n};\nvar formArrayNameProvider = {\n    provide: ControlContainer,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return FormArrayName; })\n};\n/**\n * \\@whatItDoes Syncs a nested {\\@link FormArray} to a DOM element.\n *\n * \\@howToUse\n *\n * This directive is designed to be used with a parent {\\@link FormGroupDirective} (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested {\\@link FormArray} you want to link, and\n * will look for a {\\@link FormArray} registered with that name in the parent\n * {\\@link FormGroup} instance you passed into {\\@link FormGroupDirective}.\n *\n * Nested form arrays can come in handy when you have a group of form controls but\n * you're not sure how many there will be. Form arrays allow you to create new\n * form controls dynamically.\n *\n * **Access the array**: You can access the associated {\\@link FormArray} using the\n * {\\@link AbstractControl#get} method on the parent {\\@link FormGroup}.\n * Ex: `this.form.get('cities')`.\n *\n * **Get the value**: the `value` property is always synced and available on the\n * {\\@link FormArray}. See a full list of available properties in {\\@link AbstractControl}.\n *\n * **Set the value**: You can set an initial value for each child control when instantiating\n * the {\\@link FormArray}, or you can set the value programmatically later using the\n * {\\@link FormArray}'s {\\@link AbstractControl#setValue} or {\\@link AbstractControl#patchValue}\n * methods.\n *\n * **Listen to value**: If you want to listen to changes in the value of the array, you can\n * subscribe to the {\\@link FormArray}'s {\\@link AbstractControl#valueChanges} event.  You can also\n * listen to its {\\@link AbstractControl#statusChanges} event to be notified when the validation\n * status is re-calculated.\n *\n * **Add new controls**: You can add new controls to the {\\@link FormArray} dynamically by\n * calling its {\\@link FormArray#push} method.\n *  Ex: `this.form.get('cities').push(new FormControl());`\n *\n * ### Example\n *\n * {\\@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `ReactiveFormsModule`\n *\n * \\@stable\n */\nvar FormArrayName = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](FormArrayName, _super);\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     */\n    function FormArrayName(parent, validators, asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this._parent = parent;\n        _this._validators = validators;\n        _this._asyncValidators = asyncValidators;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    FormArrayName.prototype.ngOnInit = function () {\n        this._checkParentType(); /** @type {?} */\n        ((this.formDirective)).addFormArray(this);\n    };\n    /**\n     * @return {?}\n     */\n    FormArrayName.prototype.ngOnDestroy = function () {\n        if (this.formDirective) {\n            this.formDirective.removeFormArray(this);\n        }\n    };\n    Object.defineProperty(FormArrayName.prototype, \"control\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return ((this.formDirective)).getFormArray(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormArrayName.prototype, \"formDirective\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._parent ? (this._parent.formDirective) : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormArrayName.prototype, \"path\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return controlPath(this.name, this._parent); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormArrayName.prototype, \"validator\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return composeValidators(this._validators); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormArrayName.prototype, \"asyncValidator\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return composeAsyncValidators(this._asyncValidators);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    FormArrayName.prototype._checkParentType = function () {\n        if (_hasInvalidParent(this._parent)) {\n            ReactiveErrors.arrayParentException();\n        }\n    };\n    return FormArrayName;\n}(ControlContainer));\nFormArrayName.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] },] },\n];\n/**\n * @nocollapse\n */\nFormArrayName.ctorParameters = function () { return [\n    { type: ControlContainer, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Host\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"SkipSelf\"] },] },\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_VALIDATORS,] },] },\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },\n]; };\nFormArrayName.propDecorators = {\n    'name': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['formArrayName',] },],\n};\n/**\n * @param {?} parent\n * @return {?}\n */\nfunction _hasInvalidParent(parent) {\n    return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n        !(parent instanceof FormArrayName);\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar controlNameBinding = {\n    provide: NgControl,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return FormControlName; })\n};\n/**\n * \\@whatItDoes Syncs a {\\@link FormControl} in an existing {\\@link FormGroup} to a form control\n * element by name.\n *\n * In other words, this directive ensures that any values written to the {\\@link FormControl}\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\n * any values written to the DOM element through user input will be reflected in the\n * {\\@link FormControl} instance (view -> model).\n *\n * \\@howToUse\n *\n * This directive is designed to be used with a parent {\\@link FormGroupDirective} (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the {\\@link FormControl} instance you want to\n * link, and will look for a {\\@link FormControl} registered with that name in the\n * closest {\\@link FormGroup} or {\\@link FormArray} above it.\n *\n * **Access the control**: You can access the {\\@link FormControl} associated with\n * this directive by using the {\\@link AbstractControl#get} method.\n * Ex: `this.form.get('first');`\n *\n * **Get value**: the `value` property is always synced and available on the {\\@link FormControl}.\n * See a full list of available properties in {\\@link AbstractControl}.\n *\n *  **Set value**: You can set an initial value for the control when instantiating the\n *  {\\@link FormControl}, or you can set it programmatically later using\n *  {\\@link AbstractControl#setValue} or {\\@link AbstractControl#patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the control, you can\n * subscribe to the {\\@link AbstractControl#valueChanges} event.  You can also listen to\n * {\\@link AbstractControl#statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * In this example, we create form controls for first name and last name.\n *\n * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * To see `formControlName` examples with different form control types, see:\n *\n * * Radio buttons: {\\@link RadioControlValueAccessor}\n * * Selects: {\\@link SelectControlValueAccessor}\n *\n * **npm package**: `\\@angular/forms`\n *\n * **NgModule**: {\\@link ReactiveFormsModule}\n *\n *  \\@stable\n */\nvar FormControlName = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](FormControlName, _super);\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     * @param {?} valueAccessors\n     */\n    function FormControlName(parent, validators, asyncValidators, valueAccessors) {\n        var _this = _super.call(this) || this;\n        _this._added = false;\n        _this.update = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"EventEmitter\"]();\n        _this._parent = parent;\n        _this._rawValidators = validators || [];\n        _this._rawAsyncValidators = asyncValidators || [];\n        _this.valueAccessor = selectValueAccessor(_this, valueAccessors);\n        return _this;\n    }\n    Object.defineProperty(FormControlName.prototype, \"isDisabled\", {\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FormControlName.prototype.ngOnChanges = function (changes) {\n        if (!this._added)\n            this._setUpControl();\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            this.viewModel = this.model;\n            this.formDirective.updateModel(this, this.model);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    FormControlName.prototype.ngOnDestroy = function () {\n        if (this.formDirective) {\n            this.formDirective.removeControl(this);\n        }\n    };\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    FormControlName.prototype.viewToModelUpdate = function (newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    };\n    Object.defineProperty(FormControlName.prototype, \"path\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return controlPath(this.name, /** @type {?} */ ((this._parent))); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlName.prototype, \"formDirective\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._parent ? this._parent.formDirective : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlName.prototype, \"validator\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return composeValidators(this._rawValidators); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlName.prototype, \"asyncValidator\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return ((composeAsyncValidators(this._rawAsyncValidators)));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlName.prototype, \"control\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._control; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    FormControlName.prototype._checkParentType = function () {\n        if (!(this._parent instanceof FormGroupName) &&\n            this._parent instanceof AbstractFormGroupDirective) {\n            ReactiveErrors.ngModelGroupException();\n        }\n        else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\n            !(this._parent instanceof FormArrayName)) {\n            ReactiveErrors.controlParentException();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    FormControlName.prototype._setUpControl = function () {\n        this._checkParentType();\n        this._control = this.formDirective.addControl(this);\n        if (this.control.disabled && ((this.valueAccessor)).setDisabledState) {\n            ((((this.valueAccessor)).setDisabledState))(true);\n        }\n        this._added = true;\n    };\n    return FormControlName;\n}(NgControl));\nFormControlName.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{ selector: '[formControlName]', providers: [controlNameBinding] },] },\n];\n/**\n * @nocollapse\n */\nFormControlName.ctorParameters = function () { return [\n    { type: ControlContainer, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Host\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"SkipSelf\"] },] },\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_VALIDATORS,] },] },\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_VALUE_ACCESSOR,] },] },\n]; };\nFormControlName.propDecorators = {\n    'name': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['formControlName',] },],\n    'model': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['ngModel',] },],\n    'update': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Output\"], args: ['ngModelChange',] },],\n    'isDisabled': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['disabled',] },],\n};\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return RequiredValidator; }),\n    multi: true\n};\nvar CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return CheckboxRequiredValidator; }),\n    multi: true\n};\n/**\n * A Directive that adds the `required` validator to any controls marked with the\n * `required` attribute, via the {\\@link NG_VALIDATORS} binding.\n *\n * ### Example\n *\n * ```\n * <input name=\"fullName\" ngModel required>\n * ```\n *\n * \\@stable\n */\nvar RequiredValidator = (function () {\n    function RequiredValidator() {\n    }\n    Object.defineProperty(RequiredValidator.prototype, \"required\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._required; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._required = value != null && value !== false && \"\" + value !== 'false';\n            if (this._onChange)\n                this._onChange();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    RequiredValidator.prototype.validate = function (c) {\n        return this.required ? Validators.required(c) : null;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    RequiredValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n    return RequiredValidator;\n}());\nRequiredValidator.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{\n                selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',\n                providers: [REQUIRED_VALIDATOR],\n                host: { '[attr.required]': 'required ? \"\" : null' }\n            },] },\n];\n/**\n * @nocollapse\n */\nRequiredValidator.ctorParameters = function () { return []; };\nRequiredValidator.propDecorators = {\n    'required': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],\n};\n/**\n * A Directive that adds the `required` validator to checkbox controls marked with the\n * `required` attribute, via the {\\@link NG_VALIDATORS} binding.\n *\n * ### Example\n *\n * ```\n * <input type=\"checkbox\" name=\"active\" ngModel required>\n * ```\n *\n * \\@experimental\n */\nvar CheckboxRequiredValidator = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](CheckboxRequiredValidator, _super);\n    function CheckboxRequiredValidator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    CheckboxRequiredValidator.prototype.validate = function (c) {\n        return this.required ? Validators.requiredTrue(c) : null;\n    };\n    return CheckboxRequiredValidator;\n}(RequiredValidator));\nCheckboxRequiredValidator.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{\n                selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',\n                providers: [CHECKBOX_REQUIRED_VALIDATOR],\n                host: { '[attr.required]': 'required ? \"\" : null' }\n            },] },\n];\n/**\n * @nocollapse\n */\nCheckboxRequiredValidator.ctorParameters = function () { return []; };\n/**\n * Provider which adds {\\@link EmailValidator} to {\\@link NG_VALIDATORS}.\n */\nvar EMAIL_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return EmailValidator; }),\n    multi: true\n};\n/**\n * A Directive that adds the `email` validator to controls marked with the\n * `email` attribute, via the {\\@link NG_VALIDATORS} binding.\n *\n * ### Example\n *\n * ```\n * <input type=\"email\" name=\"email\" ngModel email>\n * <input type=\"email\" name=\"email\" ngModel email=\"true\">\n * <input type=\"email\" name=\"email\" ngModel [email]=\"true\">\n * ```\n *\n * \\@experimental\n */\nvar EmailValidator = (function () {\n    function EmailValidator() {\n    }\n    Object.defineProperty(EmailValidator.prototype, \"email\", {\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._enabled = value === '' || value === true || value === 'true';\n            if (this._onChange)\n                this._onChange();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    EmailValidator.prototype.validate = function (c) {\n        return this._enabled ? Validators.email(c) : null;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    EmailValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n    return EmailValidator;\n}());\nEmailValidator.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{\n                selector: '[email][formControlName],[email][formControl],[email][ngModel]',\n                providers: [EMAIL_VALIDATOR]\n            },] },\n];\n/**\n * @nocollapse\n */\nEmailValidator.ctorParameters = function () { return []; };\nEmailValidator.propDecorators = {\n    'email': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],\n};\n/**\n * Provider which adds {\\@link MinLengthValidator} to {\\@link NG_VALIDATORS}.\n *\n * ## Example:\n *\n * {\\@example common/forms/ts/validators/validators.ts region='min'}\n */\nvar MIN_LENGTH_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return MinLengthValidator; }),\n    multi: true\n};\n/**\n * A directive which installs the {\\@link MinLengthValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `minlength` attribute.\n *\n * \\@stable\n */\nvar MinLengthValidator = (function () {\n    function MinLengthValidator() {\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MinLengthValidator.prototype.ngOnChanges = function (changes) {\n        if ('minlength' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    };\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    MinLengthValidator.prototype.validate = function (c) {\n        return this.minlength == null ? null : this._validator(c);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MinLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n    /**\n     * @return {?}\n     */\n    MinLengthValidator.prototype._createValidator = function () {\n        this._validator = Validators.minLength(parseInt(this.minlength, 10));\n    };\n    return MinLengthValidator;\n}());\nMinLengthValidator.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{\n                selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n                providers: [MIN_LENGTH_VALIDATOR],\n                host: { '[attr.minlength]': 'minlength ? minlength : null' }\n            },] },\n];\n/**\n * @nocollapse\n */\nMinLengthValidator.ctorParameters = function () { return []; };\nMinLengthValidator.propDecorators = {\n    'minlength': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],\n};\n/**\n * Provider which adds {\\@link MaxLengthValidator} to {\\@link NG_VALIDATORS}.\n *\n * ## Example:\n *\n * {\\@example common/forms/ts/validators/validators.ts region='max'}\n */\nvar MAX_LENGTH_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return MaxLengthValidator; }),\n    multi: true\n};\n/**\n * A directive which installs the {\\@link MaxLengthValidator} for any `formControlName,\n * `formControl`,\n * or control with `ngModel` that also has a `maxlength` attribute.\n *\n * \\@stable\n */\nvar MaxLengthValidator = (function () {\n    function MaxLengthValidator() {\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MaxLengthValidator.prototype.ngOnChanges = function (changes) {\n        if ('maxlength' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    };\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    MaxLengthValidator.prototype.validate = function (c) {\n        return this.maxlength != null ? this._validator(c) : null;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MaxLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n    /**\n     * @return {?}\n     */\n    MaxLengthValidator.prototype._createValidator = function () {\n        this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\n    };\n    return MaxLengthValidator;\n}());\nMaxLengthValidator.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{\n                selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n                providers: [MAX_LENGTH_VALIDATOR],\n                host: { '[attr.maxlength]': 'maxlength ? maxlength : null' }\n            },] },\n];\n/**\n * @nocollapse\n */\nMaxLengthValidator.ctorParameters = function () { return []; };\nMaxLengthValidator.propDecorators = {\n    'maxlength': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],\n};\nvar PATTERN_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return PatternValidator; }),\n    multi: true\n};\n/**\n * A Directive that adds the `pattern` validator to any controls marked with the\n * `pattern` attribute, via the {\\@link NG_VALIDATORS} binding. Uses attribute value\n * as the regex to validate Control value against.  Follows pattern attribute\n * semantics; i.e. regex must match entire Control value.\n *\n * ### Example\n *\n * ```\n * <input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel>\n * ```\n * \\@stable\n */\nvar PatternValidator = (function () {\n    function PatternValidator() {\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    PatternValidator.prototype.ngOnChanges = function (changes) {\n        if ('pattern' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    };\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    PatternValidator.prototype.validate = function (c) { return this._validator(c); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    PatternValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n    /**\n     * @return {?}\n     */\n    PatternValidator.prototype._createValidator = function () { this._validator = Validators.pattern(this.pattern); };\n    return PatternValidator;\n}());\nPatternValidator.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{\n                selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n                providers: [PATTERN_VALIDATOR],\n                host: { '[attr.pattern]': 'pattern ? pattern : null' }\n            },] },\n];\n/**\n * @nocollapse\n */\nPatternValidator.ctorParameters = function () { return []; };\nPatternValidator.propDecorators = {\n    'pattern': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],\n};\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@whatItDoes Creates an {\\@link AbstractControl} from a user-specified configuration.\n *\n * It is essentially syntactic sugar that shortens the `new FormGroup()`,\n * `new FormControl()`, and `new FormArray()` boilerplate that can build up in larger\n * forms.\n *\n * \\@howToUse\n *\n * To use, inject `FormBuilder` into your component class. You can then call its methods\n * directly.\n *\n * {\\@example forms/ts/formBuilder/form_builder_example.ts region='Component'}\n *\n *  * **npm package**: `\\@angular/forms`\n *\n *  * **NgModule**: {\\@link ReactiveFormsModule}\n *\n * \\@stable\n */\nvar FormBuilder = (function () {\n    function FormBuilder() {\n    }\n    /**\n     * Construct a new {\\@link FormGroup} with the given map of configuration.\n     * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\n     *\n     * See the {\\@link FormGroup} constructor for more details.\n     * @param {?} controlsConfig\n     * @param {?=} extra\n     * @return {?}\n     */\n    FormBuilder.prototype.group = function (controlsConfig, extra) {\n        if (extra === void 0) { extra = null; }\n        var /** @type {?} */ controls = this._reduceControls(controlsConfig);\n        var /** @type {?} */ validator = extra != null ? extra['validator'] : null;\n        var /** @type {?} */ asyncValidator = extra != null ? extra['asyncValidator'] : null;\n        return new FormGroup(controls, validator, asyncValidator);\n    };\n    /**\n     * Construct a new {\\@link FormControl} with the given `formState`,`validator`, and\n     * `asyncValidator`.\n     *\n     * `formState` can either be a standalone value for the form control or an object\n     * that contains both a value and a disabled status.\n     *\n     * @param {?} formState\n     * @param {?=} validator\n     * @param {?=} asyncValidator\n     * @return {?}\n     */\n    FormBuilder.prototype.control = function (formState, validator, asyncValidator) {\n        return new FormControl(formState, validator, asyncValidator);\n    };\n    /**\n     * Construct a {\\@link FormArray} from the given `controlsConfig` array of\n     * configuration, with the given optional `validator` and `asyncValidator`.\n     * @param {?} controlsConfig\n     * @param {?=} validator\n     * @param {?=} asyncValidator\n     * @return {?}\n     */\n    FormBuilder.prototype.array = function (controlsConfig, validator, asyncValidator) {\n        var _this = this;\n        var /** @type {?} */ controls = controlsConfig.map(function (c) { return _this._createControl(c); });\n        return new FormArray(controls, validator, asyncValidator);\n    };\n    /**\n     * \\@internal\n     * @param {?} controlsConfig\n     * @return {?}\n     */\n    FormBuilder.prototype._reduceControls = function (controlsConfig) {\n        var _this = this;\n        var /** @type {?} */ controls = {};\n        Object.keys(controlsConfig).forEach(function (controlName) {\n            controls[controlName] = _this._createControl(controlsConfig[controlName]);\n        });\n        return controls;\n    };\n    /**\n     * \\@internal\n     * @param {?} controlConfig\n     * @return {?}\n     */\n    FormBuilder.prototype._createControl = function (controlConfig) {\n        if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n            controlConfig instanceof FormArray) {\n            return controlConfig;\n        }\n        else if (Array.isArray(controlConfig)) {\n            var /** @type {?} */ value = controlConfig[0];\n            var /** @type {?} */ validator = controlConfig.length > 1 ? controlConfig[1] : null;\n            var /** @type {?} */ asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;\n            return this.control(value, validator, asyncValidator);\n        }\n        else {\n            return this.control(controlConfig);\n        }\n    };\n    return FormBuilder;\n}());\nFormBuilder.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nFormBuilder.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n/**\n * \\@stable\n */\nvar VERSION = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Version\"]('4.3.5');\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@whatItDoes Adds `novalidate` attribute to all forms by default.\n *\n * `novalidate` is used to disable browser's native form validation.\n *\n * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:\n *\n * ```\n * <form ngNativeValidate><\/form>\n * ```\n *\n * \\@experimental\n */\nvar NgNoValidate = (function () {\n    function NgNoValidate() {\n    }\n    return NgNoValidate;\n}());\nNgNoValidate.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{\n                selector: 'form:not([ngNoForm]):not([ngNativeValidate])',\n                host: { 'novalidate': '' },\n            },] },\n];\n/**\n * @nocollapse\n */\nNgNoValidate.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar SHARED_FORM_DIRECTIVES = [\n    NgNoValidate,\n    NgSelectOption,\n    NgSelectMultipleOption,\n    DefaultValueAccessor,\n    NumberValueAccessor,\n    RangeValueAccessor,\n    CheckboxControlValueAccessor,\n    SelectControlValueAccessor,\n    SelectMultipleControlValueAccessor,\n    RadioControlValueAccessor,\n    NgControlStatus,\n    NgControlStatusGroup,\n    RequiredValidator,\n    MinLengthValidator,\n    MaxLengthValidator,\n    PatternValidator,\n    CheckboxRequiredValidator,\n    EmailValidator,\n];\nvar TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];\nvar REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n/**\n * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n */\nvar InternalFormsSharedModule = (function () {\n    function InternalFormsSharedModule() {\n    }\n    return InternalFormsSharedModule;\n}());\nInternalFormsSharedModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"NgModule\"], args: [{\n                declarations: SHARED_FORM_DIRECTIVES,\n                exports: SHARED_FORM_DIRECTIVES,\n            },] },\n];\n/**\n * @nocollapse\n */\nInternalFormsSharedModule.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The ng module for forms.\n * \\@stable\n */\nvar FormsModule = (function () {\n    function FormsModule() {\n    }\n    return FormsModule;\n}());\nFormsModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"NgModule\"], args: [{\n                declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n                providers: [RadioControlRegistry],\n                exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n            },] },\n];\n/**\n * @nocollapse\n */\nFormsModule.ctorParameters = function () { return []; };\n/**\n * The ng module for reactive forms.\n * \\@stable\n */\nvar ReactiveFormsModule = (function () {\n    function ReactiveFormsModule() {\n    }\n    return ReactiveFormsModule;\n}());\nReactiveFormsModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"NgModule\"], args: [{\n                declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n                providers: [FormBuilder, RadioControlRegistry],\n                exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n            },] },\n];\n/**\n * @nocollapse\n */\nReactiveFormsModule.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * This module is used for handling user input, by defining and building a {@link FormGroup} that\n * consists of {@link FormControl} objects, and mapping them onto the DOM. {@link FormControl}\n * objects can then be used to read information from the form DOM elements.\n *\n * Forms providers are not included in default providers; you must import these providers\n * explicitly.\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the forms package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n/**\n * Generated bundle index. Do not edit.\n */\n\n//# sourceMappingURL=forms.es5.js.map\n\n\n/***/ }),\n\n/***/ \"../../../http/@angular/http.es5.js\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return BrowserXhr; });\n/* unused harmony export JSONPBackend */\n/* unused harmony export JSONPConnection */\n/* unused harmony export CookieXSRFStrategy */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return XHRBackend; });\n/* unused harmony export XHRConnection */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return BaseRequestOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return RequestOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return BaseResponseOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return ResponseOptions; });\n/* unused harmony export ReadyState */\n/* unused harmony export RequestMethod */\n/* unused harmony export ResponseContentType */\n/* unused harmony export ResponseType */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return Headers; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return Http; });\n/* unused harmony export Jsonp */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return HttpModule; });\n/* unused harmony export JsonpModule */\n/* unused harmony export Connection */\n/* unused harmony export ConnectionBackend */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return XSRFStrategy; });\n/* unused harmony export Request */\n/* unused harmony export Response */\n/* unused harmony export QueryEncoder */\n/* unused harmony export URLSearchParams */\n/* unused harmony export VERSION */\n/* unused harmony export ɵg */\n/* unused harmony export ɵa */\n/* unused harmony export ɵf */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"k\", function() { return _createDefaultCookieXSRFStrategy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"l\", function() { return httpFactory; });\n/* unused harmony export ɵd */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(\"../../../../tslib/tslib.es6.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_core__ = __webpack_require__(\"../../../core/@angular/core.es5.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__ = __webpack_require__(\"../../../../rxjs/Observable.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_platform_browser__ = __webpack_require__(\"../../../platform-browser/@angular/platform-browser.es5.js\");\n\n/**\n * @license Angular v4.3.5\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n *\n * Take care not to evaluate this in non-browser contexts.\n *\n * \\@experimental\n */\nvar BrowserXhr = (function () {\n    function BrowserXhr() {\n    }\n    /**\n     * @return {?}\n     */\n    BrowserXhr.prototype.build = function () { return ((new XMLHttpRequest())); };\n    return BrowserXhr;\n}());\nBrowserXhr.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nBrowserXhr.ctorParameters = function () { return []; };\nvar RequestMethod = {};\nRequestMethod.Get = 0;\nRequestMethod.Post = 1;\nRequestMethod.Put = 2;\nRequestMethod.Delete = 3;\nRequestMethod.Options = 4;\nRequestMethod.Head = 5;\nRequestMethod.Patch = 6;\nRequestMethod[RequestMethod.Get] = \"Get\";\nRequestMethod[RequestMethod.Post] = \"Post\";\nRequestMethod[RequestMethod.Put] = \"Put\";\nRequestMethod[RequestMethod.Delete] = \"Delete\";\nRequestMethod[RequestMethod.Options] = \"Options\";\nRequestMethod[RequestMethod.Head] = \"Head\";\nRequestMethod[RequestMethod.Patch] = \"Patch\";\nvar ReadyState = {};\nReadyState.Unsent = 0;\nReadyState.Open = 1;\nReadyState.HeadersReceived = 2;\nReadyState.Loading = 3;\nReadyState.Done = 4;\nReadyState.Cancelled = 5;\nReadyState[ReadyState.Unsent] = \"Unsent\";\nReadyState[ReadyState.Open] = \"Open\";\nReadyState[ReadyState.HeadersReceived] = \"HeadersReceived\";\nReadyState[ReadyState.Loading] = \"Loading\";\nReadyState[ReadyState.Done] = \"Done\";\nReadyState[ReadyState.Cancelled] = \"Cancelled\";\nvar ResponseType = {};\nResponseType.Basic = 0;\nResponseType.Cors = 1;\nResponseType.Default = 2;\nResponseType.Error = 3;\nResponseType.Opaque = 4;\nResponseType[ResponseType.Basic] = \"Basic\";\nResponseType[ResponseType.Cors] = \"Cors\";\nResponseType[ResponseType.Default] = \"Default\";\nResponseType[ResponseType.Error] = \"Error\";\nResponseType[ResponseType.Opaque] = \"Opaque\";\nvar ContentType = {};\nContentType.NONE = 0;\nContentType.JSON = 1;\nContentType.FORM = 2;\nContentType.FORM_DATA = 3;\nContentType.TEXT = 4;\nContentType.BLOB = 5;\nContentType.ARRAY_BUFFER = 6;\nContentType[ContentType.NONE] = \"NONE\";\nContentType[ContentType.JSON] = \"JSON\";\nContentType[ContentType.FORM] = \"FORM\";\nContentType[ContentType.FORM_DATA] = \"FORM_DATA\";\nContentType[ContentType.TEXT] = \"TEXT\";\nContentType[ContentType.BLOB] = \"BLOB\";\nContentType[ContentType.ARRAY_BUFFER] = \"ARRAY_BUFFER\";\nvar ResponseContentType = {};\nResponseContentType.Text = 0;\nResponseContentType.Json = 1;\nResponseContentType.ArrayBuffer = 2;\nResponseContentType.Blob = 3;\nResponseContentType[ResponseContentType.Text] = \"Text\";\nResponseContentType[ResponseContentType.Json] = \"Json\";\nResponseContentType[ResponseContentType.ArrayBuffer] = \"ArrayBuffer\";\nResponseContentType[ResponseContentType.Blob] = \"Blob\";\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * ### Example\n *\n * ```\n * import {Headers} from '\\@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * \\@experimental\n */\nvar Headers = (function () {\n    /**\n     * @param {?=} headers\n     */\n    function Headers(headers) {\n        var _this = this;\n        /**\n         * \\@internal header names are lower case\n         */\n        this._headers = new Map();\n        /**\n         * \\@internal map lower case names to actual names\n         */\n        this._normalizedNames = new Map();\n        if (!headers) {\n            return;\n        }\n        if (headers instanceof Headers) {\n            headers.forEach(function (values, name) {\n                values.forEach(function (value) { return _this.append(name, value); });\n            });\n            return;\n        }\n        Object.keys(headers).forEach(function (name) {\n            var values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n            _this.delete(name);\n            values.forEach(function (value) { return _this.append(name, value); });\n        });\n    }\n    /**\n     * Returns a new Headers instance from the given DOMString of Response Headers\n     * @param {?} headersString\n     * @return {?}\n     */\n    Headers.fromResponseHeaderString = function (headersString) {\n        var /** @type {?} */ headers = new Headers();\n        headersString.split('\\n').forEach(function (line) {\n            var /** @type {?} */ index = line.indexOf(':');\n            if (index > 0) {\n                var /** @type {?} */ name = line.slice(0, index);\n                var /** @type {?} */ value = line.slice(index + 1).trim();\n                headers.set(name, value);\n            }\n        });\n        return headers;\n    };\n    /**\n     * Appends a header to existing list of header values for a given header name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    Headers.prototype.append = function (name, value) {\n        var /** @type {?} */ values = this.getAll(name);\n        if (values === null) {\n            this.set(name, value);\n        }\n        else {\n            values.push(value);\n        }\n    };\n    /**\n     * Deletes all header values for the given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.delete = function (name) {\n        var /** @type {?} */ lcName = name.toLowerCase();\n        this._normalizedNames.delete(lcName);\n        this._headers.delete(lcName);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    Headers.prototype.forEach = function (fn) {\n        var _this = this;\n        this._headers.forEach(function (values, lcName) { return fn(values, _this._normalizedNames.get(lcName), _this._headers); });\n    };\n    /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.get = function (name) {\n        var /** @type {?} */ values = this.getAll(name);\n        if (values === null) {\n            return null;\n        }\n        return values.length > 0 ? values[0] : null;\n    };\n    /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.has = function (name) { return this._headers.has(name.toLowerCase()); };\n    /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    Headers.prototype.keys = function () { return Array.from(this._normalizedNames.values()); };\n    /**\n     * Sets or overrides header value for given name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    Headers.prototype.set = function (name, value) {\n        if (Array.isArray(value)) {\n            if (value.length) {\n                this._headers.set(name.toLowerCase(), [value.join(',')]);\n            }\n        }\n        else {\n            this._headers.set(name.toLowerCase(), [value]);\n        }\n        this.mayBeSetNormalizedName(name);\n    };\n    /**\n     * Returns values of all headers.\n     * @return {?}\n     */\n    Headers.prototype.values = function () { return Array.from(this._headers.values()); };\n    /**\n     * @return {?}\n     */\n    Headers.prototype.toJSON = function () {\n        var _this = this;\n        var /** @type {?} */ serialized = {};\n        this._headers.forEach(function (values, name) {\n            var /** @type {?} */ split = [];\n            values.forEach(function (v) { return split.push.apply(split, v.split(',')); });\n            serialized[((_this._normalizedNames.get(name)))] = split;\n        });\n        return serialized;\n    };\n    /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.getAll = function (name) {\n        return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n    };\n    /**\n     * This method is not implemented.\n     * @return {?}\n     */\n    Headers.prototype.entries = function () { throw new Error('\"entries\" method is not implemented on Headers class'); };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.mayBeSetNormalizedName = function (name) {\n        var /** @type {?} */ lcName = name.toLowerCase();\n        if (!this._normalizedNames.has(lcName)) {\n            this._normalizedNames.set(lcName, name);\n        }\n    };\n    return Headers;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {\\@link Response}.\n *\n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n *\n * All values are null by default. Typical defaults can be found in the\n * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n *\n * This class may be used in tests to build {\\@link Response Responses} for\n * mock responses (see {\\@link MockBackend}).\n *\n * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))\n *\n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n *\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n *\n * \\@experimental\n */\nvar ResponseOptions = (function () {\n    /**\n     * @param {?=} opts\n     */\n    function ResponseOptions(opts) {\n        if (opts === void 0) { opts = {}; }\n        var body = opts.body, status = opts.status, headers = opts.headers, statusText = opts.statusText, type = opts.type, url = opts.url;\n        this.body = body != null ? body : null;\n        this.status = status != null ? status : null;\n        this.headers = headers != null ? headers : null;\n        this.statusText = statusText != null ? statusText : null;\n        this.type = type != null ? type : null;\n        this.url = url != null ? url : null;\n    }\n    /**\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n     * override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\n     * where certain properties may change from test to test.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '\\@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: {name: 'Jeff'}\n     * });\n     * var res = new Response(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('options.url:', options.url); // null\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * console.log('res.url:', res.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    ResponseOptions.prototype.merge = function (options) {\n        return new ResponseOptions({\n            body: options && options.body != null ? options.body : this.body,\n            status: options && options.status != null ? options.status : this.status,\n            headers: options && options.headers != null ? options.headers : this.headers,\n            statusText: options && options.statusText != null ? options.statusText : this.statusText,\n            type: options && options.type != null ? options.type : this.type,\n            url: options && options.url != null ? options.url : this.url,\n        });\n    };\n    return ResponseOptions;\n}());\n/**\n * Subclass of {\\@link ResponseOptions}, with default values.\n *\n * Default values:\n *  * status: 200\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link ResponseOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create {\\@link Response Responses}.\n *\n * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))\n *\n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '\\@angular/http';\n * import {App} from './myapp';\n *\n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Response}\n * object.\n *\n * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))\n *\n * ```\n * import {BaseResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n *\n * \\@experimental\n */\nvar BaseResponseOptions = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](BaseResponseOptions, _super);\n    function BaseResponseOptions() {\n        return _super.call(this, { status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers() }) || this;\n    }\n    return BaseResponseOptions;\n}(ResponseOptions));\nBaseResponseOptions.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nBaseResponseOptions.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Abstract class from which real backends are derived.\n *\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {\\@link Request}.\n *\n * \\@experimental\n * @abstract\n */\nvar ConnectionBackend = (function () {\n    function ConnectionBackend() {\n    }\n    /**\n     * @abstract\n     * @param {?} request\n     * @return {?}\n     */\n    ConnectionBackend.prototype.createConnection = function (request) { };\n    return ConnectionBackend;\n}());\n/**\n * Abstract class from which real connections are derived.\n *\n * \\@experimental\n * @abstract\n */\nvar Connection = (function () {\n    function Connection() {\n    }\n    return Connection;\n}());\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n *\n * \\@experimental\n * @abstract\n */\nvar XSRFStrategy = (function () {\n    function XSRFStrategy() {\n    }\n    /**\n     * @abstract\n     * @param {?} req\n     * @return {?}\n     */\n    XSRFStrategy.prototype.configureRequest = function (req) { };\n    return XSRFStrategy;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} method\n * @return {?}\n */\nfunction normalizeMethodName(method) {\n    if (typeof method !== 'string')\n        return method;\n    switch (method.toUpperCase()) {\n        case 'GET':\n            return RequestMethod.Get;\n        case 'POST':\n            return RequestMethod.Post;\n        case 'PUT':\n            return RequestMethod.Put;\n        case 'DELETE':\n            return RequestMethod.Delete;\n        case 'OPTIONS':\n            return RequestMethod.Options;\n        case 'HEAD':\n            return RequestMethod.Head;\n        case 'PATCH':\n            return RequestMethod.Patch;\n    }\n    throw new Error(\"Invalid request method. The method \\\"\" + method + \"\\\" is not supported.\");\n}\nvar isSuccess = function (status) { return (status >= 200 && status < 300); };\n/**\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseURL(xhr) {\n    if ('responseURL' in xhr) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * @param {?} input\n * @return {?}\n */\n/**\n * @param {?} input\n * @return {?}\n */\nfunction stringToArrayBuffer(input) {\n    var /** @type {?} */ view = new Uint16Array(input.length);\n    for (var /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {\n        view[i] = input.charCodeAt(i);\n    }\n    return view.buffer;\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @param {?=} rawParams\n * @return {?}\n */\nfunction paramParser(rawParams) {\n    if (rawParams === void 0) { rawParams = ''; }\n    var /** @type {?} */ map = new Map();\n    if (rawParams.length > 0) {\n        var /** @type {?} */ params = rawParams.split('&');\n        params.forEach(function (param) {\n            var /** @type {?} */ eqIdx = param.indexOf('=');\n            var _a = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)], key = _a[0], val = _a[1];\n            var /** @type {?} */ list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * \\@experimental\n *\n */\nvar QueryEncoder = (function () {\n    function QueryEncoder() {\n    }\n    /**\n     * @param {?} k\n     * @return {?}\n     */\n    QueryEncoder.prototype.encodeKey = function (k) { return standardEncoding(k); };\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    QueryEncoder.prototype.encodeValue = function (v) { return standardEncoding(v); };\n    return QueryEncoder;\n}());\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n *\n * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n *\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n *\n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n *\n * ```\n * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n *\n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n *\n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * \\@experimental\n */\nvar URLSearchParams = (function () {\n    /**\n     * @param {?=} rawParams\n     * @param {?=} queryEncoder\n     */\n    function URLSearchParams(rawParams, queryEncoder) {\n        if (rawParams === void 0) { rawParams = ''; }\n        if (queryEncoder === void 0) { queryEncoder = new QueryEncoder(); }\n        this.rawParams = rawParams;\n        this.queryEncoder = queryEncoder;\n        this.paramsMap = paramParser(rawParams);\n    }\n    /**\n     * @return {?}\n     */\n    URLSearchParams.prototype.clone = function () {\n        var /** @type {?} */ clone = new URLSearchParams('', this.queryEncoder);\n        clone.appendAll(this);\n        return clone;\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.has = function (param) { return this.paramsMap.has(param); };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.get = function (param) {\n        var /** @type {?} */ storedParam = this.paramsMap.get(param);\n        return Array.isArray(storedParam) ? storedParam[0] : null;\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.getAll = function (param) { return this.paramsMap.get(param) || []; };\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    URLSearchParams.prototype.set = function (param, val) {\n        if (val === void 0 || val === null) {\n            this.delete(param);\n            return;\n        }\n        var /** @type {?} */ list = this.paramsMap.get(param) || [];\n        list.length = 0;\n        list.push(val);\n        this.paramsMap.set(param, list);\n    };\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.setAll = function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            list.length = 0;\n            list.push(value[0]);\n            _this.paramsMap.set(param, list);\n        });\n    };\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    URLSearchParams.prototype.append = function (param, val) {\n        if (val === void 0 || val === null)\n            return;\n        var /** @type {?} */ list = this.paramsMap.get(param) || [];\n        list.push(val);\n        this.paramsMap.set(param, list);\n    };\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.appendAll = function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            for (var /** @type {?} */ i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            _this.paramsMap.set(param, list);\n        });\n    };\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.replaceAll = function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            list.length = 0;\n            for (var /** @type {?} */ i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            _this.paramsMap.set(param, list);\n        });\n    };\n    /**\n     * @return {?}\n     */\n    URLSearchParams.prototype.toString = function () {\n        var _this = this;\n        var /** @type {?} */ paramsList = [];\n        this.paramsMap.forEach(function (values, k) {\n            values.forEach(function (v) { return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v)); });\n        });\n        return paramsList.join('&');\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.delete = function (param) { this.paramsMap.delete(param); };\n    return URLSearchParams;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * HTTP request body used by both {\\@link Request} and {\\@link Response}\n * https://fetch.spec.whatwg.org/#body\n * @abstract\n */\nvar Body = (function () {\n    function Body() {\n    }\n    /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     * @return {?}\n     */\n    Body.prototype.json = function () {\n        if (typeof this._body === 'string') {\n            return JSON.parse(/** @type {?} */ (this._body));\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return JSON.parse(this.text());\n        }\n        return this._body;\n    };\n    /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     *\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n     * bytes in the buffer will be interpreted. Valid values are:\n     *\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\n     *   considered deprecated.\n     *\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n     * @param {?=} encodingHint\n     * @return {?}\n     */\n    Body.prototype.text = function (encodingHint) {\n        if (encodingHint === void 0) { encodingHint = 'legacy'; }\n        if (this._body instanceof URLSearchParams) {\n            return this._body.toString();\n        }\n        if (this._body instanceof ArrayBuffer) {\n            switch (encodingHint) {\n                case 'legacy':\n                    return String.fromCharCode.apply(null, new Uint16Array(/** @type {?} */ (this._body)));\n                case 'iso-8859':\n                    return String.fromCharCode.apply(null, new Uint8Array(/** @type {?} */ (this._body)));\n                default:\n                    throw new Error(\"Invalid value for encodingHint: \" + encodingHint);\n            }\n        }\n        if (this._body == null) {\n            return '';\n        }\n        if (typeof this._body === 'object') {\n            return JSON.stringify(this._body, null, 2);\n        }\n        return this._body.toString();\n    };\n    /**\n     * Return the body as an ArrayBuffer\n     * @return {?}\n     */\n    Body.prototype.arrayBuffer = function () {\n        if (this._body instanceof ArrayBuffer) {\n            return (this._body);\n        }\n        return stringToArrayBuffer(this.text());\n    };\n    /**\n     * Returns the request's body as a Blob, assuming that body exists.\n     * @return {?}\n     */\n    Body.prototype.blob = function () {\n        if (this._body instanceof Blob) {\n            return (this._body);\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return new Blob([this._body]);\n        }\n        throw new Error('The request body isn\\'t either a blob or an array buffer');\n    };\n    return Body;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates `Response` instances from provided values.\n *\n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n *\n * ### Example\n *\n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n *\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n *\n * \\@experimental\n */\nvar Response = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](Response, _super);\n    /**\n     * @param {?} responseOptions\n     */\n    function Response(responseOptions) {\n        var _this = _super.call(this) || this;\n        _this._body = responseOptions.body;\n        _this.status = responseOptions.status;\n        _this.ok = (_this.status >= 200 && _this.status <= 299);\n        _this.statusText = responseOptions.statusText;\n        _this.headers = responseOptions.headers;\n        _this.type = responseOptions.type;\n        _this.url = responseOptions.url;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    Response.prototype.toString = function () {\n        return \"Response with status: \" + this.status + \" \" + this.statusText + \" for URL: \" + this.url;\n    };\n    return Response;\n}(Body));\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _nextRequestId = 0;\nvar JSONP_HOME = '__ng_jsonp__';\nvar _jsonpConnections = null;\n/**\n * @return {?}\n */\nfunction _getJsonpConnections() {\n    var /** @type {?} */ w = typeof window == 'object' ? window : {};\n    if (_jsonpConnections === null) {\n        _jsonpConnections = w[JSONP_HOME] = {};\n    }\n    return _jsonpConnections;\n}\nvar BrowserJsonp = (function () {\n    function BrowserJsonp() {\n    }\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    BrowserJsonp.prototype.build = function (url) {\n        var /** @type {?} */ node = document.createElement('script');\n        node.src = url;\n        return node;\n    };\n    /**\n     * @return {?}\n     */\n    BrowserJsonp.prototype.nextRequestID = function () { return \"__req\" + _nextRequestId++; };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    BrowserJsonp.prototype.requestCallback = function (id) { return JSONP_HOME + \".\" + id + \".finished\"; };\n    /**\n     * @param {?} id\n     * @param {?} connection\n     * @return {?}\n     */\n    BrowserJsonp.prototype.exposeConnection = function (id, connection) {\n        var /** @type {?} */ connections = _getJsonpConnections();\n        connections[id] = connection;\n    };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    BrowserJsonp.prototype.removeConnection = function (id) {\n        var /** @type {?} */ connections = _getJsonpConnections();\n        connections[id] = null;\n    };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserJsonp.prototype.send = function (node) { document.body.appendChild(/** @type {?} */ ((node))); };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserJsonp.prototype.cleanup = function (node) {\n        if (node.parentNode) {\n            node.parentNode.removeChild(/** @type {?} */ ((node)));\n        }\n    };\n    return BrowserJsonp;\n}());\nBrowserJsonp.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nBrowserJsonp.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Abstract base class for an in-flight JSONP request.\n *\n * \\@experimental\n * @abstract\n */\nvar JSONPConnection = (function () {\n    function JSONPConnection() {\n    }\n    /**\n     * Callback called when the JSONP request completes, to notify the application\n     * of the new data.\n     * @abstract\n     * @param {?=} data\n     * @return {?}\n     */\n    JSONPConnection.prototype.finished = function (data) { };\n    return JSONPConnection;\n}());\nvar JSONPConnection_ = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](JSONPConnection_, _super);\n    /**\n     * @param {?} req\n     * @param {?} _dom\n     * @param {?=} baseResponseOptions\n     */\n    function JSONPConnection_(req, _dom, baseResponseOptions) {\n        var _this = _super.call(this) || this;\n        _this._dom = _dom;\n        _this.baseResponseOptions = baseResponseOptions;\n        _this._finished = false;\n        if (req.method !== RequestMethod.Get) {\n            throw new TypeError(JSONP_ERR_WRONG_METHOD);\n        }\n        _this.request = req;\n        _this.response = new __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__[\"Observable\"](function (responseObserver) {\n            _this.readyState = ReadyState.Loading;\n            var id = _this._id = _dom.nextRequestID();\n            _dom.exposeConnection(id, _this);\n            // Workaround Dart\n            // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n            var callback = _dom.requestCallback(_this._id);\n            var url = req.url;\n            if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n                url = url.replace('=JSONP_CALLBACK&', \"=\" + callback + \"&\");\n            }\n            else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n                url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + (\"=\" + callback);\n            }\n            var script = _this._script = _dom.build(url);\n            var onLoad = function (event) {\n                if (_this.readyState === ReadyState.Cancelled)\n                    return;\n                _this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                if (!_this._finished) {\n                    var responseOptions_1 = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url: url });\n                    if (baseResponseOptions) {\n                        responseOptions_1 = baseResponseOptions.merge(responseOptions_1);\n                    }\n                    responseObserver.error(new Response(responseOptions_1));\n                    return;\n                }\n                var responseOptions = new ResponseOptions({ body: _this._responseData, url: url });\n                if (_this.baseResponseOptions) {\n                    responseOptions = _this.baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.next(new Response(responseOptions));\n                responseObserver.complete();\n            };\n            var onError = function (error) {\n                if (_this.readyState === ReadyState.Cancelled)\n                    return;\n                _this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                var responseOptions = new ResponseOptions({ body: error.message, type: ResponseType.Error });\n                if (baseResponseOptions) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            script.addEventListener('load', onLoad);\n            script.addEventListener('error', onError);\n            _dom.send(script);\n            return function () {\n                _this.readyState = ReadyState.Cancelled;\n                script.removeEventListener('load', onLoad);\n                script.removeEventListener('error', onError);\n                _this._dom.cleanup(script);\n            };\n        });\n        return _this;\n    }\n    /**\n     * @param {?=} data\n     * @return {?}\n     */\n    JSONPConnection_.prototype.finished = function (data) {\n        // Don't leak connections\n        this._finished = true;\n        this._dom.removeConnection(this._id);\n        if (this.readyState === ReadyState.Cancelled)\n            return;\n        this._responseData = data;\n    };\n    return JSONPConnection_;\n}(JSONPConnection));\n/**\n * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n *\n * \\@experimental\n * @abstract\n */\nvar JSONPBackend = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](JSONPBackend, _super);\n    function JSONPBackend() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return JSONPBackend;\n}(ConnectionBackend));\nvar JSONPBackend_ = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](JSONPBackend_, _super);\n    /**\n     * @param {?} _browserJSONP\n     * @param {?} _baseResponseOptions\n     */\n    function JSONPBackend_(_browserJSONP, _baseResponseOptions) {\n        var _this = _super.call(this) || this;\n        _this._browserJSONP = _browserJSONP;\n        _this._baseResponseOptions = _baseResponseOptions;\n        return _this;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    JSONPBackend_.prototype.createConnection = function (request) {\n        return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);\n    };\n    return JSONPBackend_;\n}(JSONPBackend));\nJSONPBackend_.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nJSONPBackend_.ctorParameters = function () { return [\n    { type: BrowserJsonp, },\n    { type: ResponseOptions, },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n *\n * \\@experimental\n */\nvar XHRConnection = (function () {\n    /**\n     * @param {?} req\n     * @param {?} browserXHR\n     * @param {?=} baseResponseOptions\n     */\n    function XHRConnection(req, browserXHR, baseResponseOptions) {\n        var _this = this;\n        this.request = req;\n        this.response = new __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__[\"Observable\"](function (responseObserver) {\n            var _xhr = browserXHR.build();\n            _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n            if (req.withCredentials != null) {\n                _xhr.withCredentials = req.withCredentials;\n            }\n            // load event handler\n            var onLoad = function () {\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                var status = _xhr.status === 1223 ? 204 : _xhr.status;\n                var body = null;\n                // HTTP 204 means no content\n                if (status !== 204) {\n                    // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n                    // response/responseType properties were introduced in ResourceLoader Level2 spec\n                    // (supported by IE10)\n                    body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n                    // Implicitly strip a potential XSSI prefix.\n                    if (typeof body === 'string') {\n                        body = body.replace(XSSI_PREFIX, '');\n                    }\n                }\n                // fix status code when it is 0 (0 status is undocumented).\n                // Occurs when accessing file resources or on Android 4.1 stock browser\n                // while retrieving files from application cache.\n                if (status === 0) {\n                    status = body ? 200 : 0;\n                }\n                var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n                // IE 9 does not provide the way to get URL of response\n                var url = getResponseURL(_xhr) || req.url;\n                var statusText = _xhr.statusText || 'OK';\n                var responseOptions = new ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                var response = new Response(responseOptions);\n                response.ok = isSuccess(status);\n                if (response.ok) {\n                    responseObserver.next(response);\n                    // TODO(gdi2290): defer complete if array buffer until done\n                    responseObserver.complete();\n                    return;\n                }\n                responseObserver.error(response);\n            };\n            // error event handler\n            var onError = function (err) {\n                var responseOptions = new ResponseOptions({\n                    body: err,\n                    type: ResponseType.Error,\n                    status: _xhr.status,\n                    statusText: _xhr.statusText,\n                });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            _this.setDetectedContentType(req, _xhr);\n            if (req.headers == null) {\n                req.headers = new Headers();\n            }\n            if (!req.headers.has('Accept')) {\n                req.headers.append('Accept', 'application/json, text/plain, */*');\n            }\n            req.headers.forEach(function (values, name) { return _xhr.setRequestHeader(name, values.join(',')); });\n            // Select the correct buffer type to store the response\n            if (req.responseType != null && _xhr.responseType != null) {\n                switch (req.responseType) {\n                    case ResponseContentType.ArrayBuffer:\n                        _xhr.responseType = 'arraybuffer';\n                        break;\n                    case ResponseContentType.Json:\n                        _xhr.responseType = 'json';\n                        break;\n                    case ResponseContentType.Text:\n                        _xhr.responseType = 'text';\n                        break;\n                    case ResponseContentType.Blob:\n                        _xhr.responseType = 'blob';\n                        break;\n                    default:\n                        throw new Error('The selected responseType is not supported');\n                }\n            }\n            _xhr.addEventListener('load', onLoad);\n            _xhr.addEventListener('error', onError);\n            _xhr.send(_this.request.getBody());\n            return function () {\n                _xhr.removeEventListener('load', onLoad);\n                _xhr.removeEventListener('error', onError);\n                _xhr.abort();\n            };\n        });\n    }\n    /**\n     * @param {?} req\n     * @param {?} _xhr\n     * @return {?}\n     */\n    XHRConnection.prototype.setDetectedContentType = function (req /** TODO Request */, _xhr /** XMLHttpRequest */) {\n        // Skip if a custom Content-Type header is provided\n        if (req.headers != null && req.headers.get('Content-Type') != null) {\n            return;\n        }\n        // Set the detected content type\n        switch (req.contentType) {\n            case ContentType.NONE:\n                break;\n            case ContentType.JSON:\n                _xhr.setRequestHeader('content-type', 'application/json');\n                break;\n            case ContentType.FORM:\n                _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n                break;\n            case ContentType.TEXT:\n                _xhr.setRequestHeader('content-type', 'text/plain');\n                break;\n            case ContentType.BLOB:\n                var /** @type {?} */ blob = req.blob();\n                if (blob.type) {\n                    _xhr.setRequestHeader('content-type', blob.type);\n                }\n                break;\n        }\n    };\n    return XHRConnection;\n}());\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * \\@experimental\n */\nvar CookieXSRFStrategy = (function () {\n    /**\n     * @param {?=} _cookieName\n     * @param {?=} _headerName\n     */\n    function CookieXSRFStrategy(_cookieName, _headerName) {\n        if (_cookieName === void 0) { _cookieName = 'XSRF-TOKEN'; }\n        if (_headerName === void 0) { _headerName = 'X-XSRF-TOKEN'; }\n        this._cookieName = _cookieName;\n        this._headerName = _headerName;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    CookieXSRFStrategy.prototype.configureRequest = function (req) {\n        var /** @type {?} */ xsrfToken = Object(__WEBPACK_IMPORTED_MODULE_3__angular_platform_browser__[\"ɵgetDOM\"])().getCookie(this._cookieName);\n        if (xsrfToken) {\n            req.headers.set(this._headerName, xsrfToken);\n        }\n    };\n    return CookieXSRFStrategy;\n}());\n/**\n * Creates {\\@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * \\@experimental\n */\nvar XHRBackend = (function () {\n    /**\n     * @param {?} _browserXHR\n     * @param {?} _baseResponseOptions\n     * @param {?} _xsrfStrategy\n     */\n    function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n        this._browserXHR = _browserXHR;\n        this._baseResponseOptions = _baseResponseOptions;\n        this._xsrfStrategy = _xsrfStrategy;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    XHRBackend.prototype.createConnection = function (request) {\n        this._xsrfStrategy.configureRequest(request);\n        return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n    };\n    return XHRBackend;\n}());\nXHRBackend.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nXHRBackend.ctorParameters = function () { return [\n    { type: BrowserXhr, },\n    { type: ResponseOptions, },\n    { type: XSRFStrategy, },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n *\n * \\@experimental\n */\nvar RequestOptions = (function () {\n    /**\n     * @param {?=} opts\n     */\n    function RequestOptions(opts) {\n        if (opts === void 0) { opts = {}; }\n        var method = opts.method, headers = opts.headers, body = opts.body, url = opts.url, search = opts.search, params = opts.params, withCredentials = opts.withCredentials, responseType = opts.responseType;\n        this.method = method != null ? normalizeMethodName(method) : null;\n        this.headers = headers != null ? headers : null;\n        this.body = body != null ? body : null;\n        this.url = url != null ? url : null;\n        this.params = this._mergeSearchParams(params || search);\n        this.withCredentials = withCredentials != null ? withCredentials : null;\n        this.responseType = responseType != null ? responseType : null;\n    }\n    Object.defineProperty(RequestOptions.prototype, \"search\", {\n        /**\n         * @deprecated from 4.0.0. Use params instead.\n         * @return {?}\n         */\n        get: function () { return this.params; },\n        /**\n         * @deprecated from 4.0.0. Use params instead.\n         * @param {?} params\n         * @return {?}\n         */\n        set: function (params) { this.params = params; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * Note that `headers` and `search` will override existing values completely if present in\n     * the `options` object. If these values should be merged, it should be done prior to calling\n     * `merge` on the `RequestOptions` instance.\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n     *\n     * const options = new RequestOptions({\n     *   method: RequestMethod.Post\n     * });\n     * const req = new Request(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    RequestOptions.prototype.merge = function (options) {\n        return new RequestOptions({\n            method: options && options.method != null ? options.method : this.method,\n            headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n            body: options && options.body != null ? options.body : this.body,\n            url: options && options.url != null ? options.url : this.url,\n            params: options && this._mergeSearchParams(options.params || options.search),\n            withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                this.withCredentials,\n            responseType: options && options.responseType != null ? options.responseType :\n                this.responseType\n        });\n    };\n    /**\n     * @param {?=} params\n     * @return {?}\n     */\n    RequestOptions.prototype._mergeSearchParams = function (params) {\n        if (!params)\n            return this.params;\n        if (params instanceof URLSearchParams) {\n            return params.clone();\n        }\n        if (typeof params === 'string') {\n            return new URLSearchParams(params);\n        }\n        return this._parseParams(params);\n    };\n    /**\n     * @param {?=} objParams\n     * @return {?}\n     */\n    RequestOptions.prototype._parseParams = function (objParams) {\n        var _this = this;\n        if (objParams === void 0) { objParams = {}; }\n        var /** @type {?} */ params = new URLSearchParams();\n        Object.keys(objParams).forEach(function (key) {\n            var /** @type {?} */ value = objParams[key];\n            if (Array.isArray(value)) {\n                value.forEach(function (item) { return _this._appendParam(key, item, params); });\n            }\n            else {\n                _this._appendParam(key, value, params);\n            }\n        });\n        return params;\n    };\n    /**\n     * @param {?} key\n     * @param {?} value\n     * @param {?} params\n     * @return {?}\n     */\n    RequestOptions.prototype._appendParam = function (key, value, params) {\n        if (typeof value !== 'string') {\n            value = JSON.stringify(value);\n        }\n        params.append(key, value);\n    };\n    return RequestOptions;\n}());\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n *\n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n *\n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '\\@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n *\n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n *\n * \\@experimental\n */\nvar BaseRequestOptions = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](BaseRequestOptions, _super);\n    function BaseRequestOptions() {\n        return _super.call(this, { method: RequestMethod.Get, headers: new Headers() }) || this;\n    }\n    return BaseRequestOptions;\n}(RequestOptions));\nBaseRequestOptions.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nBaseRequestOptions.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '\\@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n *\n * \\@Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * \\@experimental\n */\nvar Request = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](Request, _super);\n    /**\n     * @param {?} requestOptions\n     */\n    function Request(requestOptions) {\n        var _this = _super.call(this) || this;\n        // TODO: assert that url is present\n        var url = requestOptions.url;\n        _this.url = requestOptions.url;\n        var paramsArg = requestOptions.params || requestOptions.search;\n        if (paramsArg) {\n            var params = void 0;\n            if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n                params = urlEncodeParams(paramsArg).toString();\n            }\n            else {\n                params = paramsArg.toString();\n            }\n            if (params.length > 0) {\n                var prefix = '?';\n                if (_this.url.indexOf('?') != -1) {\n                    prefix = (_this.url[_this.url.length - 1] == '&') ? '' : '&';\n                }\n                // TODO: just delete search-query-looking string in url?\n                _this.url = url + prefix + params;\n            }\n        }\n        _this._body = requestOptions.body;\n        _this.method = normalizeMethodName(requestOptions.method);\n        // TODO(jeffbcross): implement behavior\n        // Defaults to 'omit', consistent with browser\n        _this.headers = new Headers(requestOptions.headers);\n        _this.contentType = _this.detectContentType();\n        _this.withCredentials = requestOptions.withCredentials;\n        _this.responseType = requestOptions.responseType;\n        return _this;\n    }\n    /**\n     * Returns the content type enum based on header options.\n     * @return {?}\n     */\n    Request.prototype.detectContentType = function () {\n        switch (this.headers.get('content-type')) {\n            case 'application/json':\n                return ContentType.JSON;\n            case 'application/x-www-form-urlencoded':\n                return ContentType.FORM;\n            case 'multipart/form-data':\n                return ContentType.FORM_DATA;\n            case 'text/plain':\n            case 'text/html':\n                return ContentType.TEXT;\n            case 'application/octet-stream':\n                return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n            default:\n                return this.detectContentTypeFromBody();\n        }\n    };\n    /**\n     * Returns the content type of request's body based on its type.\n     * @return {?}\n     */\n    Request.prototype.detectContentTypeFromBody = function () {\n        if (this._body == null) {\n            return ContentType.NONE;\n        }\n        else if (this._body instanceof URLSearchParams) {\n            return ContentType.FORM;\n        }\n        else if (this._body instanceof FormData) {\n            return ContentType.FORM_DATA;\n        }\n        else if (this._body instanceof Blob$1) {\n            return ContentType.BLOB;\n        }\n        else if (this._body instanceof ArrayBuffer$1) {\n            return ContentType.ARRAY_BUFFER;\n        }\n        else if (this._body && typeof this._body === 'object') {\n            return ContentType.JSON;\n        }\n        else {\n            return ContentType.TEXT;\n        }\n    };\n    /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     * @return {?}\n     */\n    Request.prototype.getBody = function () {\n        switch (this.contentType) {\n            case ContentType.JSON:\n                return this.text();\n            case ContentType.FORM:\n                return this.text();\n            case ContentType.FORM_DATA:\n                return this._body;\n            case ContentType.TEXT:\n                return this.text();\n            case ContentType.BLOB:\n                return this.blob();\n            case ContentType.ARRAY_BUFFER:\n                return this.arrayBuffer();\n            default:\n                return null;\n        }\n    };\n    return Request;\n}(Body));\n/**\n * @param {?} params\n * @return {?}\n */\nfunction urlEncodeParams(params) {\n    var /** @type {?} */ searchParams = new URLSearchParams();\n    Object.keys(params).forEach(function (key) {\n        var /** @type {?} */ value = params[key];\n        if (value && Array.isArray(value)) {\n            value.forEach(function (element) { return searchParams.append(key, element.toString()); });\n        }\n        else {\n            searchParams.append(key, value.toString());\n        }\n    });\n    return searchParams;\n}\nvar noop = function () { };\nvar w = typeof window == 'object' ? window : noop;\nvar FormData = ((w) /** TODO #9100 */)['FormData'] || noop;\nvar Blob$1 = ((w) /** TODO #9100 */)['Blob'] || noop;\nvar ArrayBuffer$1 = ((w) /** TODO #9100 */)['ArrayBuffer'] || noop;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} backend\n * @param {?} request\n * @return {?}\n */\nfunction httpRequest(backend, request) {\n    return backend.createConnection(request).response;\n}\n/**\n * @param {?} defaultOpts\n * @param {?} providedOpts\n * @param {?} method\n * @param {?} url\n * @return {?}\n */\nfunction mergeOptions(defaultOpts, providedOpts, method, url) {\n    var /** @type {?} */ newOptions = defaultOpts;\n    if (providedOpts) {\n        // Hack so Dart can used named parameters\n        return (newOptions.merge(new RequestOptions({\n            method: providedOpts.method || method,\n            url: providedOpts.url || url,\n            search: providedOpts.search,\n            params: providedOpts.params,\n            headers: providedOpts.headers,\n            body: providedOpts.body,\n            withCredentials: providedOpts.withCredentials,\n            responseType: providedOpts.responseType\n        })));\n    }\n    return (newOptions.merge(new RequestOptions({ method: method, url: url })));\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {\\@link Response} when a\n * response is received.\n *\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '\\@angular/http';\n * import 'rxjs/add/operator/map'\n * \\@Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .map(res => res.json())\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {\\@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '\\@angular/http';\n * import {MockBackend} from '\\@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * \\@experimental\n */\nvar Http = (function () {\n    /**\n     * @param {?} _backend\n     * @param {?} _defaultOptions\n     */\n    function Http(_backend, _defaultOptions) {\n        this._backend = _backend;\n        this._defaultOptions = _defaultOptions;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.request = function (url, options) {\n        var /** @type {?} */ responseObservable;\n        if (typeof url === 'string') {\n            responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url))));\n        }\n        else if (url instanceof Request) {\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    };\n    /**\n     * Performs a request with `get` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.get = function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n    };\n    /**\n     * Performs a request with `post` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.post = function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Post, url)));\n    };\n    /**\n     * Performs a request with `put` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.put = function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Put, url)));\n    };\n    /**\n     * Performs a request with `delete` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.delete = function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n    };\n    /**\n     * Performs a request with `patch` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.patch = function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Patch, url)));\n    };\n    /**\n     * Performs a request with `head` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.head = function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n    };\n    /**\n     * Performs a request with `options` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.options = function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n    };\n    return Http;\n}());\nHttp.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nHttp.ctorParameters = function () { return [\n    { type: ConnectionBackend, },\n    { type: RequestOptions, },\n]; };\n/**\n * \\@experimental\n */\nvar Jsonp = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](Jsonp, _super);\n    /**\n     * @param {?} backend\n     * @param {?} defaultOptions\n     */\n    function Jsonp(backend, defaultOptions) {\n        return _super.call(this, backend, defaultOptions) || this;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     *\n     * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n     * future security issues (e.g. content sniffing).  For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Jsonp.prototype.request = function (url, options) {\n        var /** @type {?} */ responseObservable;\n        if (typeof url === 'string') {\n            url =\n                new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url)));\n        }\n        if (url instanceof Request) {\n            if (url.method !== RequestMethod.Get) {\n                throw new Error('JSONP requests must use GET request method.');\n            }\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    };\n    return Jsonp;\n}(Http));\nJsonp.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nJsonp.ctorParameters = function () { return [\n    { type: ConnectionBackend, },\n    { type: RequestOptions, },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * The http module provides services to perform http requests. To get started, see the {@link Http}\n * class.\n */\n/**\n * @return {?}\n */\nfunction _createDefaultCookieXSRFStrategy() {\n    return new CookieXSRFStrategy();\n}\n/**\n * @param {?} xhrBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction httpFactory(xhrBackend, requestOptions) {\n    return new Http(xhrBackend, requestOptions);\n}\n/**\n * @param {?} jsonpBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction jsonpFactory(jsonpBackend, requestOptions) {\n    return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n *\n * \\@experimental\n */\nvar HttpModule = (function () {\n    function HttpModule() {\n    }\n    return HttpModule;\n}());\nHttpModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"NgModule\"], args: [{\n                providers: [\n                    // TODO(pascal): use factory type annotations once supported in DI\n                    // issue: https://github.com/angular/angular/issues/3183\n                    { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },\n                    BrowserXhr,\n                    { provide: RequestOptions, useClass: BaseRequestOptions },\n                    { provide: ResponseOptions, useClass: BaseResponseOptions },\n                    XHRBackend,\n                    { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },\n                ],\n            },] },\n];\n/**\n * @nocollapse\n */\nHttpModule.ctorParameters = function () { return []; };\n/**\n * The module that includes jsonp's providers\n *\n * \\@experimental\n */\nvar JsonpModule = (function () {\n    function JsonpModule() {\n    }\n    return JsonpModule;\n}());\nJsonpModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"NgModule\"], args: [{\n                providers: [\n                    // TODO(pascal): use factory type annotations once supported in DI\n                    // issue: https://github.com/angular/angular/issues/3183\n                    { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },\n                    BrowserJsonp,\n                    { provide: RequestOptions, useClass: BaseRequestOptions },\n                    { provide: ResponseOptions, useClass: BaseResponseOptions },\n                    { provide: JSONPBackend, useClass: JSONPBackend_ },\n                ],\n            },] },\n];\n/**\n * @nocollapse\n */\nJsonpModule.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n/**\n * \\@stable\n */\nvar VERSION = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Version\"]('4.3.5');\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the http package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n/**\n * Generated bundle index. Do not edit.\n */\n\n//# sourceMappingURL=http.es5.js.map\n\n\n/***/ }),\n\n/***/ \"../../../platform-browser/@angular/platform-browser.es5.js\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BrowserModule\", function() { return BrowserModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"platformBrowser\", function() { return platformBrowser; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Meta\", function() { return Meta; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Title\", function() { return Title; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"disableDebugTools\", function() { return disableDebugTools; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"enableDebugTools\", function() { return enableDebugTools; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"By\", function() { return By; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NgProbeToken\", function() { return NgProbeToken$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DOCUMENT\", function() { return DOCUMENT$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EVENT_MANAGER_PLUGINS\", function() { return EVENT_MANAGER_PLUGINS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EventManager\", function() { return EventManager; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HAMMER_GESTURE_CONFIG\", function() { return HAMMER_GESTURE_CONFIG; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HammerGestureConfig\", function() { return HammerGestureConfig; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DomSanitizer\", function() { return DomSanitizer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"VERSION\", function() { return VERSION; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵBROWSER_SANITIZATION_PROVIDERS\", function() { return BROWSER_SANITIZATION_PROVIDERS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS\", function() { return INTERNAL_BROWSER_PLATFORM_PROVIDERS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵinitDomAdapter\", function() { return initDomAdapter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵBrowserDomAdapter\", function() { return BrowserDomAdapter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵBrowserPlatformLocation\", function() { return BrowserPlatformLocation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵTRANSITION_ID\", function() { return TRANSITION_ID; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵBrowserGetTestability\", function() { return BrowserGetTestability; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵELEMENT_PROBE_PROVIDERS\", function() { return ELEMENT_PROBE_PROVIDERS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵDomAdapter\", function() { return DomAdapter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵgetDOM\", function() { return getDOM; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵsetRootDomAdapter\", function() { return setRootDomAdapter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵDomRendererFactory2\", function() { return DomRendererFactory2; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵNAMESPACE_URIS\", function() { return NAMESPACE_URIS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵflattenStyles\", function() { return flattenStyles; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵshimContentAttribute\", function() { return shimContentAttribute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵshimHostAttribute\", function() { return shimHostAttribute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵDomEventsPlugin\", function() { return DomEventsPlugin; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵHammerGesturesPlugin\", function() { return HammerGesturesPlugin; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵKeyEventsPlugin\", function() { return KeyEventsPlugin; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵDomSharedStylesHost\", function() { return DomSharedStylesHost; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵSharedStylesHost\", function() { return SharedStylesHost; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵb\", function() { return _document; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵa\", function() { return errorHandler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵh\", function() { return GenericBrowserDomAdapter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵg\", function() { return SERVER_TRANSITION_PROVIDERS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵf\", function() { return appInitializerFactory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵc\", function() { return _createNgProbe; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵd\", function() { return EventManagerPlugin; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵe\", function() { return DomSanitizerImpl; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(\"../../../../tslib/tslib.es6.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_common__ = __webpack_require__(\"../../../common/@angular/common.es5.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_core__ = __webpack_require__(\"../../../core/@angular/core.es5.js\");\n\n/**\n * @license Angular v4.3.5\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _DOM = ((null));\n/**\n * @return {?}\n */\nfunction getDOM() {\n    return _DOM;\n}\n/**\n * @param {?} adapter\n * @return {?}\n */\n/**\n * @param {?} adapter\n * @return {?}\n */\nfunction setRootDomAdapter(adapter) {\n    if (!_DOM) {\n        _DOM = adapter;\n    }\n}\n/**\n * Provides DOM operations in an environment-agnostic way.\n *\n * \\@security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n * @abstract\n */\nvar DomAdapter = (function () {\n    function DomAdapter() {\n        this.resourceLoaderType = ((null));\n    }\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} name\n     * @return {?}\n     */\n    DomAdapter.prototype.hasProperty = function (element, name) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    DomAdapter.prototype.setProperty = function (el, name, value) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    DomAdapter.prototype.getProperty = function (el, name) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} methodName\n     * @param {?} args\n     * @return {?}\n     */\n    DomAdapter.prototype.invoke = function (el, methodName, args) { };\n    /**\n     * @abstract\n     * @param {?} error\n     * @return {?}\n     */\n    DomAdapter.prototype.logError = function (error) { };\n    /**\n     * @abstract\n     * @param {?} error\n     * @return {?}\n     */\n    DomAdapter.prototype.log = function (error) { };\n    /**\n     * @abstract\n     * @param {?} error\n     * @return {?}\n     */\n    DomAdapter.prototype.logGroup = function (error) { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DomAdapter.prototype.logGroupEnd = function () { };\n    Object.defineProperty(DomAdapter.prototype, \"attrToPropMap\", {\n        /**\n         * Maps attribute names to their corresponding property names for cases\n         * where attribute name doesn't match property name.\n         * @return {?}\n         */\n        get: function () { return this._attrToPropMap; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._attrToPropMap = value; },\n        enumerable: true,\n        configurable: true\n    });\n    ;\n    ;\n    /**\n     * @abstract\n     * @param {?} nodeA\n     * @param {?} nodeB\n     * @return {?}\n     */\n    DomAdapter.prototype.contains = function (nodeA, nodeB) { };\n    /**\n     * @abstract\n     * @param {?} templateHtml\n     * @return {?}\n     */\n    DomAdapter.prototype.parse = function (templateHtml) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} selector\n     * @return {?}\n     */\n    DomAdapter.prototype.querySelector = function (el, selector) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} selector\n     * @return {?}\n     */\n    DomAdapter.prototype.querySelectorAll = function (el, selector) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} evt\n     * @param {?} listener\n     * @return {?}\n     */\n    DomAdapter.prototype.on = function (el, evt, listener) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} evt\n     * @param {?} listener\n     * @return {?}\n     */\n    DomAdapter.prototype.onAndCancel = function (el, evt, listener) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} evt\n     * @return {?}\n     */\n    DomAdapter.prototype.dispatchEvent = function (el, evt) { };\n    /**\n     * @abstract\n     * @param {?} eventType\n     * @return {?}\n     */\n    DomAdapter.prototype.createMouseEvent = function (eventType) { };\n    /**\n     * @abstract\n     * @param {?} eventType\n     * @return {?}\n     */\n    DomAdapter.prototype.createEvent = function (eventType) { };\n    /**\n     * @abstract\n     * @param {?} evt\n     * @return {?}\n     */\n    DomAdapter.prototype.preventDefault = function (evt) { };\n    /**\n     * @abstract\n     * @param {?} evt\n     * @return {?}\n     */\n    DomAdapter.prototype.isPrevented = function (evt) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.getInnerHTML = function (el) { };\n    /**\n     * Returns content if el is a <template> element, null otherwise.\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.getTemplateContent = function (el) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.getOuterHTML = function (el) { };\n    /**\n     * @abstract\n     * @param {?} node\n     * @return {?}\n     */\n    DomAdapter.prototype.nodeName = function (node) { };\n    /**\n     * @abstract\n     * @param {?} node\n     * @return {?}\n     */\n    DomAdapter.prototype.nodeValue = function (node) { };\n    /**\n     * @abstract\n     * @param {?} node\n     * @return {?}\n     */\n    DomAdapter.prototype.type = function (node) { };\n    /**\n     * @abstract\n     * @param {?} node\n     * @return {?}\n     */\n    DomAdapter.prototype.content = function (node) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.firstChild = function (el) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.nextSibling = function (el) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.parentElement = function (el) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.childNodes = function (el) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.childNodesAsList = function (el) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.clearNodes = function (el) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} node\n     * @return {?}\n     */\n    DomAdapter.prototype.appendChild = function (el, node) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} node\n     * @return {?}\n     */\n    DomAdapter.prototype.removeChild = function (el, node) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} newNode\n     * @param {?} oldNode\n     * @return {?}\n     */\n    DomAdapter.prototype.replaceChild = function (el, newNode, oldNode) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.remove = function (el) { };\n    /**\n     * @abstract\n     * @param {?} parent\n     * @param {?} ref\n     * @param {?} node\n     * @return {?}\n     */\n    DomAdapter.prototype.insertBefore = function (parent, ref, node) { };\n    /**\n     * @abstract\n     * @param {?} parent\n     * @param {?} ref\n     * @param {?} nodes\n     * @return {?}\n     */\n    DomAdapter.prototype.insertAllBefore = function (parent, ref, nodes) { };\n    /**\n     * @abstract\n     * @param {?} parent\n     * @param {?} el\n     * @param {?} node\n     * @return {?}\n     */\n    DomAdapter.prototype.insertAfter = function (parent, el, node) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} value\n     * @return {?}\n     */\n    DomAdapter.prototype.setInnerHTML = function (el, value) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.getText = function (el) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} value\n     * @return {?}\n     */\n    DomAdapter.prototype.setText = function (el, value) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.getValue = function (el) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} value\n     * @return {?}\n     */\n    DomAdapter.prototype.setValue = function (el, value) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.getChecked = function (el) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} value\n     * @return {?}\n     */\n    DomAdapter.prototype.setChecked = function (el, value) { };\n    /**\n     * @abstract\n     * @param {?} text\n     * @return {?}\n     */\n    DomAdapter.prototype.createComment = function (text) { };\n    /**\n     * @abstract\n     * @param {?} html\n     * @return {?}\n     */\n    DomAdapter.prototype.createTemplate = function (html) { };\n    /**\n     * @abstract\n     * @param {?} tagName\n     * @param {?=} doc\n     * @return {?}\n     */\n    DomAdapter.prototype.createElement = function (tagName, doc) { };\n    /**\n     * @abstract\n     * @param {?} ns\n     * @param {?} tagName\n     * @param {?=} doc\n     * @return {?}\n     */\n    DomAdapter.prototype.createElementNS = function (ns, tagName, doc) { };\n    /**\n     * @abstract\n     * @param {?} text\n     * @param {?=} doc\n     * @return {?}\n     */\n    DomAdapter.prototype.createTextNode = function (text, doc) { };\n    /**\n     * @abstract\n     * @param {?} attrName\n     * @param {?} attrValue\n     * @param {?=} doc\n     * @return {?}\n     */\n    DomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) { };\n    /**\n     * @abstract\n     * @param {?} css\n     * @param {?=} doc\n     * @return {?}\n     */\n    DomAdapter.prototype.createStyleElement = function (css, doc) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.createShadowRoot = function (el) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.getShadowRoot = function (el) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.getHost = function (el) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.getDistributedNodes = function (el) { };\n    /**\n     * @abstract\n     * @param {?} node\n     * @return {?}\n     */\n    DomAdapter.prototype.clone /*<T extends Node>*/ = function (node) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} name\n     * @return {?}\n     */\n    DomAdapter.prototype.getElementsByClassName = function (element, name) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} name\n     * @return {?}\n     */\n    DomAdapter.prototype.getElementsByTagName = function (element, name) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @return {?}\n     */\n    DomAdapter.prototype.classList = function (element) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} className\n     * @return {?}\n     */\n    DomAdapter.prototype.addClass = function (element, className) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} className\n     * @return {?}\n     */\n    DomAdapter.prototype.removeClass = function (element, className) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} className\n     * @return {?}\n     */\n    DomAdapter.prototype.hasClass = function (element, className) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} styleName\n     * @param {?} styleValue\n     * @return {?}\n     */\n    DomAdapter.prototype.setStyle = function (element, styleName, styleValue) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} styleName\n     * @return {?}\n     */\n    DomAdapter.prototype.removeStyle = function (element, styleName) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} styleName\n     * @return {?}\n     */\n    DomAdapter.prototype.getStyle = function (element, styleName) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} styleName\n     * @param {?=} styleValue\n     * @return {?}\n     */\n    DomAdapter.prototype.hasStyle = function (element, styleName, styleValue) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @return {?}\n     */\n    DomAdapter.prototype.tagName = function (element) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @return {?}\n     */\n    DomAdapter.prototype.attributeMap = function (element) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} attribute\n     * @return {?}\n     */\n    DomAdapter.prototype.hasAttribute = function (element, attribute) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} ns\n     * @param {?} attribute\n     * @return {?}\n     */\n    DomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} attribute\n     * @return {?}\n     */\n    DomAdapter.prototype.getAttribute = function (element, attribute) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} ns\n     * @param {?} attribute\n     * @return {?}\n     */\n    DomAdapter.prototype.getAttributeNS = function (element, ns, attribute) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    DomAdapter.prototype.setAttribute = function (element, name, value) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} ns\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    DomAdapter.prototype.setAttributeNS = function (element, ns, name, value) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} attribute\n     * @return {?}\n     */\n    DomAdapter.prototype.removeAttribute = function (element, attribute) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} ns\n     * @param {?} attribute\n     * @return {?}\n     */\n    DomAdapter.prototype.removeAttributeNS = function (element, ns, attribute) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.templateAwareRoot = function (el) { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DomAdapter.prototype.createHtmlDocument = function () { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.getBoundingClientRect = function (el) { };\n    /**\n     * @abstract\n     * @param {?} doc\n     * @return {?}\n     */\n    DomAdapter.prototype.getTitle = function (doc) { };\n    /**\n     * @abstract\n     * @param {?} doc\n     * @param {?} newTitle\n     * @return {?}\n     */\n    DomAdapter.prototype.setTitle = function (doc, newTitle) { };\n    /**\n     * @abstract\n     * @param {?} n\n     * @param {?} selector\n     * @return {?}\n     */\n    DomAdapter.prototype.elementMatches = function (n, selector) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @return {?}\n     */\n    DomAdapter.prototype.isTemplateElement = function (el) { };\n    /**\n     * @abstract\n     * @param {?} node\n     * @return {?}\n     */\n    DomAdapter.prototype.isTextNode = function (node) { };\n    /**\n     * @abstract\n     * @param {?} node\n     * @return {?}\n     */\n    DomAdapter.prototype.isCommentNode = function (node) { };\n    /**\n     * @abstract\n     * @param {?} node\n     * @return {?}\n     */\n    DomAdapter.prototype.isElementNode = function (node) { };\n    /**\n     * @abstract\n     * @param {?} node\n     * @return {?}\n     */\n    DomAdapter.prototype.hasShadowRoot = function (node) { };\n    /**\n     * @abstract\n     * @param {?} node\n     * @return {?}\n     */\n    DomAdapter.prototype.isShadowRoot = function (node) { };\n    /**\n     * @abstract\n     * @param {?} node\n     * @return {?}\n     */\n    DomAdapter.prototype.importIntoDoc /*<T extends Node>*/ = function (node) { };\n    /**\n     * @abstract\n     * @param {?} node\n     * @return {?}\n     */\n    DomAdapter.prototype.adoptNode /*<T extends Node>*/ = function (node) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @return {?}\n     */\n    DomAdapter.prototype.getHref = function (element) { };\n    /**\n     * @abstract\n     * @param {?} event\n     * @return {?}\n     */\n    DomAdapter.prototype.getEventKey = function (event) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} baseUrl\n     * @param {?} href\n     * @return {?}\n     */\n    DomAdapter.prototype.resolveAndSetHref = function (element, baseUrl, href) { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DomAdapter.prototype.supportsDOMEvents = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DomAdapter.prototype.supportsNativeShadowDOM = function () { };\n    /**\n     * @abstract\n     * @param {?} doc\n     * @param {?} target\n     * @return {?}\n     */\n    DomAdapter.prototype.getGlobalEventTarget = function (doc, target) { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DomAdapter.prototype.getHistory = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DomAdapter.prototype.getLocation = function () { };\n    /**\n     * @abstract\n     * @param {?} doc\n     * @return {?}\n     */\n    DomAdapter.prototype.getBaseHref = function (doc) { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DomAdapter.prototype.resetBaseElement = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DomAdapter.prototype.getUserAgent = function () { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    DomAdapter.prototype.setData = function (element, name, value) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @return {?}\n     */\n    DomAdapter.prototype.getComputedStyle = function (element) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} name\n     * @return {?}\n     */\n    DomAdapter.prototype.getData = function (element, name) { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DomAdapter.prototype.supportsWebAnimation = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DomAdapter.prototype.performanceNow = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DomAdapter.prototype.getAnimationPrefix = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DomAdapter.prototype.getTransitionEnd = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DomAdapter.prototype.supportsAnimation = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DomAdapter.prototype.supportsCookies = function () { };\n    /**\n     * @abstract\n     * @param {?} name\n     * @return {?}\n     */\n    DomAdapter.prototype.getCookie = function (name) { };\n    /**\n     * @abstract\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    DomAdapter.prototype.setCookie = function (name, value) { };\n    return DomAdapter;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides DOM operations in any browser environment.\n *\n * \\@security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n * @abstract\n */\nvar GenericBrowserDomAdapter = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](GenericBrowserDomAdapter, _super);\n    function GenericBrowserDomAdapter() {\n        var _this = _super.call(this) || this;\n        _this._animationPrefix = null;\n        _this._transitionEnd = null;\n        try {\n            var element_1 = _this.createElement('div', document);\n            if (_this.getStyle(element_1, 'animationName') != null) {\n                _this._animationPrefix = '';\n            }\n            else {\n                var domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];\n                for (var i = 0; i < domPrefixes.length; i++) {\n                    if (_this.getStyle(element_1, domPrefixes[i] + 'AnimationName') != null) {\n                        _this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';\n                        break;\n                    }\n                }\n            }\n            var transEndEventNames_1 = {\n                WebkitTransition: 'webkitTransitionEnd',\n                MozTransition: 'transitionend',\n                OTransition: 'oTransitionEnd otransitionend',\n                transition: 'transitionend'\n            };\n            Object.keys(transEndEventNames_1).forEach(function (key) {\n                if (_this.getStyle(element_1, key) != null) {\n                    _this._transitionEnd = transEndEventNames_1[key];\n                }\n            });\n        }\n        catch (e) {\n            _this._animationPrefix = null;\n            _this._transitionEnd = null;\n        }\n        return _this;\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    GenericBrowserDomAdapter.prototype.getDistributedNodes = function (el) { return ((el)).getDistributedNodes(); };\n    /**\n     * @param {?} el\n     * @param {?} baseUrl\n     * @param {?} href\n     * @return {?}\n     */\n    GenericBrowserDomAdapter.prototype.resolveAndSetHref = function (el, baseUrl, href) {\n        el.href = href == null ? baseUrl : baseUrl + '/../' + href;\n    };\n    /**\n     * @return {?}\n     */\n    GenericBrowserDomAdapter.prototype.supportsDOMEvents = function () { return true; };\n    /**\n     * @return {?}\n     */\n    GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function () {\n        return typeof ((document.body)).createShadowRoot === 'function';\n    };\n    /**\n     * @return {?}\n     */\n    GenericBrowserDomAdapter.prototype.getAnimationPrefix = function () { return this._animationPrefix ? this._animationPrefix : ''; };\n    /**\n     * @return {?}\n     */\n    GenericBrowserDomAdapter.prototype.getTransitionEnd = function () { return this._transitionEnd ? this._transitionEnd : ''; };\n    /**\n     * @return {?}\n     */\n    GenericBrowserDomAdapter.prototype.supportsAnimation = function () {\n        return this._animationPrefix != null && this._transitionEnd != null;\n    };\n    return GenericBrowserDomAdapter;\n}(DomAdapter));\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _attrToPropMap = {\n    'class': 'className',\n    'innerHtml': 'innerHTML',\n    'readonly': 'readOnly',\n    'tabindex': 'tabIndex',\n};\nvar DOM_KEY_LOCATION_NUMPAD = 3;\n// Map to convert some key or keyIdentifier values to what will be returned by getEventKey\nvar _keyMap = {\n    // The following values are here for cross-browser compatibility and to match the W3C standard\n    // cf http://www.w3.org/TR/DOM-Level-3-Events-key/\n    '\\b': 'Backspace',\n    '\\t': 'Tab',\n    '\\x7F': 'Delete',\n    '\\x1B': 'Escape',\n    'Del': 'Delete',\n    'Esc': 'Escape',\n    'Left': 'ArrowLeft',\n    'Right': 'ArrowRight',\n    'Up': 'ArrowUp',\n    'Down': 'ArrowDown',\n    'Menu': 'ContextMenu',\n    'Scroll': 'ScrollLock',\n    'Win': 'OS'\n};\n// There is a bug in Chrome for numeric keypad keys:\n// https://code.google.com/p/chromium/issues/detail?id=155654\n// 1, 2, 3 ... are reported as A, B, C ...\nvar _chromeNumKeyPadMap = {\n    'A': '1',\n    'B': '2',\n    'C': '3',\n    'D': '4',\n    'E': '5',\n    'F': '6',\n    'G': '7',\n    'H': '8',\n    'I': '9',\n    'J': '*',\n    'K': '+',\n    'M': '-',\n    'N': '.',\n    'O': '/',\n    '\\x60': '0',\n    '\\x90': 'NumLock'\n};\nvar nodeContains;\nif (__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ɵglobal\"]['Node']) {\n    nodeContains = __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ɵglobal\"]['Node'].prototype.contains || function (node) {\n        return !!(this.compareDocumentPosition(node) & 16);\n    };\n}\nvar BrowserDomAdapter = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](BrowserDomAdapter, _super);\n    function BrowserDomAdapter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} templateHtml\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.parse = function (templateHtml) { throw new Error('parse not implemented'); };\n    /**\n     * @return {?}\n     */\n    BrowserDomAdapter.makeCurrent = function () { setRootDomAdapter(new BrowserDomAdapter()); };\n    /**\n     * @param {?} element\n     * @param {?} name\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.hasProperty = function (element, name) { return name in element; };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.setProperty = function (el, name, value) { ((el))[name] = value; };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.getProperty = function (el, name) { return ((el))[name]; };\n    /**\n     * @param {?} el\n     * @param {?} methodName\n     * @param {?} args\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.invoke = function (el, methodName, args) { ((el))[methodName].apply(((el)), args); };\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.logError = function (error) {\n        if (window.console) {\n            if (console.error) {\n                console.error(error);\n            }\n            else {\n                console.log(error);\n            }\n        }\n    };\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.log = function (error) {\n        if (window.console) {\n            window.console.log && window.console.log(error);\n        }\n    };\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.logGroup = function (error) {\n        if (window.console) {\n            window.console.group && window.console.group(error);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.logGroupEnd = function () {\n        if (window.console) {\n            window.console.groupEnd && window.console.groupEnd();\n        }\n    };\n    Object.defineProperty(BrowserDomAdapter.prototype, \"attrToPropMap\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return _attrToPropMap; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} nodeA\n     * @param {?} nodeB\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.contains = function (nodeA, nodeB) { return nodeContains.call(nodeA, nodeB); };\n    /**\n     * @param {?} el\n     * @param {?} selector\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.querySelector = function (el, selector) { return el.querySelector(selector); };\n    /**\n     * @param {?} el\n     * @param {?} selector\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.querySelectorAll = function (el, selector) { return el.querySelectorAll(selector); };\n    /**\n     * @param {?} el\n     * @param {?} evt\n     * @param {?} listener\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.on = function (el, evt, listener) { el.addEventListener(evt, listener, false); };\n    /**\n     * @param {?} el\n     * @param {?} evt\n     * @param {?} listener\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.onAndCancel = function (el, evt, listener) {\n        el.addEventListener(evt, listener, false);\n        // Needed to follow Dart's subscription semantic, until fix of\n        // https://code.google.com/p/dart/issues/detail?id=17406\n        return function () { el.removeEventListener(evt, listener, false); };\n    };\n    /**\n     * @param {?} el\n     * @param {?} evt\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.dispatchEvent = function (el, evt) { el.dispatchEvent(evt); };\n    /**\n     * @param {?} eventType\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.createMouseEvent = function (eventType) {\n        var /** @type {?} */ evt = document.createEvent('MouseEvent');\n        evt.initEvent(eventType, true, true);\n        return evt;\n    };\n    /**\n     * @param {?} eventType\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.createEvent = function (eventType) {\n        var /** @type {?} */ evt = document.createEvent('Event');\n        evt.initEvent(eventType, true, true);\n        return evt;\n    };\n    /**\n     * @param {?} evt\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.preventDefault = function (evt) {\n        evt.preventDefault();\n        evt.returnValue = false;\n    };\n    /**\n     * @param {?} evt\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.isPrevented = function (evt) {\n        return evt.defaultPrevented || evt.returnValue != null && !evt.returnValue;\n    };\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.getInnerHTML = function (el) { return el.innerHTML; };\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.getTemplateContent = function (el) {\n        return 'content' in el && el instanceof HTMLTemplateElement ? el.content : null;\n    };\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.getOuterHTML = function (el) { return el.outerHTML; };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.nodeName = function (node) { return node.nodeName; };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.nodeValue = function (node) { return node.nodeValue; };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.type = function (node) { return node.type; };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.content = function (node) {\n        if (this.hasProperty(node, 'content')) {\n            return ((node)).content;\n        }\n        else {\n            return node;\n        }\n    };\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.firstChild = function (el) { return el.firstChild; };\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.nextSibling = function (el) { return el.nextSibling; };\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.parentElement = function (el) { return el.parentNode; };\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.childNodes = function (el) { return el.childNodes; };\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.childNodesAsList = function (el) {\n        var /** @type {?} */ childNodes = el.childNodes;\n        var /** @type {?} */ res = new Array(childNodes.length);\n        for (var /** @type {?} */ i = 0; i < childNodes.length; i++) {\n            res[i] = childNodes[i];\n        }\n        return res;\n    };\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.clearNodes = function (el) {\n        while (el.firstChild) {\n            el.removeChild(el.firstChild);\n        }\n    };\n    /**\n     * @param {?} el\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.appendChild = function (el, node) { el.appendChild(node); };\n    /**\n     * @param {?} el\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.removeChild = function (el, node) { el.removeChild(node); };\n    /**\n     * @param {?} el\n     * @param {?} newChild\n     * @param {?} oldChild\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.replaceChild = function (el, newChild, oldChild) { el.replaceChild(newChild, oldChild); };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.remove = function (node) {\n        if (node.parentNode) {\n            node.parentNode.removeChild(node);\n        }\n        return node;\n    };\n    /**\n     * @param {?} parent\n     * @param {?} ref\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.insertBefore = function (parent, ref, node) { parent.insertBefore(node, ref); };\n    /**\n     * @param {?} parent\n     * @param {?} ref\n     * @param {?} nodes\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.insertAllBefore = function (parent, ref, nodes) {\n        nodes.forEach(function (n) { return parent.insertBefore(n, ref); });\n    };\n    /**\n     * @param {?} parent\n     * @param {?} ref\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.insertAfter = function (parent, ref, node) { parent.insertBefore(node, ref.nextSibling); };\n    /**\n     * @param {?} el\n     * @param {?} value\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.setInnerHTML = function (el, value) { el.innerHTML = value; };\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.getText = function (el) { return el.textContent; };\n    /**\n     * @param {?} el\n     * @param {?} value\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.setText = function (el, value) { el.textContent = value; };\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.getValue = function (el) { return el.value; };\n    /**\n     * @param {?} el\n     * @param {?} value\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.setValue = function (el, value) { el.value = value; };\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.getChecked = function (el) { return el.checked; };\n    /**\n     * @param {?} el\n     * @param {?} value\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.setChecked = function (el, value) { el.checked = value; };\n    /**\n     * @param {?} text\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.createComment = function (text) { return document.createComment(text); };\n    /**\n     * @param {?} html\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.createTemplate = function (html) {\n        var /** @type {?} */ t = document.createElement('template');\n        t.innerHTML = html;\n        return t;\n    };\n    /**\n     * @param {?} tagName\n     * @param {?=} doc\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.createElement = function (tagName, doc) {\n        if (doc === void 0) { doc = document; }\n        return doc.createElement(tagName);\n    };\n    /**\n     * @param {?} ns\n     * @param {?} tagName\n     * @param {?=} doc\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.createElementNS = function (ns, tagName, doc) {\n        if (doc === void 0) { doc = document; }\n        return doc.createElementNS(ns, tagName);\n    };\n    /**\n     * @param {?} text\n     * @param {?=} doc\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.createTextNode = function (text, doc) {\n        if (doc === void 0) { doc = document; }\n        return doc.createTextNode(text);\n    };\n    /**\n     * @param {?} attrName\n     * @param {?} attrValue\n     * @param {?=} doc\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) {\n        if (doc === void 0) { doc = document; }\n        var /** @type {?} */ el = (doc.createElement('SCRIPT'));\n        el.setAttribute(attrName, attrValue);\n        return el;\n    };\n    /**\n     * @param {?} css\n     * @param {?=} doc\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.createStyleElement = function (css, doc) {\n        if (doc === void 0) { doc = document; }\n        var /** @type {?} */ style = (doc.createElement('style'));\n        this.appendChild(style, this.createTextNode(css));\n        return style;\n    };\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.createShadowRoot = function (el) { return ((el)).createShadowRoot(); };\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.getShadowRoot = function (el) { return ((el)).shadowRoot; };\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.getHost = function (el) { return ((el)).host; };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.clone = function (node) { return node.cloneNode(true); };\n    /**\n     * @param {?} element\n     * @param {?} name\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.getElementsByClassName = function (element, name) {\n        return element.getElementsByClassName(name);\n    };\n    /**\n     * @param {?} element\n     * @param {?} name\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.getElementsByTagName = function (element, name) {\n        return element.getElementsByTagName(name);\n    };\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.classList = function (element) { return Array.prototype.slice.call(element.classList, 0); };\n    /**\n     * @param {?} element\n     * @param {?} className\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.addClass = function (element, className) { element.classList.add(className); };\n    /**\n     * @param {?} element\n     * @param {?} className\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.removeClass = function (element, className) { element.classList.remove(className); };\n    /**\n     * @param {?} element\n     * @param {?} className\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.hasClass = function (element, className) {\n        return element.classList.contains(className);\n    };\n    /**\n     * @param {?} element\n     * @param {?} styleName\n     * @param {?} styleValue\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.setStyle = function (element, styleName, styleValue) {\n        element.style[styleName] = styleValue;\n    };\n    /**\n     * @param {?} element\n     * @param {?} stylename\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.removeStyle = function (element, stylename) {\n        // IE requires '' instead of null\n        // see https://github.com/angular/angular/issues/7916\n        element.style[stylename] = '';\n    };\n    /**\n     * @param {?} element\n     * @param {?} stylename\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.getStyle = function (element, stylename) { return element.style[stylename]; };\n    /**\n     * @param {?} element\n     * @param {?} styleName\n     * @param {?=} styleValue\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.hasStyle = function (element, styleName, styleValue) {\n        var /** @type {?} */ value = this.getStyle(element, styleName) || '';\n        return styleValue ? value == styleValue : value.length > 0;\n    };\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.tagName = function (element) { return element.tagName; };\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.attributeMap = function (element) {\n        var /** @type {?} */ res = new Map();\n        var /** @type {?} */ elAttrs = element.attributes;\n        for (var /** @type {?} */ i = 0; i < elAttrs.length; i++) {\n            var /** @type {?} */ attrib = elAttrs[i];\n            res.set(attrib.name, attrib.value);\n        }\n        return res;\n    };\n    /**\n     * @param {?} element\n     * @param {?} attribute\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.hasAttribute = function (element, attribute) {\n        return element.hasAttribute(attribute);\n    };\n    /**\n     * @param {?} element\n     * @param {?} ns\n     * @param {?} attribute\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) {\n        return element.hasAttributeNS(ns, attribute);\n    };\n    /**\n     * @param {?} element\n     * @param {?} attribute\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.getAttribute = function (element, attribute) {\n        return element.getAttribute(attribute);\n    };\n    /**\n     * @param {?} element\n     * @param {?} ns\n     * @param {?} name\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.getAttributeNS = function (element, ns, name) {\n        return element.getAttributeNS(ns, name);\n    };\n    /**\n     * @param {?} element\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.setAttribute = function (element, name, value) { element.setAttribute(name, value); };\n    /**\n     * @param {?} element\n     * @param {?} ns\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.setAttributeNS = function (element, ns, name, value) {\n        element.setAttributeNS(ns, name, value);\n    };\n    /**\n     * @param {?} element\n     * @param {?} attribute\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.removeAttribute = function (element, attribute) { element.removeAttribute(attribute); };\n    /**\n     * @param {?} element\n     * @param {?} ns\n     * @param {?} name\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.removeAttributeNS = function (element, ns, name) {\n        element.removeAttributeNS(ns, name);\n    };\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.templateAwareRoot = function (el) { return this.isTemplateElement(el) ? this.content(el) : el; };\n    /**\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.createHtmlDocument = function () {\n        return document.implementation.createHTMLDocument('fakeTitle');\n    };\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.getBoundingClientRect = function (el) {\n        try {\n            return el.getBoundingClientRect();\n        }\n        catch (e) {\n            return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };\n        }\n    };\n    /**\n     * @param {?} doc\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.getTitle = function (doc) { return document.title; };\n    /**\n     * @param {?} doc\n     * @param {?} newTitle\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.setTitle = function (doc, newTitle) { document.title = newTitle || ''; };\n    /**\n     * @param {?} n\n     * @param {?} selector\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.elementMatches = function (n, selector) {\n        if (n instanceof HTMLElement) {\n            return n.matches && n.matches(selector) ||\n                n.msMatchesSelector && n.msMatchesSelector(selector) ||\n                n.webkitMatchesSelector && n.webkitMatchesSelector(selector);\n        }\n        return false;\n    };\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.isTemplateElement = function (el) {\n        return el instanceof HTMLElement && el.nodeName == 'TEMPLATE';\n    };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.isTextNode = function (node) { return node.nodeType === Node.TEXT_NODE; };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.isCommentNode = function (node) { return node.nodeType === Node.COMMENT_NODE; };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.isElementNode = function (node) { return node.nodeType === Node.ELEMENT_NODE; };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.hasShadowRoot = function (node) {\n        return node.shadowRoot != null && node instanceof HTMLElement;\n    };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.isShadowRoot = function (node) { return node instanceof DocumentFragment; };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.importIntoDoc = function (node) { return document.importNode(this.templateAwareRoot(node), true); };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.adoptNode = function (node) { return document.adoptNode(node); };\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.getHref = function (el) { return ((el)).href; };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.getEventKey = function (event) {\n        var /** @type {?} */ key = event.key;\n        if (key == null) {\n            key = event.keyIdentifier;\n            // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and\n            // Safari cf\n            // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces\n            if (key == null) {\n                return 'Unidentified';\n            }\n            if (key.startsWith('U+')) {\n                key = String.fromCharCode(parseInt(key.substring(2), 16));\n                if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {\n                    // There is a bug in Chrome for numeric keypad keys:\n                    // https://code.google.com/p/chromium/issues/detail?id=155654\n                    // 1, 2, 3 ... are reported as A, B, C ...\n                    key = ((_chromeNumKeyPadMap))[key];\n                }\n            }\n        }\n        return _keyMap[key] || key;\n    };\n    /**\n     * @param {?} doc\n     * @param {?} target\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.getGlobalEventTarget = function (doc, target) {\n        if (target === 'window') {\n            return window;\n        }\n        if (target === 'document') {\n            return document;\n        }\n        if (target === 'body') {\n            return document.body;\n        }\n        return null;\n    };\n    /**\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.getHistory = function () { return window.history; };\n    /**\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.getLocation = function () { return window.location; };\n    /**\n     * @param {?} doc\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.getBaseHref = function (doc) {\n        var /** @type {?} */ href = getBaseElementHref();\n        return href == null ? null : relativePath(href);\n    };\n    /**\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.resetBaseElement = function () { baseElement = null; };\n    /**\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.getUserAgent = function () { return window.navigator.userAgent; };\n    /**\n     * @param {?} element\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.setData = function (element, name, value) {\n        this.setAttribute(element, 'data-' + name, value);\n    };\n    /**\n     * @param {?} element\n     * @param {?} name\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.getData = function (element, name) {\n        return this.getAttribute(element, 'data-' + name);\n    };\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.getComputedStyle = function (element) { return getComputedStyle(element); };\n    /**\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.supportsWebAnimation = function () {\n        return typeof ((Element)).prototype['animate'] === 'function';\n    };\n    /**\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.performanceNow = function () {\n        // performance.now() is not available in all browsers, see\n        // http://caniuse.com/#search=performance.now\n        return window.performance && window.performance.now ? window.performance.now() :\n            new Date().getTime();\n    };\n    /**\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.supportsCookies = function () { return true; };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.getCookie = function (name) { return Object(__WEBPACK_IMPORTED_MODULE_1__angular_common__[\"ɵparseCookieValue\"])(document.cookie, name); };\n    /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    BrowserDomAdapter.prototype.setCookie = function (name, value) {\n        // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does\n        // not clear other cookies.\n        document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);\n    };\n    return BrowserDomAdapter;\n}(GenericBrowserDomAdapter));\nvar baseElement = null;\n/**\n * @return {?}\n */\nfunction getBaseElementHref() {\n    if (!baseElement) {\n        baseElement = ((document.querySelector('base')));\n        if (!baseElement) {\n            return null;\n        }\n    }\n    return baseElement.getAttribute('href');\n}\n// based on urlUtils.js in AngularJS 1\nvar urlParsingNode;\n/**\n * @param {?} url\n * @return {?}\n */\nfunction relativePath(url) {\n    if (!urlParsingNode) {\n        urlParsingNode = document.createElement('a');\n    }\n    urlParsingNode.setAttribute('href', url);\n    return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :\n        '/' + urlParsingNode.pathname;\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A DI Token representing the main rendering context. In a browser this is the DOM Document.\n *\n * Note: Document might not be available in the Application Context when Application and Rendering\n * Contexts are not the same (e.g. when running the application into a Web Worker).\n *\n * @deprecated import from `\\@angular/common` instead.\n */\nvar DOCUMENT$1 = __WEBPACK_IMPORTED_MODULE_1__angular_common__[\"DOCUMENT\"];\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @return {?}\n */\nfunction supportsState() {\n    return !!window.history.pushState;\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * `PlatformLocation` encapsulates all of the direct calls to platform APIs.\n * This class should not be used directly by an application developer. Instead, use\n * {\\@link Location}.\n */\nvar BrowserPlatformLocation = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](BrowserPlatformLocation, _super);\n    /**\n     * @param {?} _doc\n     */\n    function BrowserPlatformLocation(_doc) {\n        var _this = _super.call(this) || this;\n        _this._doc = _doc;\n        _this._init();\n        return _this;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    BrowserPlatformLocation.prototype._init = function () {\n        this._location = getDOM().getLocation();\n        this._history = getDOM().getHistory();\n    };\n    Object.defineProperty(BrowserPlatformLocation.prototype, \"location\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._location; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function () { return ((getDOM().getBaseHref(this._doc))); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    BrowserPlatformLocation.prototype.onPopState = function (fn) {\n        getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    BrowserPlatformLocation.prototype.onHashChange = function (fn) {\n        getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);\n    };\n    Object.defineProperty(BrowserPlatformLocation.prototype, \"pathname\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._location.pathname; },\n        /**\n         * @param {?} newPath\n         * @return {?}\n         */\n        set: function (newPath) { this._location.pathname = newPath; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BrowserPlatformLocation.prototype, \"search\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._location.search; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BrowserPlatformLocation.prototype, \"hash\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._location.hash; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} state\n     * @param {?} title\n     * @param {?} url\n     * @return {?}\n     */\n    BrowserPlatformLocation.prototype.pushState = function (state, title, url) {\n        if (supportsState()) {\n            this._history.pushState(state, title, url);\n        }\n        else {\n            this._location.hash = url;\n        }\n    };\n    /**\n     * @param {?} state\n     * @param {?} title\n     * @param {?} url\n     * @return {?}\n     */\n    BrowserPlatformLocation.prototype.replaceState = function (state, title, url) {\n        if (supportsState()) {\n            this._history.replaceState(state, title, url);\n        }\n        else {\n            this._location.hash = url;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    BrowserPlatformLocation.prototype.forward = function () { this._history.forward(); };\n    /**\n     * @return {?}\n     */\n    BrowserPlatformLocation.prototype.back = function () { this._history.back(); };\n    return BrowserPlatformLocation;\n}(__WEBPACK_IMPORTED_MODULE_1__angular_common__[\"PlatformLocation\"]));\nBrowserPlatformLocation.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nBrowserPlatformLocation.ctorParameters = function () { return [\n    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Inject\"], args: [DOCUMENT$1,] },] },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A service that can be used to get and add meta tags.\n *\n * \\@experimental\n */\nvar Meta = (function () {\n    /**\n     * @param {?} _doc\n     */\n    function Meta(_doc) {\n        this._doc = _doc;\n        this._dom = getDOM();\n    }\n    /**\n     * @param {?} tag\n     * @param {?=} forceCreation\n     * @return {?}\n     */\n    Meta.prototype.addTag = function (tag, forceCreation) {\n        if (forceCreation === void 0) { forceCreation = false; }\n        if (!tag)\n            return null;\n        return this._getOrCreateElement(tag, forceCreation);\n    };\n    /**\n     * @param {?} tags\n     * @param {?=} forceCreation\n     * @return {?}\n     */\n    Meta.prototype.addTags = function (tags, forceCreation) {\n        var _this = this;\n        if (forceCreation === void 0) { forceCreation = false; }\n        if (!tags)\n            return [];\n        return tags.reduce(function (result, tag) {\n            if (tag) {\n                result.push(_this._getOrCreateElement(tag, forceCreation));\n            }\n            return result;\n        }, []);\n    };\n    /**\n     * @param {?} attrSelector\n     * @return {?}\n     */\n    Meta.prototype.getTag = function (attrSelector) {\n        if (!attrSelector)\n            return null;\n        return this._dom.querySelector(this._doc, \"meta[\" + attrSelector + \"]\");\n    };\n    /**\n     * @param {?} attrSelector\n     * @return {?}\n     */\n    Meta.prototype.getTags = function (attrSelector) {\n        if (!attrSelector)\n            return [];\n        var /** @type {?} */ list /*NodeList*/ = this._dom.querySelectorAll(this._doc, \"meta[\" + attrSelector + \"]\");\n        return list ? [].slice.call(list) : [];\n    };\n    /**\n     * @param {?} tag\n     * @param {?=} selector\n     * @return {?}\n     */\n    Meta.prototype.updateTag = function (tag, selector) {\n        if (!tag)\n            return null;\n        selector = selector || this._parseSelector(tag);\n        var /** @type {?} */ meta = ((this.getTag(selector)));\n        if (meta) {\n            return this._setMetaElementAttributes(tag, meta);\n        }\n        return this._getOrCreateElement(tag, true);\n    };\n    /**\n     * @param {?} attrSelector\n     * @return {?}\n     */\n    Meta.prototype.removeTag = function (attrSelector) { this.removeTagElement(/** @type {?} */ ((this.getTag(attrSelector)))); };\n    /**\n     * @param {?} meta\n     * @return {?}\n     */\n    Meta.prototype.removeTagElement = function (meta) {\n        if (meta) {\n            this._dom.remove(meta);\n        }\n    };\n    /**\n     * @param {?} meta\n     * @param {?=} forceCreation\n     * @return {?}\n     */\n    Meta.prototype._getOrCreateElement = function (meta, forceCreation) {\n        if (forceCreation === void 0) { forceCreation = false; }\n        if (!forceCreation) {\n            var /** @type {?} */ selector = this._parseSelector(meta);\n            var /** @type {?} */ elem = ((this.getTag(selector)));\n            // It's allowed to have multiple elements with the same name so it's not enough to\n            // just check that element with the same name already present on the page. We also need to\n            // check if element has tag attributes\n            if (elem && this._containsAttributes(meta, elem))\n                return elem;\n        }\n        var /** @type {?} */ element = (this._dom.createElement('meta'));\n        this._setMetaElementAttributes(meta, element);\n        var /** @type {?} */ head = this._dom.getElementsByTagName(this._doc, 'head')[0];\n        this._dom.appendChild(head, element);\n        return element;\n    };\n    /**\n     * @param {?} tag\n     * @param {?} el\n     * @return {?}\n     */\n    Meta.prototype._setMetaElementAttributes = function (tag, el) {\n        var _this = this;\n        Object.keys(tag).forEach(function (prop) { return _this._dom.setAttribute(el, prop, tag[prop]); });\n        return el;\n    };\n    /**\n     * @param {?} tag\n     * @return {?}\n     */\n    Meta.prototype._parseSelector = function (tag) {\n        var /** @type {?} */ attr = tag.name ? 'name' : 'property';\n        return attr + \"=\\\"\" + tag[attr] + \"\\\"\";\n    };\n    /**\n     * @param {?} tag\n     * @param {?} elem\n     * @return {?}\n     */\n    Meta.prototype._containsAttributes = function (tag, elem) {\n        var _this = this;\n        return Object.keys(tag).every(function (key) { return _this._dom.getAttribute(elem, key) === tag[key]; });\n    };\n    return Meta;\n}());\nMeta.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nMeta.ctorParameters = function () { return [\n    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Inject\"], args: [DOCUMENT$1,] },] },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An id that identifies a particular application being bootstrapped, that should\n * match across the client/server boundary.\n */\nvar TRANSITION_ID = new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"InjectionToken\"]('TRANSITION_ID');\n/**\n * @param {?} transitionId\n * @param {?} document\n * @param {?} injector\n * @return {?}\n */\nfunction appInitializerFactory(transitionId, document, injector) {\n    return function () {\n        // Wait for all application initializers to be completed before removing the styles set by\n        // the server.\n        injector.get(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ApplicationInitStatus\"]).donePromise.then(function () {\n            var /** @type {?} */ dom = getDOM();\n            var /** @type {?} */ styles = Array.prototype.slice.apply(dom.querySelectorAll(document, \"style[ng-transition]\"));\n            styles.filter(function (el) { return dom.getAttribute(el, 'ng-transition') === transitionId; })\n                .forEach(function (el) { return dom.remove(el); });\n        });\n    };\n}\nvar SERVER_TRANSITION_PROVIDERS = [\n    {\n        provide: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"APP_INITIALIZER\"],\n        useFactory: appInitializerFactory,\n        deps: [TRANSITION_ID, DOCUMENT$1, __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injector\"]],\n        multi: true\n    },\n];\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar BrowserGetTestability = (function () {\n    function BrowserGetTestability() {\n    }\n    /**\n     * @return {?}\n     */\n    BrowserGetTestability.init = function () { Object(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"setTestabilityGetter\"])(new BrowserGetTestability()); };\n    /**\n     * @param {?} registry\n     * @return {?}\n     */\n    BrowserGetTestability.prototype.addToWindow = function (registry) {\n        __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ɵglobal\"]['getAngularTestability'] = function (elem, findInAncestors) {\n            if (findInAncestors === void 0) { findInAncestors = true; }\n            var /** @type {?} */ testability = registry.findTestabilityInTree(elem, findInAncestors);\n            if (testability == null) {\n                throw new Error('Could not find testability for element.');\n            }\n            return testability;\n        };\n        __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ɵglobal\"]['getAllAngularTestabilities'] = function () { return registry.getAllTestabilities(); };\n        __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ɵglobal\"]['getAllAngularRootElements'] = function () { return registry.getAllRootElements(); };\n        var /** @type {?} */ whenAllStable = function (callback /** TODO #9100 */) {\n            var /** @type {?} */ testabilities = __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ɵglobal\"]['getAllAngularTestabilities']();\n            var /** @type {?} */ count = testabilities.length;\n            var /** @type {?} */ didWork = false;\n            var /** @type {?} */ decrement = function (didWork_ /** TODO #9100 */) {\n                didWork = didWork || didWork_;\n                count--;\n                if (count == 0) {\n                    callback(didWork);\n                }\n            };\n            testabilities.forEach(function (testability /** TODO #9100 */) {\n                testability.whenStable(decrement);\n            });\n        };\n        if (!__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ɵglobal\"]['frameworkStabilizers']) {\n            __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ɵglobal\"]['frameworkStabilizers'] = [];\n        }\n        __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ɵglobal\"]['frameworkStabilizers'].push(whenAllStable);\n    };\n    /**\n     * @param {?} registry\n     * @param {?} elem\n     * @param {?} findInAncestors\n     * @return {?}\n     */\n    BrowserGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {\n        if (elem == null) {\n            return null;\n        }\n        var /** @type {?} */ t = registry.getTestability(elem);\n        if (t != null) {\n            return t;\n        }\n        else if (!findInAncestors) {\n            return null;\n        }\n        if (getDOM().isShadowRoot(elem)) {\n            return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);\n        }\n        return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);\n    };\n    return BrowserGetTestability;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A service that can be used to get and set the title of a current HTML document.\n *\n * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\n * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\n * (representing the `<title>` tag). Instead, this service can be used to set and get the current\n * title value.\n *\n * \\@experimental\n */\nvar Title = (function () {\n    /**\n     * @param {?} _doc\n     */\n    function Title(_doc) {\n        this._doc = _doc;\n    }\n    /**\n     * Get the title of the current HTML document.\n     * @return {?}\n     */\n    Title.prototype.getTitle = function () { return getDOM().getTitle(this._doc); };\n    /**\n     * Set the title of the current HTML document.\n     * @param {?} newTitle\n     * @return {?}\n     */\n    Title.prototype.setTitle = function (newTitle) { getDOM().setTitle(this._doc, newTitle); };\n    return Title;\n}());\nTitle.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nTitle.ctorParameters = function () { return [\n    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Inject\"], args: [DOCUMENT$1,] },] },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} input\n * @return {?}\n */\n/**\n * @param {?} input\n * @return {?}\n */\n/**\n * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if\n * `name` is `'probe'`.\n * @param {?} name Name under which it will be exported. Keep in mind this will be a property of the\n * global `ng` object.\n * @param {?} value The value to export.\n * @return {?}\n */\nfunction exportNgVar(name, value) {\n    if (!ng) {\n        __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ɵglobal\"]['ng'] = ng = ((__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ɵglobal\"]['ng'])) || {};\n    }\n    ng[name] = value;\n}\nvar ng;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar CORE_TOKENS = {\n    'ApplicationRef': __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ApplicationRef\"],\n    'NgZone': __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"NgZone\"],\n};\nvar INSPECT_GLOBAL_NAME = 'probe';\nvar CORE_TOKENS_GLOBAL_NAME = 'coreTokens';\n/**\n * Returns a {\\@link DebugElement} for the given native DOM element, or\n * null if the given native element does not have an Angular view associated\n * with it.\n * @param {?} element\n * @return {?}\n */\nfunction inspectNativeElement(element) {\n    return Object(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"getDebugNode\"])(element);\n}\n/**\n * Deprecated. Use the one from '\\@angular/core'.\n * @deprecated\n */\nvar NgProbeToken$1 = (function () {\n    /**\n     * @param {?} name\n     * @param {?} token\n     */\n    function NgProbeToken$1(name, token) {\n        this.name = name;\n        this.token = token;\n    }\n    return NgProbeToken$1;\n}());\n/**\n * @param {?} extraTokens\n * @param {?} coreTokens\n * @return {?}\n */\nfunction _createNgProbe(extraTokens, coreTokens) {\n    var /** @type {?} */ tokens = (extraTokens || []).concat(coreTokens || []);\n    exportNgVar(INSPECT_GLOBAL_NAME, inspectNativeElement);\n    exportNgVar(CORE_TOKENS_GLOBAL_NAME, Object.assign({}, CORE_TOKENS, _ngProbeTokensToMap(tokens || [])));\n    return function () { return inspectNativeElement; };\n}\n/**\n * @param {?} tokens\n * @return {?}\n */\nfunction _ngProbeTokensToMap(tokens) {\n    return tokens.reduce(function (prev, t) { return (prev[t.name] = t.token, prev); }, {});\n}\n/**\n * Providers which support debugging Angular applications (e.g. via `ng.probe`).\n */\nvar ELEMENT_PROBE_PROVIDERS = [\n    {\n        provide: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"APP_INITIALIZER\"],\n        useFactory: _createNgProbe,\n        deps: [\n            [NgProbeToken$1, new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Optional\"]()],\n            [__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"NgProbeToken\"], new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Optional\"]()],\n        ],\n        multi: true,\n    },\n];\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@stable\n */\nvar EVENT_MANAGER_PLUGINS = new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"InjectionToken\"]('EventManagerPlugins');\n/**\n * \\@stable\n */\nvar EventManager = (function () {\n    /**\n     * @param {?} plugins\n     * @param {?} _zone\n     */\n    function EventManager(plugins, _zone) {\n        var _this = this;\n        this._zone = _zone;\n        this._eventNameToPlugin = new Map();\n        plugins.forEach(function (p) { return p.manager = _this; });\n        this._plugins = plugins.slice().reverse();\n    }\n    /**\n     * @param {?} element\n     * @param {?} eventName\n     * @param {?} handler\n     * @return {?}\n     */\n    EventManager.prototype.addEventListener = function (element, eventName, handler) {\n        var /** @type {?} */ plugin = this._findPluginFor(eventName);\n        return plugin.addEventListener(element, eventName, handler);\n    };\n    /**\n     * @param {?} target\n     * @param {?} eventName\n     * @param {?} handler\n     * @return {?}\n     */\n    EventManager.prototype.addGlobalEventListener = function (target, eventName, handler) {\n        var /** @type {?} */ plugin = this._findPluginFor(eventName);\n        return plugin.addGlobalEventListener(target, eventName, handler);\n    };\n    /**\n     * @return {?}\n     */\n    EventManager.prototype.getZone = function () { return this._zone; };\n    /**\n     * \\@internal\n     * @param {?} eventName\n     * @return {?}\n     */\n    EventManager.prototype._findPluginFor = function (eventName) {\n        var /** @type {?} */ plugin = this._eventNameToPlugin.get(eventName);\n        if (plugin) {\n            return plugin;\n        }\n        var /** @type {?} */ plugins = this._plugins;\n        for (var /** @type {?} */ i = 0; i < plugins.length; i++) {\n            var /** @type {?} */ plugin_1 = plugins[i];\n            if (plugin_1.supports(eventName)) {\n                this._eventNameToPlugin.set(eventName, plugin_1);\n                return plugin_1;\n            }\n        }\n        throw new Error(\"No event manager plugin found for event \" + eventName);\n    };\n    return EventManager;\n}());\nEventManager.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nEventManager.ctorParameters = function () { return [\n    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Inject\"], args: [EVENT_MANAGER_PLUGINS,] },] },\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"NgZone\"], },\n]; };\n/**\n * @abstract\n */\nvar EventManagerPlugin = (function () {\n    /**\n     * @param {?} _doc\n     */\n    function EventManagerPlugin(_doc) {\n        this._doc = _doc;\n    }\n    /**\n     * @abstract\n     * @param {?} eventName\n     * @return {?}\n     */\n    EventManagerPlugin.prototype.supports = function (eventName) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} eventName\n     * @param {?} handler\n     * @return {?}\n     */\n    EventManagerPlugin.prototype.addEventListener = function (element, eventName, handler) { };\n    /**\n     * @param {?} element\n     * @param {?} eventName\n     * @param {?} handler\n     * @return {?}\n     */\n    EventManagerPlugin.prototype.addGlobalEventListener = function (element, eventName, handler) {\n        var /** @type {?} */ target = getDOM().getGlobalEventTarget(this._doc, element);\n        if (!target) {\n            throw new Error(\"Unsupported event target \" + target + \" for event \" + eventName);\n        }\n        return this.addEventListener(target, eventName, handler);\n    };\n    ;\n    return EventManagerPlugin;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar SharedStylesHost = (function () {\n    function SharedStylesHost() {\n        /**\n         * \\@internal\n         */\n        this._stylesSet = new Set();\n    }\n    /**\n     * @param {?} styles\n     * @return {?}\n     */\n    SharedStylesHost.prototype.addStyles = function (styles) {\n        var _this = this;\n        var /** @type {?} */ additions = new Set();\n        styles.forEach(function (style) {\n            if (!_this._stylesSet.has(style)) {\n                _this._stylesSet.add(style);\n                additions.add(style);\n            }\n        });\n        this.onStylesAdded(additions);\n    };\n    /**\n     * @param {?} additions\n     * @return {?}\n     */\n    SharedStylesHost.prototype.onStylesAdded = function (additions) { };\n    /**\n     * @return {?}\n     */\n    SharedStylesHost.prototype.getAllStyles = function () { return Array.from(this._stylesSet); };\n    return SharedStylesHost;\n}());\nSharedStylesHost.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nSharedStylesHost.ctorParameters = function () { return []; };\nvar DomSharedStylesHost = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](DomSharedStylesHost, _super);\n    /**\n     * @param {?} _doc\n     */\n    function DomSharedStylesHost(_doc) {\n        var _this = _super.call(this) || this;\n        _this._doc = _doc;\n        _this._hostNodes = new Set();\n        _this._styleNodes = new Set();\n        _this._hostNodes.add(_doc.head);\n        return _this;\n    }\n    /**\n     * @param {?} styles\n     * @param {?} host\n     * @return {?}\n     */\n    DomSharedStylesHost.prototype._addStylesToHost = function (styles, host) {\n        var _this = this;\n        styles.forEach(function (style) {\n            var /** @type {?} */ styleEl = _this._doc.createElement('style');\n            styleEl.textContent = style;\n            _this._styleNodes.add(host.appendChild(styleEl));\n        });\n    };\n    /**\n     * @param {?} hostNode\n     * @return {?}\n     */\n    DomSharedStylesHost.prototype.addHost = function (hostNode) {\n        this._addStylesToHost(this._stylesSet, hostNode);\n        this._hostNodes.add(hostNode);\n    };\n    /**\n     * @param {?} hostNode\n     * @return {?}\n     */\n    DomSharedStylesHost.prototype.removeHost = function (hostNode) { this._hostNodes.delete(hostNode); };\n    /**\n     * @param {?} additions\n     * @return {?}\n     */\n    DomSharedStylesHost.prototype.onStylesAdded = function (additions) {\n        var _this = this;\n        this._hostNodes.forEach(function (hostNode) { return _this._addStylesToHost(additions, hostNode); });\n    };\n    /**\n     * @return {?}\n     */\n    DomSharedStylesHost.prototype.ngOnDestroy = function () { this._styleNodes.forEach(function (styleNode) { return getDOM().remove(styleNode); }); };\n    return DomSharedStylesHost;\n}(SharedStylesHost));\nDomSharedStylesHost.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nDomSharedStylesHost.ctorParameters = function () { return [\n    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Inject\"], args: [DOCUMENT$1,] },] },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar NAMESPACE_URIS = {\n    'svg': 'http://www.w3.org/2000/svg',\n    'xhtml': 'http://www.w3.org/1999/xhtml',\n    'xlink': 'http://www.w3.org/1999/xlink',\n    'xml': 'http://www.w3.org/XML/1998/namespace',\n    'xmlns': 'http://www.w3.org/2000/xmlns/',\n};\nvar COMPONENT_REGEX = /%COMP%/g;\nvar COMPONENT_VARIABLE = '%COMP%';\nvar HOST_ATTR = \"_nghost-\" + COMPONENT_VARIABLE;\nvar CONTENT_ATTR = \"_ngcontent-\" + COMPONENT_VARIABLE;\n/**\n * @param {?} componentShortId\n * @return {?}\n */\nfunction shimContentAttribute(componentShortId) {\n    return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n/**\n * @param {?} componentShortId\n * @return {?}\n */\nfunction shimHostAttribute(componentShortId) {\n    return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n/**\n * @param {?} compId\n * @param {?} styles\n * @param {?} target\n * @return {?}\n */\nfunction flattenStyles(compId, styles, target) {\n    for (var /** @type {?} */ i = 0; i < styles.length; i++) {\n        var /** @type {?} */ style = styles[i];\n        if (Array.isArray(style)) {\n            flattenStyles(compId, style, target);\n        }\n        else {\n            style = style.replace(COMPONENT_REGEX, compId);\n            target.push(style);\n        }\n    }\n    return target;\n}\n/**\n * @param {?} eventHandler\n * @return {?}\n */\nfunction decoratePreventDefault(eventHandler) {\n    return function (event) {\n        var /** @type {?} */ allowDefaultBehavior = eventHandler(event);\n        if (allowDefaultBehavior === false) {\n            // TODO(tbosch): move preventDefault into event plugins...\n            event.preventDefault();\n            event.returnValue = false;\n        }\n    };\n}\nvar DomRendererFactory2 = (function () {\n    /**\n     * @param {?} eventManager\n     * @param {?} sharedStylesHost\n     */\n    function DomRendererFactory2(eventManager, sharedStylesHost) {\n        this.eventManager = eventManager;\n        this.sharedStylesHost = sharedStylesHost;\n        this.rendererByCompId = new Map();\n        this.defaultRenderer = new DefaultDomRenderer2(eventManager);\n    }\n    ;\n    /**\n     * @param {?} element\n     * @param {?} type\n     * @return {?}\n     */\n    DomRendererFactory2.prototype.createRenderer = function (element, type) {\n        if (!element || !type) {\n            return this.defaultRenderer;\n        }\n        switch (type.encapsulation) {\n            case __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ViewEncapsulation\"].Emulated: {\n                var /** @type {?} */ renderer = this.rendererByCompId.get(type.id);\n                if (!renderer) {\n                    renderer =\n                        new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type);\n                    this.rendererByCompId.set(type.id, renderer);\n                }\n                ((renderer)).applyToHost(element);\n                return renderer;\n            }\n            case __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ViewEncapsulation\"].Native:\n                return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);\n            default: {\n                if (!this.rendererByCompId.has(type.id)) {\n                    var /** @type {?} */ styles = flattenStyles(type.id, type.styles, []);\n                    this.sharedStylesHost.addStyles(styles);\n                    this.rendererByCompId.set(type.id, this.defaultRenderer);\n                }\n                return this.defaultRenderer;\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DomRendererFactory2.prototype.begin = function () { };\n    /**\n     * @return {?}\n     */\n    DomRendererFactory2.prototype.end = function () { };\n    return DomRendererFactory2;\n}());\nDomRendererFactory2.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nDomRendererFactory2.ctorParameters = function () { return [\n    { type: EventManager, },\n    { type: DomSharedStylesHost, },\n]; };\nvar DefaultDomRenderer2 = (function () {\n    /**\n     * @param {?} eventManager\n     */\n    function DefaultDomRenderer2(eventManager) {\n        this.eventManager = eventManager;\n        this.data = Object.create(null);\n    }\n    /**\n     * @return {?}\n     */\n    DefaultDomRenderer2.prototype.destroy = function () { };\n    /**\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    DefaultDomRenderer2.prototype.createElement = function (name, namespace) {\n        if (namespace) {\n            return document.createElementNS(NAMESPACE_URIS[namespace], name);\n        }\n        return document.createElement(name);\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DefaultDomRenderer2.prototype.createComment = function (value) { return document.createComment(value); };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DefaultDomRenderer2.prototype.createText = function (value) { return document.createTextNode(value); };\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @return {?}\n     */\n    DefaultDomRenderer2.prototype.appendChild = function (parent, newChild) { parent.appendChild(newChild); };\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @param {?} refChild\n     * @return {?}\n     */\n    DefaultDomRenderer2.prototype.insertBefore = function (parent, newChild, refChild) {\n        if (parent) {\n            parent.insertBefore(newChild, refChild);\n        }\n    };\n    /**\n     * @param {?} parent\n     * @param {?} oldChild\n     * @return {?}\n     */\n    DefaultDomRenderer2.prototype.removeChild = function (parent, oldChild) {\n        if (parent) {\n            parent.removeChild(oldChild);\n        }\n    };\n    /**\n     * @param {?} selectorOrNode\n     * @return {?}\n     */\n    DefaultDomRenderer2.prototype.selectRootElement = function (selectorOrNode) {\n        var /** @type {?} */ el = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) :\n            selectorOrNode;\n        if (!el) {\n            throw new Error(\"The selector \\\"\" + selectorOrNode + \"\\\" did not match any elements\");\n        }\n        el.textContent = '';\n        return el;\n    };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    DefaultDomRenderer2.prototype.parentNode = function (node) { return node.parentNode; };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    DefaultDomRenderer2.prototype.nextSibling = function (node) { return node.nextSibling; };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @param {?=} namespace\n     * @return {?}\n     */\n    DefaultDomRenderer2.prototype.setAttribute = function (el, name, value, namespace) {\n        if (namespace) {\n            name = namespace + \":\" + name;\n            var /** @type {?} */ namespaceUri = NAMESPACE_URIS[namespace];\n            if (namespaceUri) {\n                el.setAttributeNS(namespaceUri, name, value);\n            }\n            else {\n                el.setAttribute(name, value);\n            }\n        }\n        else {\n            el.setAttribute(name, value);\n        }\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    DefaultDomRenderer2.prototype.removeAttribute = function (el, name, namespace) {\n        if (namespace) {\n            var /** @type {?} */ namespaceUri = NAMESPACE_URIS[namespace];\n            if (namespaceUri) {\n                el.removeAttributeNS(namespaceUri, name);\n            }\n            else {\n                el.removeAttribute(namespace + \":\" + name);\n            }\n        }\n        else {\n            el.removeAttribute(name);\n        }\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    DefaultDomRenderer2.prototype.addClass = function (el, name) { el.classList.add(name); };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    DefaultDomRenderer2.prototype.removeClass = function (el, name) { el.classList.remove(name); };\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} value\n     * @param {?} flags\n     * @return {?}\n     */\n    DefaultDomRenderer2.prototype.setStyle = function (el, style, value, flags) {\n        if (flags & __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"RendererStyleFlags2\"].DashCase) {\n            el.style.setProperty(style, value, !!(flags & __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"RendererStyleFlags2\"].Important) ? 'important' : '');\n        }\n        else {\n            el.style[style] = value;\n        }\n    };\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} flags\n     * @return {?}\n     */\n    DefaultDomRenderer2.prototype.removeStyle = function (el, style, flags) {\n        if (flags & __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"RendererStyleFlags2\"].DashCase) {\n            el.style.removeProperty(style);\n        }\n        else {\n            // IE requires '' instead of null\n            // see https://github.com/angular/angular/issues/7916\n            el.style[style] = '';\n        }\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    DefaultDomRenderer2.prototype.setProperty = function (el, name, value) {\n        checkNoSyntheticProp(name, 'property');\n        el[name] = value;\n    };\n    /**\n     * @param {?} node\n     * @param {?} value\n     * @return {?}\n     */\n    DefaultDomRenderer2.prototype.setValue = function (node, value) { node.nodeValue = value; };\n    /**\n     * @param {?} target\n     * @param {?} event\n     * @param {?} callback\n     * @return {?}\n     */\n    DefaultDomRenderer2.prototype.listen = function (target, event, callback) {\n        checkNoSyntheticProp(event, 'listener');\n        if (typeof target === 'string') {\n            return (this.eventManager.addGlobalEventListener(target, event, decoratePreventDefault(callback)));\n        }\n        return ((this.eventManager.addEventListener(target, event, decoratePreventDefault(callback))));\n    };\n    return DefaultDomRenderer2;\n}());\nvar AT_CHARCODE = '@'.charCodeAt(0);\n/**\n * @param {?} name\n * @param {?} nameKind\n * @return {?}\n */\nfunction checkNoSyntheticProp(name, nameKind) {\n    if (name.charCodeAt(0) === AT_CHARCODE) {\n        throw new Error(\"Found the synthetic \" + nameKind + \" \" + name + \". Please include either \\\"BrowserAnimationsModule\\\" or \\\"NoopAnimationsModule\\\" in your application.\");\n    }\n}\nvar EmulatedEncapsulationDomRenderer2 = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](EmulatedEncapsulationDomRenderer2, _super);\n    /**\n     * @param {?} eventManager\n     * @param {?} sharedStylesHost\n     * @param {?} component\n     */\n    function EmulatedEncapsulationDomRenderer2(eventManager, sharedStylesHost, component) {\n        var _this = _super.call(this, eventManager) || this;\n        _this.component = component;\n        var styles = flattenStyles(component.id, component.styles, []);\n        sharedStylesHost.addStyles(styles);\n        _this.contentAttr = shimContentAttribute(component.id);\n        _this.hostAttr = shimHostAttribute(component.id);\n        return _this;\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    EmulatedEncapsulationDomRenderer2.prototype.applyToHost = function (element) { _super.prototype.setAttribute.call(this, element, this.hostAttr, ''); };\n    /**\n     * @param {?} parent\n     * @param {?} name\n     * @return {?}\n     */\n    EmulatedEncapsulationDomRenderer2.prototype.createElement = function (parent, name) {\n        var /** @type {?} */ el = _super.prototype.createElement.call(this, parent, name);\n        _super.prototype.setAttribute.call(this, el, this.contentAttr, '');\n        return el;\n    };\n    return EmulatedEncapsulationDomRenderer2;\n}(DefaultDomRenderer2));\nvar ShadowDomRenderer = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](ShadowDomRenderer, _super);\n    /**\n     * @param {?} eventManager\n     * @param {?} sharedStylesHost\n     * @param {?} hostEl\n     * @param {?} component\n     */\n    function ShadowDomRenderer(eventManager, sharedStylesHost, hostEl, component) {\n        var _this = _super.call(this, eventManager) || this;\n        _this.sharedStylesHost = sharedStylesHost;\n        _this.hostEl = hostEl;\n        _this.component = component;\n        _this.shadowRoot = hostEl.createShadowRoot();\n        _this.sharedStylesHost.addHost(_this.shadowRoot);\n        var styles = flattenStyles(component.id, component.styles, []);\n        for (var i = 0; i < styles.length; i++) {\n            var styleEl = document.createElement('style');\n            styleEl.textContent = styles[i];\n            _this.shadowRoot.appendChild(styleEl);\n        }\n        return _this;\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    ShadowDomRenderer.prototype.nodeOrShadowRoot = function (node) { return node === this.hostEl ? this.shadowRoot : node; };\n    /**\n     * @return {?}\n     */\n    ShadowDomRenderer.prototype.destroy = function () { this.sharedStylesHost.removeHost(this.shadowRoot); };\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @return {?}\n     */\n    ShadowDomRenderer.prototype.appendChild = function (parent, newChild) {\n        return _super.prototype.appendChild.call(this, this.nodeOrShadowRoot(parent), newChild);\n    };\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @param {?} refChild\n     * @return {?}\n     */\n    ShadowDomRenderer.prototype.insertBefore = function (parent, newChild, refChild) {\n        return _super.prototype.insertBefore.call(this, this.nodeOrShadowRoot(parent), newChild, refChild);\n    };\n    /**\n     * @param {?} parent\n     * @param {?} oldChild\n     * @return {?}\n     */\n    ShadowDomRenderer.prototype.removeChild = function (parent, oldChild) {\n        return _super.prototype.removeChild.call(this, this.nodeOrShadowRoot(parent), oldChild);\n    };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    ShadowDomRenderer.prototype.parentNode = function (node) {\n        return this.nodeOrShadowRoot(_super.prototype.parentNode.call(this, this.nodeOrShadowRoot(node)));\n    };\n    return ShadowDomRenderer;\n}(DefaultDomRenderer2));\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar DomEventsPlugin = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](DomEventsPlugin, _super);\n    /**\n     * @param {?} doc\n     */\n    function DomEventsPlugin(doc) {\n        return _super.call(this, doc) || this;\n    }\n    /**\n     * @param {?} eventName\n     * @return {?}\n     */\n    DomEventsPlugin.prototype.supports = function (eventName) { return true; };\n    /**\n     * @param {?} element\n     * @param {?} eventName\n     * @param {?} handler\n     * @return {?}\n     */\n    DomEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {\n        element.addEventListener(eventName, /** @type {?} */ (handler), false);\n        return function () { return element.removeEventListener(eventName, /** @type {?} */ (handler), false); };\n    };\n    return DomEventsPlugin;\n}(EventManagerPlugin));\nDomEventsPlugin.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nDomEventsPlugin.ctorParameters = function () { return [\n    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Inject\"], args: [DOCUMENT$1,] },] },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar EVENT_NAMES = {\n    // pan\n    'pan': true,\n    'panstart': true,\n    'panmove': true,\n    'panend': true,\n    'pancancel': true,\n    'panleft': true,\n    'panright': true,\n    'panup': true,\n    'pandown': true,\n    // pinch\n    'pinch': true,\n    'pinchstart': true,\n    'pinchmove': true,\n    'pinchend': true,\n    'pinchcancel': true,\n    'pinchin': true,\n    'pinchout': true,\n    // press\n    'press': true,\n    'pressup': true,\n    // rotate\n    'rotate': true,\n    'rotatestart': true,\n    'rotatemove': true,\n    'rotateend': true,\n    'rotatecancel': true,\n    // swipe\n    'swipe': true,\n    'swipeleft': true,\n    'swiperight': true,\n    'swipeup': true,\n    'swipedown': true,\n    // tap\n    'tap': true,\n};\n/**\n * A DI token that you can use to provide{\\@link HammerGestureConfig} to Angular. Use it to configure\n * Hammer gestures.\n *\n * \\@experimental\n */\nvar HAMMER_GESTURE_CONFIG = new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"InjectionToken\"]('HammerGestureConfig');\n/**\n * \\@experimental\n */\nvar HammerGestureConfig = (function () {\n    function HammerGestureConfig() {\n        this.events = [];\n        this.overrides = {};\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    HammerGestureConfig.prototype.buildHammer = function (element) {\n        var /** @type {?} */ mc = new Hammer(element);\n        mc.get('pinch').set({ enable: true });\n        mc.get('rotate').set({ enable: true });\n        for (var /** @type {?} */ eventName in this.overrides) {\n            mc.get(eventName).set(this.overrides[eventName]);\n        }\n        return mc;\n    };\n    return HammerGestureConfig;\n}());\nHammerGestureConfig.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nHammerGestureConfig.ctorParameters = function () { return []; };\nvar HammerGesturesPlugin = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](HammerGesturesPlugin, _super);\n    /**\n     * @param {?} doc\n     * @param {?} _config\n     */\n    function HammerGesturesPlugin(doc, _config) {\n        var _this = _super.call(this, doc) || this;\n        _this._config = _config;\n        return _this;\n    }\n    /**\n     * @param {?} eventName\n     * @return {?}\n     */\n    HammerGesturesPlugin.prototype.supports = function (eventName) {\n        if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\n            return false;\n        }\n        if (!((window)).Hammer) {\n            throw new Error(\"Hammer.js is not loaded, can not bind \" + eventName + \" event\");\n        }\n        return true;\n    };\n    /**\n     * @param {?} element\n     * @param {?} eventName\n     * @param {?} handler\n     * @return {?}\n     */\n    HammerGesturesPlugin.prototype.addEventListener = function (element, eventName, handler) {\n        var _this = this;\n        var /** @type {?} */ zone = this.manager.getZone();\n        eventName = eventName.toLowerCase();\n        return zone.runOutsideAngular(function () {\n            // Creating the manager bind events, must be done outside of angular\n            var /** @type {?} */ mc = _this._config.buildHammer(element);\n            var /** @type {?} */ callback = function (eventObj) {\n                zone.runGuarded(function () { handler(eventObj); });\n            };\n            mc.on(eventName, callback);\n            return function () { return mc.off(eventName, callback); };\n        });\n    };\n    /**\n     * @param {?} eventName\n     * @return {?}\n     */\n    HammerGesturesPlugin.prototype.isCustomEvent = function (eventName) { return this._config.events.indexOf(eventName) > -1; };\n    return HammerGesturesPlugin;\n}(EventManagerPlugin));\nHammerGesturesPlugin.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nHammerGesturesPlugin.ctorParameters = function () { return [\n    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Inject\"], args: [DOCUMENT$1,] },] },\n    { type: HammerGestureConfig, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Inject\"], args: [HAMMER_GESTURE_CONFIG,] },] },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\nvar MODIFIER_KEY_GETTERS = {\n    'alt': function (event) { return event.altKey; },\n    'control': function (event) { return event.ctrlKey; },\n    'meta': function (event) { return event.metaKey; },\n    'shift': function (event) { return event.shiftKey; }\n};\n/**\n * \\@experimental\n */\nvar KeyEventsPlugin = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](KeyEventsPlugin, _super);\n    /**\n     * @param {?} doc\n     */\n    function KeyEventsPlugin(doc) {\n        return _super.call(this, doc) || this;\n    }\n    /**\n     * @param {?} eventName\n     * @return {?}\n     */\n    KeyEventsPlugin.prototype.supports = function (eventName) { return KeyEventsPlugin.parseEventName(eventName) != null; };\n    /**\n     * @param {?} element\n     * @param {?} eventName\n     * @param {?} handler\n     * @return {?}\n     */\n    KeyEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {\n        var /** @type {?} */ parsedEvent = ((KeyEventsPlugin.parseEventName(eventName)));\n        var /** @type {?} */ outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());\n        return this.manager.getZone().runOutsideAngular(function () {\n            return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);\n        });\n    };\n    /**\n     * @param {?} eventName\n     * @return {?}\n     */\n    KeyEventsPlugin.parseEventName = function (eventName) {\n        var /** @type {?} */ parts = eventName.toLowerCase().split('.');\n        var /** @type {?} */ domEventName = parts.shift();\n        if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {\n            return null;\n        }\n        var /** @type {?} */ key = KeyEventsPlugin._normalizeKey(/** @type {?} */ ((parts.pop())));\n        var /** @type {?} */ fullKey = '';\n        MODIFIER_KEYS.forEach(function (modifierName) {\n            var /** @type {?} */ index = parts.indexOf(modifierName);\n            if (index > -1) {\n                parts.splice(index, 1);\n                fullKey += modifierName + '.';\n            }\n        });\n        fullKey += key;\n        if (parts.length != 0 || key.length === 0) {\n            // returning null instead of throwing to let another plugin process the event\n            return null;\n        }\n        var /** @type {?} */ result = {};\n        result['domEventName'] = domEventName;\n        result['fullKey'] = fullKey;\n        return result;\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    KeyEventsPlugin.getEventFullKey = function (event) {\n        var /** @type {?} */ fullKey = '';\n        var /** @type {?} */ key = getDOM().getEventKey(event);\n        key = key.toLowerCase();\n        if (key === ' ') {\n            key = 'space'; // for readability\n        }\n        else if (key === '.') {\n            key = 'dot'; // because '.' is used as a separator in event names\n        }\n        MODIFIER_KEYS.forEach(function (modifierName) {\n            if (modifierName != key) {\n                var /** @type {?} */ modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\n                if (modifierGetter(event)) {\n                    fullKey += modifierName + '.';\n                }\n            }\n        });\n        fullKey += key;\n        return fullKey;\n    };\n    /**\n     * @param {?} fullKey\n     * @param {?} handler\n     * @param {?} zone\n     * @return {?}\n     */\n    KeyEventsPlugin.eventCallback = function (fullKey, handler, zone) {\n        return function (event /** TODO #9100 */) {\n            if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {\n                zone.runGuarded(function () { return handler(event); });\n            }\n        };\n    };\n    /**\n     * \\@internal\n     * @param {?} keyName\n     * @return {?}\n     */\n    KeyEventsPlugin._normalizeKey = function (keyName) {\n        // TODO: switch to a Map if the mapping grows too much\n        switch (keyName) {\n            case 'esc':\n                return 'escape';\n            default:\n                return keyName;\n        }\n    };\n    return KeyEventsPlugin;\n}(EventManagerPlugin));\nKeyEventsPlugin.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nKeyEventsPlugin.ctorParameters = function () { return [\n    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Inject\"], args: [DOCUMENT$1,] },] },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A pattern that recognizes a commonly useful subset of URLs that are safe.\n *\n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if (comment from here on and regex copied from\n * Soy's EscapingConventions):\n * (1) Either a protocol in a whitelist (http, https, mailto or ftp).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n *\n * The pattern disallows &, used in HTML entity declarations before\n * one of the characters in [/?#]. This disallows HTML entities used in the\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n * It also disallows HTML entities in the first path part of a relative path,\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n * that. More importantly, it disallows masking of a colon,\n * e.g. \"javascript&#58;...\".\n *\n * This regular expression was taken from the Closure sanitization library.\n */\nvar SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n/**\n * A pattern that matches safe data URLs. Only matches image, video and audio types.\n */\nvar DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\\/]+=*$/i;\n/**\n * @param {?} url\n * @return {?}\n */\nfunction sanitizeUrl(url) {\n    url = String(url);\n    if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))\n        return url;\n    if (Object(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"isDevMode\"])()) {\n        getDOM().log(\"WARNING: sanitizing unsafe URL value \" + url + \" (see http://g.co/ng/security#xss)\");\n    }\n    return 'unsafe:' + url;\n}\n/**\n * @param {?} srcset\n * @return {?}\n */\nfunction sanitizeSrcset(srcset) {\n    srcset = String(srcset);\n    return srcset.split(',').map(function (srcset) { return sanitizeUrl(srcset.trim()); }).join(', ');\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A <body> element that can be safely used to parse untrusted HTML. Lazily initialized below.\n */\nvar inertElement = null;\n/**\n * Lazily initialized to make sure the DOM adapter gets set before use.\n */\nvar DOM = null;\n/**\n * Returns an HTML element that is guaranteed to not execute code when creating elements in it.\n * @return {?}\n */\nfunction getInertElement() {\n    if (inertElement)\n        return inertElement;\n    DOM = getDOM();\n    // Prefer using <template> element if supported.\n    var /** @type {?} */ templateEl = DOM.createElement('template');\n    if ('content' in templateEl)\n        return templateEl;\n    var /** @type {?} */ doc = DOM.createHtmlDocument();\n    inertElement = DOM.querySelector(doc, 'body');\n    if (inertElement == null) {\n        // usually there should be only one body element in the document, but IE doesn't have any, so we\n        // need to create one.\n        var /** @type {?} */ html = DOM.createElement('html', doc);\n        inertElement = DOM.createElement('body', doc);\n        DOM.appendChild(html, inertElement);\n        DOM.appendChild(doc, html);\n    }\n    return inertElement;\n}\n/**\n * @param {?} tags\n * @return {?}\n */\nfunction tagSet(tags) {\n    var /** @type {?} */ res = {};\n    for (var _i = 0, _a = tags.split(','); _i < _a.length; _i++) {\n        var t = _a[_i];\n        res[t] = true;\n    }\n    return res;\n}\n/**\n * @param {...?} sets\n * @return {?}\n */\nfunction merge() {\n    var sets = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        sets[_i] = arguments[_i];\n    }\n    var /** @type {?} */ res = {};\n    for (var _a = 0, sets_1 = sets; _a < sets_1.length; _a++) {\n        var s = sets_1[_a];\n        for (var /** @type {?} */ v in s) {\n            if (s.hasOwnProperty(v))\n                res[v] = true;\n        }\n    }\n    return res;\n}\n// Good source of info about elements and attributes\n// http://dev.w3.org/html5/spec/Overview.html#semantics\n// http://simon.html5.org/html-elements\n// Safe Void Elements - HTML5\n// http://dev.w3.org/html5/spec/Overview.html#void-elements\nvar VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n// Elements that you can, intentionally, leave open (and which close themselves)\n// http://dev.w3.org/html5/spec/Overview.html#optional-tags\nvar OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\nvar OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\nvar OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n// Safe Block Elements - HTML5\nvar BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +\n    'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n    'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n// Inline Elements - HTML5\nvar INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +\n    'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\n    'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\nvar VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n// Attributes that have href and hence need to be sanitized\nvar URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\n// Attributes that have special href set hence need to be sanitized\nvar SRCSET_ATTRS = tagSet('srcset');\nvar HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\n    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\n    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\n    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +\n    'valign,value,vspace,width');\n// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n// innerHTML is required, SVG attributes should be added here.\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\n// are left out here.\nvar VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);\n/**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nvar SanitizingHtmlSerializer = (function () {\n    function SanitizingHtmlSerializer() {\n        this.sanitizedSomething = false;\n        this.buf = [];\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    SanitizingHtmlSerializer.prototype.sanitizeChildren = function (el) {\n        // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n        // However this code never accesses properties off of `document` before deleting its contents\n        // again, so it shouldn't be vulnerable to DOM clobbering.\n        var /** @type {?} */ current = ((el.firstChild));\n        while (current) {\n            if (DOM.isElementNode(current)) {\n                this.startElement(/** @type {?} */ (current));\n            }\n            else if (DOM.isTextNode(current)) {\n                this.chars(/** @type {?} */ ((DOM.nodeValue(current))));\n            }\n            else {\n                // Strip non-element, non-text nodes.\n                this.sanitizedSomething = true;\n            }\n            if (DOM.firstChild(current)) {\n                current = ((DOM.firstChild(current)));\n                continue;\n            }\n            while (current) {\n                // Leaving the element. Walk up and to the right, closing tags as we go.\n                if (DOM.isElementNode(current)) {\n                    this.endElement(/** @type {?} */ (current));\n                }\n                var /** @type {?} */ next = checkClobberedElement(current, /** @type {?} */ ((DOM.nextSibling(current))));\n                if (next) {\n                    current = next;\n                    break;\n                }\n                current = checkClobberedElement(current, /** @type {?} */ ((DOM.parentElement(current))));\n            }\n        }\n        return this.buf.join('');\n    };\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    SanitizingHtmlSerializer.prototype.startElement = function (element) {\n        var _this = this;\n        var /** @type {?} */ tagName = DOM.nodeName(element).toLowerCase();\n        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.sanitizedSomething = true;\n            return;\n        }\n        this.buf.push('<');\n        this.buf.push(tagName);\n        DOM.attributeMap(element).forEach(function (value, attrName) {\n            var /** @type {?} */ lower = attrName.toLowerCase();\n            if (!VALID_ATTRS.hasOwnProperty(lower)) {\n                _this.sanitizedSomething = true;\n                return;\n            }\n            // TODO(martinprobst): Special case image URIs for data:image/...\n            if (URI_ATTRS[lower])\n                value = sanitizeUrl(value);\n            if (SRCSET_ATTRS[lower])\n                value = sanitizeSrcset(value);\n            _this.buf.push(' ');\n            _this.buf.push(attrName);\n            _this.buf.push('=\"');\n            _this.buf.push(encodeEntities(value));\n            _this.buf.push('\"');\n        });\n        this.buf.push('>');\n    };\n    /**\n     * @param {?} current\n     * @return {?}\n     */\n    SanitizingHtmlSerializer.prototype.endElement = function (current) {\n        var /** @type {?} */ tagName = DOM.nodeName(current).toLowerCase();\n        if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.buf.push('<\/');\n            this.buf.push(tagName);\n            this.buf.push('>');\n        }\n    };\n    /**\n     * @param {?} chars\n     * @return {?}\n     */\n    SanitizingHtmlSerializer.prototype.chars = function (chars) { this.buf.push(encodeEntities(chars)); };\n    return SanitizingHtmlSerializer;\n}());\n/**\n * @param {?} node\n * @param {?} nextNode\n * @return {?}\n */\nfunction checkClobberedElement(node, nextNode) {\n    if (nextNode && DOM.contains(node, nextNode)) {\n        throw new Error(\"Failed to sanitize html because the element is clobbered: \" + DOM.getOuterHTML(node));\n    }\n    return nextNode;\n}\n// Regular Expressions for parsing tags and attributes\nvar SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n// ! to ~ is the ASCII range.\nvar NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param {?} value\n * @return {?}\n */\nfunction encodeEntities(value) {\n    return value.replace(/&/g, '&amp;')\n        .replace(SURROGATE_PAIR_REGEXP, function (match) {\n        var /** @type {?} */ hi = match.charCodeAt(0);\n        var /** @type {?} */ low = match.charCodeAt(1);\n        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n    })\n        .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })\n        .replace(/<\/g, '&lt;')\n        .replace(/>/g, '&gt;');\n}\n/**\n * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo').\n *\n * This is undesirable since we don't want to allow any of these custom attributes. This method\n * strips them all.\n * @param {?} el\n * @return {?}\n */\nfunction stripCustomNsAttrs(el) {\n    DOM.attributeMap(el).forEach(function (_, attrName) {\n        if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {\n            DOM.removeAttribute(el, attrName);\n        }\n    });\n    for (var _i = 0, _a = DOM.childNodesAsList(el); _i < _a.length; _i++) {\n        var n = _a[_i];\n        if (DOM.isElementNode(n))\n            stripCustomNsAttrs(/** @type {?} */ (n));\n    }\n}\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n * @param {?} defaultDoc\n * @param {?} unsafeHtmlInput\n * @return {?}\n */\nfunction sanitizeHtml(defaultDoc, unsafeHtmlInput) {\n    try {\n        var /** @type {?} */ containerEl = getInertElement();\n        // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n        var /** @type {?} */ unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n        // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n        // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n        var /** @type {?} */ mXSSAttempts = 5;\n        var /** @type {?} */ parsedHtml = unsafeHtml;\n        do {\n            if (mXSSAttempts === 0) {\n                throw new Error('Failed to sanitize html because the input is unstable');\n            }\n            mXSSAttempts--;\n            unsafeHtml = parsedHtml;\n            DOM.setInnerHTML(containerEl, unsafeHtml);\n            if (defaultDoc.documentMode) {\n                // strip custom-namespaced attributes on IE<=11\n                stripCustomNsAttrs(containerEl);\n            }\n            parsedHtml = DOM.getInnerHTML(containerEl);\n        } while (unsafeHtml !== parsedHtml);\n        var /** @type {?} */ sanitizer = new SanitizingHtmlSerializer();\n        var /** @type {?} */ safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl) || containerEl);\n        // Clear out the body element.\n        var /** @type {?} */ parent = DOM.getTemplateContent(containerEl) || containerEl;\n        for (var _i = 0, _a = DOM.childNodesAsList(parent); _i < _a.length; _i++) {\n            var child = _a[_i];\n            DOM.removeChild(parent, child);\n        }\n        if (Object(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"isDevMode\"])() && sanitizer.sanitizedSomething) {\n            DOM.log('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');\n        }\n        return safeHtml;\n    }\n    catch (e) {\n        // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n        inertElement = null;\n        throw e;\n    }\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Regular expression for safe style values.\n *\n * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.\n *\n * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or\n * font-family) and hence could allow multiple values to get injected, but that should pose no risk\n * of XSS.\n *\n * The function expression checks only for XSS safety, not for CSS validity.\n *\n * This regular expression was taken from the Closure sanitization library, and augmented for\n * transformation values.\n */\nvar VALUES = '[-,.\"\\'%_!# a-zA-Z0-9]+';\nvar TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';\nvar COLOR_FNS = '(?:rgb|hsl)a?';\nvar GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';\nvar CSS3_FNS = '(?:calc|attr)';\nvar FN_ARGS = '\\\\([-0-9.%, #a-zA-Z]+\\\\)';\nvar SAFE_STYLE_VALUE = new RegExp(\"^(\" + VALUES + \"|\" +\n    (\"(?:\" + TRANSFORMATION_FNS + \"|\" + COLOR_FNS + \"|\" + GRADIENTS + \"|\" + CSS3_FNS + \")\") +\n    (FN_ARGS + \")$\"), 'g');\n/**\n * Matches a `url(...)` value with an arbitrary argument as long as it does\n * not contain parentheses.\n *\n * The URL value still needs to be sanitized separately.\n *\n * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted\n * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.\n * by observing whether scroll bars are displayed, or character ranges used by a font face\n * definition.\n *\n * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that\n * binding a URL value without further cooperation from the page will cause an information leak, and\n * if so, it is just a leak, not a full blown XSS vulnerability.\n *\n * Given the common use case, low likelihood of attack vector, and low impact of an attack, this\n * code is permissive and allows URLs that sanitize otherwise.\n */\nvar URL_RE = /^url\\(([^)]+)\\)$/;\n/**\n * Checks that quotes (\" and ') are properly balanced inside a string. Assumes\n * that neither escape (\\) nor any other character that could result in\n * breaking out of a string parsing context are allowed;\n * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\n *\n * This code was taken from the Closure sanitization library.\n * @param {?} value\n * @return {?}\n */\nfunction hasBalancedQuotes(value) {\n    var /** @type {?} */ outsideSingle = true;\n    var /** @type {?} */ outsideDouble = true;\n    for (var /** @type {?} */ i = 0; i < value.length; i++) {\n        var /** @type {?} */ c = value.charAt(i);\n        if (c === '\\'' && outsideDouble) {\n            outsideSingle = !outsideSingle;\n        }\n        else if (c === '\"' && outsideSingle) {\n            outsideDouble = !outsideDouble;\n        }\n    }\n    return outsideSingle && outsideDouble;\n}\n/**\n * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single\n * value) and returns a value that is safe to use in a browser environment.\n * @param {?} value\n * @return {?}\n */\nfunction sanitizeStyle(value) {\n    value = String(value).trim(); // Make sure it's actually a string.\n    if (!value)\n        return '';\n    // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for\n    // reasoning behind this.\n    var /** @type {?} */ urlMatch = value.match(URL_RE);\n    if ((urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||\n        value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {\n        return value; // Safe style values.\n    }\n    if (Object(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"isDevMode\"])()) {\n        getDOM().log(\"WARNING: sanitizing unsafe style value \" + value + \" (see http://g.co/ng/security#xss).\");\n    }\n    return 'unsafe';\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n *\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n *\n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n *\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n *\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n *\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n *\n * \\@security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](http://g.co/ng/security).\n *\n * \\@stable\n * @abstract\n */\nvar DomSanitizer = (function () {\n    function DomSanitizer() {\n    }\n    /**\n     * Sanitizes a value for use in the given SecurityContext.\n     *\n     * If value is trusted for the context, this method will unwrap the contained safe value and use\n     * it directly. Otherwise, value will be sanitized to be safe in the given context, for example\n     * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation\n     * is responsible to make sure that the value can definitely be safely used in the given context.\n     * @abstract\n     * @param {?} context\n     * @param {?} value\n     * @return {?}\n     */\n    DomSanitizer.prototype.sanitize = function (context, value) { };\n    /**\n     * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\n     * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will\n     * leave safe HTML intact, so in most situations this method should not be used.\n     *\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n     * security risks!\n     * @abstract\n     * @param {?} value\n     * @return {?}\n     */\n    DomSanitizer.prototype.bypassSecurityTrustHtml = function (value) { };\n    /**\n     * Bypass security and trust the given value to be safe style value (CSS).\n     *\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n     * security risks!\n     * @abstract\n     * @param {?} value\n     * @return {?}\n     */\n    DomSanitizer.prototype.bypassSecurityTrustStyle = function (value) { };\n    /**\n     * Bypass security and trust the given value to be safe JavaScript.\n     *\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n     * security risks!\n     * @abstract\n     * @param {?} value\n     * @return {?}\n     */\n    DomSanitizer.prototype.bypassSecurityTrustScript = function (value) { };\n    /**\n     * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\n     * in hyperlinks or `<img src>`.\n     *\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n     * security risks!\n     * @abstract\n     * @param {?} value\n     * @return {?}\n     */\n    DomSanitizer.prototype.bypassSecurityTrustUrl = function (value) { };\n    /**\n     * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\n     * be used to load executable code from, like `<script src>`, or `<iframe src>`.\n     *\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n     * security risks!\n     * @abstract\n     * @param {?} value\n     * @return {?}\n     */\n    DomSanitizer.prototype.bypassSecurityTrustResourceUrl = function (value) { };\n    return DomSanitizer;\n}());\nvar DomSanitizerImpl = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](DomSanitizerImpl, _super);\n    /**\n     * @param {?} _doc\n     */\n    function DomSanitizerImpl(_doc) {\n        var _this = _super.call(this) || this;\n        _this._doc = _doc;\n        return _this;\n    }\n    /**\n     * @param {?} ctx\n     * @param {?} value\n     * @return {?}\n     */\n    DomSanitizerImpl.prototype.sanitize = function (ctx, value) {\n        if (value == null)\n            return null;\n        switch (ctx) {\n            case __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"SecurityContext\"].NONE:\n                return (value);\n            case __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"SecurityContext\"].HTML:\n                if (value instanceof SafeHtmlImpl)\n                    return value.changingThisBreaksApplicationSecurity;\n                this.checkNotSafeValue(value, 'HTML');\n                return sanitizeHtml(this._doc, String(value));\n            case __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"SecurityContext\"].STYLE:\n                if (value instanceof SafeStyleImpl)\n                    return value.changingThisBreaksApplicationSecurity;\n                this.checkNotSafeValue(value, 'Style');\n                return sanitizeStyle(/** @type {?} */ (value));\n            case __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"SecurityContext\"].SCRIPT:\n                if (value instanceof SafeScriptImpl)\n                    return value.changingThisBreaksApplicationSecurity;\n                this.checkNotSafeValue(value, 'Script');\n                throw new Error('unsafe value used in a script context');\n            case __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"SecurityContext\"].URL:\n                if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {\n                    // Allow resource URLs in URL contexts, they are strictly more trusted.\n                    return value.changingThisBreaksApplicationSecurity;\n                }\n                this.checkNotSafeValue(value, 'URL');\n                return sanitizeUrl(String(value));\n            case __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"SecurityContext\"].RESOURCE_URL:\n                if (value instanceof SafeResourceUrlImpl) {\n                    return value.changingThisBreaksApplicationSecurity;\n                }\n                this.checkNotSafeValue(value, 'ResourceURL');\n                throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n            default:\n                throw new Error(\"Unexpected SecurityContext \" + ctx + \" (see http://g.co/ng/security#xss)\");\n        }\n    };\n    /**\n     * @param {?} value\n     * @param {?} expectedType\n     * @return {?}\n     */\n    DomSanitizerImpl.prototype.checkNotSafeValue = function (value, expectedType) {\n        if (value instanceof SafeValueImpl) {\n            throw new Error(\"Required a safe \" + expectedType + \", got a \" + value.getTypeName() + \" \" +\n                \"(see http://g.co/ng/security#xss)\");\n        }\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DomSanitizerImpl.prototype.bypassSecurityTrustHtml = function (value) { return new SafeHtmlImpl(value); };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DomSanitizerImpl.prototype.bypassSecurityTrustStyle = function (value) { return new SafeStyleImpl(value); };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DomSanitizerImpl.prototype.bypassSecurityTrustScript = function (value) { return new SafeScriptImpl(value); };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DomSanitizerImpl.prototype.bypassSecurityTrustUrl = function (value) { return new SafeUrlImpl(value); };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DomSanitizerImpl.prototype.bypassSecurityTrustResourceUrl = function (value) {\n        return new SafeResourceUrlImpl(value);\n    };\n    return DomSanitizerImpl;\n}(DomSanitizer));\nDomSanitizerImpl.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nDomSanitizerImpl.ctorParameters = function () { return [\n    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Inject\"], args: [DOCUMENT$1,] },] },\n]; };\n/**\n * @abstract\n */\nvar SafeValueImpl = (function () {\n    /**\n     * @param {?} changingThisBreaksApplicationSecurity\n     */\n    function SafeValueImpl(changingThisBreaksApplicationSecurity) {\n        this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;\n        // empty\n    }\n    /**\n     * @abstract\n     * @return {?}\n     */\n    SafeValueImpl.prototype.getTypeName = function () { };\n    /**\n     * @return {?}\n     */\n    SafeValueImpl.prototype.toString = function () {\n        return \"SafeValue must use [property]=binding: \" + this.changingThisBreaksApplicationSecurity +\n            \" (see http://g.co/ng/security#xss)\";\n    };\n    return SafeValueImpl;\n}());\nvar SafeHtmlImpl = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](SafeHtmlImpl, _super);\n    function SafeHtmlImpl() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @return {?}\n     */\n    SafeHtmlImpl.prototype.getTypeName = function () { return 'HTML'; };\n    return SafeHtmlImpl;\n}(SafeValueImpl));\nvar SafeStyleImpl = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](SafeStyleImpl, _super);\n    function SafeStyleImpl() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @return {?}\n     */\n    SafeStyleImpl.prototype.getTypeName = function () { return 'Style'; };\n    return SafeStyleImpl;\n}(SafeValueImpl));\nvar SafeScriptImpl = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](SafeScriptImpl, _super);\n    function SafeScriptImpl() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @return {?}\n     */\n    SafeScriptImpl.prototype.getTypeName = function () { return 'Script'; };\n    return SafeScriptImpl;\n}(SafeValueImpl));\nvar SafeUrlImpl = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](SafeUrlImpl, _super);\n    function SafeUrlImpl() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @return {?}\n     */\n    SafeUrlImpl.prototype.getTypeName = function () { return 'URL'; };\n    return SafeUrlImpl;\n}(SafeValueImpl));\nvar SafeResourceUrlImpl = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](SafeResourceUrlImpl, _super);\n    function SafeResourceUrlImpl() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @return {?}\n     */\n    SafeResourceUrlImpl.prototype.getTypeName = function () { return 'ResourceURL'; };\n    return SafeResourceUrlImpl;\n}(SafeValueImpl));\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar INTERNAL_BROWSER_PLATFORM_PROVIDERS = [\n    { provide: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"PLATFORM_ID\"], useValue: __WEBPACK_IMPORTED_MODULE_1__angular_common__[\"ɵPLATFORM_BROWSER_ID\"] },\n    { provide: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"PLATFORM_INITIALIZER\"], useValue: initDomAdapter, multi: true },\n    { provide: __WEBPACK_IMPORTED_MODULE_1__angular_common__[\"PlatformLocation\"], useClass: BrowserPlatformLocation },\n    { provide: DOCUMENT$1, useFactory: _document, deps: [] },\n];\n/**\n * \\@security Replacing built-in sanitization providers exposes the application to XSS risks.\n * Attacker-controlled data introduced by an unsanitized provider could expose your\n * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).\n * \\@experimental\n */\nvar BROWSER_SANITIZATION_PROVIDERS = [\n    { provide: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Sanitizer\"], useExisting: DomSanitizer },\n    { provide: DomSanitizer, useClass: DomSanitizerImpl },\n];\n/**\n * \\@stable\n */\nvar platformBrowser = Object(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"createPlatformFactory\"])(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"platformCore\"], 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\n/**\n * @return {?}\n */\nfunction initDomAdapter() {\n    BrowserDomAdapter.makeCurrent();\n    BrowserGetTestability.init();\n}\n/**\n * @return {?}\n */\nfunction errorHandler() {\n    return new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ErrorHandler\"]();\n}\n/**\n * @return {?}\n */\nfunction _document() {\n    return document;\n}\n/**\n * The ng module for the browser.\n *\n * \\@stable\n */\nvar BrowserModule = (function () {\n    /**\n     * @param {?} parentModule\n     */\n    function BrowserModule(parentModule) {\n        if (parentModule) {\n            throw new Error(\"BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.\");\n        }\n    }\n    /**\n     * Configures a browser-based application to transition from a server-rendered app, if\n     * one is present on the page. The specified parameters must include an application id,\n     * which must match between the client and server applications.\n     *\n     * \\@experimental\n     * @param {?} params\n     * @return {?}\n     */\n    BrowserModule.withServerTransition = function (params) {\n        return {\n            ngModule: BrowserModule,\n            providers: [\n                { provide: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"APP_ID\"], useValue: params.appId },\n                { provide: TRANSITION_ID, useExisting: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"APP_ID\"] },\n                SERVER_TRANSITION_PROVIDERS,\n            ],\n        };\n    };\n    return BrowserModule;\n}());\nBrowserModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"NgModule\"], args: [{\n                providers: [\n                    BROWSER_SANITIZATION_PROVIDERS,\n                    { provide: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ErrorHandler\"], useFactory: errorHandler, deps: [] },\n                    { provide: EVENT_MANAGER_PLUGINS, useClass: DomEventsPlugin, multi: true },\n                    { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true },\n                    { provide: EVENT_MANAGER_PLUGINS, useClass: HammerGesturesPlugin, multi: true },\n                    { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig },\n                    DomRendererFactory2,\n                    { provide: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"RendererFactory2\"], useExisting: DomRendererFactory2 },\n                    { provide: SharedStylesHost, useExisting: DomSharedStylesHost },\n                    DomSharedStylesHost,\n                    __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Testability\"],\n                    EventManager,\n                    ELEMENT_PROBE_PROVIDERS,\n                    Meta,\n                    Title,\n                ],\n                exports: [__WEBPACK_IMPORTED_MODULE_1__angular_common__[\"CommonModule\"], __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ApplicationModule\"]]\n            },] },\n];\n/**\n * @nocollapse\n */\nBrowserModule.ctorParameters = function () { return [\n    { type: BrowserModule, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"SkipSelf\"] },] },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar win = typeof window !== 'undefined' && window || {};\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ChangeDetectionPerfRecord = (function () {\n    /**\n     * @param {?} msPerTick\n     * @param {?} numTicks\n     */\n    function ChangeDetectionPerfRecord(msPerTick, numTicks) {\n        this.msPerTick = msPerTick;\n        this.numTicks = numTicks;\n    }\n    return ChangeDetectionPerfRecord;\n}());\n/**\n * Entry point for all Angular profiling-related debug tools. This object\n * corresponds to the `ng.profiler` in the dev console.\n */\nvar AngularProfiler = (function () {\n    /**\n     * @param {?} ref\n     */\n    function AngularProfiler(ref) {\n        this.appRef = ref.injector.get(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ApplicationRef\"]);\n    }\n    /**\n     * Exercises change detection in a loop and then prints the average amount of\n     * time in milliseconds how long a single round of change detection takes for\n     * the current state of the UI. It runs a minimum of 5 rounds for a minimum\n     * of 500 milliseconds.\n     *\n     * Optionally, a user may pass a `config` parameter containing a map of\n     * options. Supported options are:\n     *\n     * `record` (boolean) - causes the profiler to record a CPU profile while\n     * it exercises the change detector. Example:\n     *\n     * ```\n     * ng.profiler.timeChangeDetection({record: true})\n     * ```\n     * @param {?} config\n     * @return {?}\n     */\n    AngularProfiler.prototype.timeChangeDetection = function (config) {\n        var /** @type {?} */ record = config && config['record'];\n        var /** @type {?} */ profileName = 'Change Detection';\n        // Profiler is not available in Android browsers, nor in IE 9 without dev tools opened\n        var /** @type {?} */ isProfilerAvailable = win.console.profile != null;\n        if (record && isProfilerAvailable) {\n            win.console.profile(profileName);\n        }\n        var /** @type {?} */ start = getDOM().performanceNow();\n        var /** @type {?} */ numTicks = 0;\n        while (numTicks < 5 || (getDOM().performanceNow() - start) < 500) {\n            this.appRef.tick();\n            numTicks++;\n        }\n        var /** @type {?} */ end = getDOM().performanceNow();\n        if (record && isProfilerAvailable) {\n            // need to cast to <any> because type checker thinks there's no argument\n            // while in fact there is:\n            //\n            // https://developer.mozilla.org/en-US/docs/Web/API/Console/profileEnd\n            ((win.console.profileEnd))(profileName);\n        }\n        var /** @type {?} */ msPerTick = (end - start) / numTicks;\n        win.console.log(\"ran \" + numTicks + \" change detection cycles\");\n        win.console.log(msPerTick.toFixed(2) + \" ms per check\");\n        return new ChangeDetectionPerfRecord(msPerTick, numTicks);\n    };\n    return AngularProfiler;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar PROFILER_GLOBAL_NAME = 'profiler';\n/**\n * Enabled Angular debug tools that are accessible via your browser's\n * developer console.\n *\n * Usage:\n *\n * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)\n * 1. Type `ng.` (usually the console will show auto-complete suggestion)\n * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`\n *    then hit Enter.\n *\n * \\@experimental All debugging apis are currently experimental.\n * @template T\n * @param {?} ref\n * @return {?}\n */\nfunction enableDebugTools(ref) {\n    exportNgVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));\n    return ref;\n}\n/**\n * Disables Angular tools.\n *\n * \\@experimental All debugging apis are currently experimental.\n * @return {?}\n */\nfunction disableDebugTools() {\n    exportNgVar(PROFILER_GLOBAL_NAME, null);\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Predicates for use with {\\@link DebugElement}'s query functions.\n *\n * \\@experimental All debugging apis are currently experimental.\n */\nvar By = (function () {\n    function By() {\n    }\n    /**\n     * Match all elements.\n     *\n     * ## Example\n     *\n     * {\\@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}\n     * @return {?}\n     */\n    By.all = function () { return function (debugElement) { return true; }; };\n    /**\n     * Match elements by the given CSS selector.\n     *\n     * ## Example\n     *\n     * {\\@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}\n     * @param {?} selector\n     * @return {?}\n     */\n    By.css = function (selector) {\n        return function (debugElement) {\n            return debugElement.nativeElement != null ?\n                getDOM().elementMatches(debugElement.nativeElement, selector) :\n                false;\n        };\n    };\n    /**\n     * Match elements that have the given directive present.\n     *\n     * ## Example\n     *\n     * {\\@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}\n     * @param {?} type\n     * @return {?}\n     */\n    By.directive = function (type) {\n        return function (debugElement) { return ((debugElement.providerTokens)).indexOf(type) !== -1; };\n    };\n    return By;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n/**\n * \\@stable\n */\nvar VERSION = new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Version\"]('4.3.5');\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the platform-browser package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n/**\n * Generated bundle index. Do not edit.\n */\n\n//# sourceMappingURL=platform-browser.es5.js.map\n\n\n/***/ }),\n\n/***/ \"../../../platform-browser/@angular/platform-browser/animations.es5.js\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return BrowserAnimationsModule; });\n/* unused harmony export NoopAnimationsModule */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return BrowserAnimationBuilder; });\n/* unused harmony export ɵBrowserAnimationFactory */\n/* unused harmony export ɵAnimationRenderer */\n/* unused harmony export ɵAnimationRendererFactory */\n/* unused harmony export ɵa */\n/* unused harmony export ɵf */\n/* unused harmony export ɵg */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return InjectableAnimationEngine; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return instantiateDefaultStyleNormalizer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return instantiateRendererFactory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return instantiateSupportedAnimationDriver; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(\"../../../../tslib/tslib.es6.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_core__ = __webpack_require__(\"../../../core/@angular/core.es5.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_platform_browser__ = __webpack_require__(\"../../../platform-browser/@angular/platform-browser.es5.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_animations__ = __webpack_require__(\"../../../animations/@angular/animations.es5.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__angular_animations_browser__ = __webpack_require__(\"../../../animations/@angular/animations/browser.es5.js\");\n\n/**\n * @license Angular v4.3.5\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n\n\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar BrowserAnimationBuilder = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](BrowserAnimationBuilder, _super);\n    /**\n     * @param {?} rootRenderer\n     */\n    function BrowserAnimationBuilder(rootRenderer) {\n        var _this = _super.call(this) || this;\n        _this._nextAnimationId = 0;\n        var typeData = {\n            id: '0',\n            encapsulation: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"ViewEncapsulation\"].None,\n            styles: [],\n            data: { animation: [] }\n        };\n        _this._renderer = rootRenderer.createRenderer(document.body, typeData);\n        return _this;\n    }\n    /**\n     * @param {?} animation\n     * @return {?}\n     */\n    BrowserAnimationBuilder.prototype.build = function (animation) {\n        var /** @type {?} */ id = this._nextAnimationId.toString();\n        this._nextAnimationId++;\n        var /** @type {?} */ entry = Array.isArray(animation) ? Object(__WEBPACK_IMPORTED_MODULE_3__angular_animations__[\"sequence\"])(animation) : animation;\n        issueAnimationCommand(this._renderer, null, id, 'register', [entry]);\n        return new BrowserAnimationFactory(id, this._renderer);\n    };\n    return BrowserAnimationBuilder;\n}(__WEBPACK_IMPORTED_MODULE_3__angular_animations__[\"AnimationBuilder\"]));\nBrowserAnimationBuilder.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nBrowserAnimationBuilder.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"RendererFactory2\"], },\n]; };\nvar BrowserAnimationFactory = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](BrowserAnimationFactory, _super);\n    /**\n     * @param {?} _id\n     * @param {?} _renderer\n     */\n    function BrowserAnimationFactory(_id, _renderer) {\n        var _this = _super.call(this) || this;\n        _this._id = _id;\n        _this._renderer = _renderer;\n        return _this;\n    }\n    /**\n     * @param {?} element\n     * @param {?=} options\n     * @return {?}\n     */\n    BrowserAnimationFactory.prototype.create = function (element, options) {\n        return new RendererAnimationPlayer(this._id, element, options || {}, this._renderer);\n    };\n    return BrowserAnimationFactory;\n}(__WEBPACK_IMPORTED_MODULE_3__angular_animations__[\"AnimationFactory\"]));\nvar RendererAnimationPlayer = (function () {\n    /**\n     * @param {?} id\n     * @param {?} element\n     * @param {?} options\n     * @param {?} _renderer\n     */\n    function RendererAnimationPlayer(id, element, options, _renderer) {\n        this.id = id;\n        this.element = element;\n        this._renderer = _renderer;\n        this.parentPlayer = null;\n        this._started = false;\n        this.totalTime = 0;\n        this._command('create', options);\n    }\n    /**\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    RendererAnimationPlayer.prototype._listen = function (eventName, callback) {\n        return this._renderer.listen(this.element, \"@@\" + this.id + \":\" + eventName, callback);\n    };\n    /**\n     * @param {?} command\n     * @param {...?} args\n     * @return {?}\n     */\n    RendererAnimationPlayer.prototype._command = function (command) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        return issueAnimationCommand(this._renderer, this.element, this.id, command, args);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    RendererAnimationPlayer.prototype.onDone = function (fn) { this._listen('done', fn); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    RendererAnimationPlayer.prototype.onStart = function (fn) { this._listen('start', fn); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    RendererAnimationPlayer.prototype.onDestroy = function (fn) { this._listen('destroy', fn); };\n    /**\n     * @return {?}\n     */\n    RendererAnimationPlayer.prototype.init = function () { this._command('init'); };\n    /**\n     * @return {?}\n     */\n    RendererAnimationPlayer.prototype.hasStarted = function () { return this._started; };\n    /**\n     * @return {?}\n     */\n    RendererAnimationPlayer.prototype.play = function () {\n        this._command('play');\n        this._started = true;\n    };\n    /**\n     * @return {?}\n     */\n    RendererAnimationPlayer.prototype.pause = function () { this._command('pause'); };\n    /**\n     * @return {?}\n     */\n    RendererAnimationPlayer.prototype.restart = function () { this._command('restart'); };\n    /**\n     * @return {?}\n     */\n    RendererAnimationPlayer.prototype.finish = function () { this._command('finish'); };\n    /**\n     * @return {?}\n     */\n    RendererAnimationPlayer.prototype.destroy = function () { this._command('destroy'); };\n    /**\n     * @return {?}\n     */\n    RendererAnimationPlayer.prototype.reset = function () { this._command('reset'); };\n    /**\n     * @param {?} p\n     * @return {?}\n     */\n    RendererAnimationPlayer.prototype.setPosition = function (p) { this._command('setPosition', p); };\n    /**\n     * @return {?}\n     */\n    RendererAnimationPlayer.prototype.getPosition = function () { return 0; };\n    return RendererAnimationPlayer;\n}());\n/**\n * @param {?} renderer\n * @param {?} element\n * @param {?} id\n * @param {?} command\n * @param {?} args\n * @return {?}\n */\nfunction issueAnimationCommand(renderer, element, id, command, args) {\n    return renderer.setProperty(element, \"@@\" + id + \":\" + command, args);\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ANIMATION_PREFIX = '@';\nvar DISABLE_ANIMATIONS_FLAG = '@.disabled';\nvar AnimationRendererFactory = (function () {\n    /**\n     * @param {?} delegate\n     * @param {?} engine\n     * @param {?} _zone\n     */\n    function AnimationRendererFactory(delegate, engine, _zone) {\n        this.delegate = delegate;\n        this.engine = engine;\n        this._zone = _zone;\n        this._currentId = 0;\n        this._microtaskId = 1;\n        this._animationCallbacksBuffer = [];\n        this._rendererCache = new Map();\n        this._cdRecurDepth = 0;\n        engine.onRemovalComplete = function (element, delegate) {\n            // Note: if an component element has a leave animation, and the component\n            // a host leave animation, the view engine will call `removeChild` for the parent\n            // component renderer as well as for the child component renderer.\n            // Therefore, we need to check if we already removed the element.\n            if (delegate && delegate.parentNode(element)) {\n                delegate.removeChild(element.parentNode, element);\n            }\n        };\n    }\n    /**\n     * @param {?} hostElement\n     * @param {?} type\n     * @return {?}\n     */\n    AnimationRendererFactory.prototype.createRenderer = function (hostElement, type) {\n        var _this = this;\n        var /** @type {?} */ EMPTY_NAMESPACE_ID = '';\n        // cache the delegates to find out which cached delegate can\n        // be used by which cached renderer\n        var /** @type {?} */ delegate = this.delegate.createRenderer(hostElement, type);\n        if (!hostElement || !type || !type.data || !type.data['animation']) {\n            var /** @type {?} */ renderer = this._rendererCache.get(delegate);\n            if (!renderer) {\n                renderer = new BaseAnimationRenderer(EMPTY_NAMESPACE_ID, delegate, this.engine);\n                // only cache this result when the base renderer is used\n                this._rendererCache.set(delegate, renderer);\n            }\n            return renderer;\n        }\n        var /** @type {?} */ componentId = type.id;\n        var /** @type {?} */ namespaceId = type.id + '-' + this._currentId;\n        this._currentId++;\n        this.engine.register(namespaceId, hostElement);\n        var /** @type {?} */ animationTriggers = (type.data['animation']);\n        animationTriggers.forEach(function (trigger) { return _this.engine.registerTrigger(componentId, namespaceId, hostElement, trigger.name, trigger); });\n        return new AnimationRenderer(this, namespaceId, delegate, this.engine);\n    };\n    /**\n     * @return {?}\n     */\n    AnimationRendererFactory.prototype.begin = function () {\n        this._cdRecurDepth++;\n        if (this.delegate.begin) {\n            this.delegate.begin();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    AnimationRendererFactory.prototype._scheduleCountTask = function () {\n        var _this = this;\n        Zone.current.scheduleMicroTask('incremenet the animation microtask', function () { return _this._microtaskId++; });\n    };\n    /**\n     * @param {?} count\n     * @param {?} fn\n     * @param {?} data\n     * @return {?}\n     */\n    AnimationRendererFactory.prototype.scheduleListenerCallback = function (count, fn, data) {\n        var _this = this;\n        if (count >= 0 && count < this._microtaskId) {\n            this._zone.run(function () { return fn(data); });\n            return;\n        }\n        if (this._animationCallbacksBuffer.length == 0) {\n            Promise.resolve(null).then(function () {\n                _this._zone.run(function () {\n                    _this._animationCallbacksBuffer.forEach(function (tuple) {\n                        var fn = tuple[0], data = tuple[1];\n                        fn(data);\n                    });\n                    _this._animationCallbacksBuffer = [];\n                });\n            });\n        }\n        this._animationCallbacksBuffer.push([fn, data]);\n    };\n    /**\n     * @return {?}\n     */\n    AnimationRendererFactory.prototype.end = function () {\n        var _this = this;\n        this._cdRecurDepth--;\n        // this is to prevent animations from running twice when an inner\n        // component does CD when a parent component insted has inserted it\n        if (this._cdRecurDepth == 0) {\n            this._zone.runOutsideAngular(function () {\n                _this._scheduleCountTask();\n                _this.engine.flush(_this._microtaskId);\n            });\n        }\n        if (this.delegate.end) {\n            this.delegate.end();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    AnimationRendererFactory.prototype.whenRenderingDone = function () { return this.engine.whenRenderingDone(); };\n    return AnimationRendererFactory;\n}());\nAnimationRendererFactory.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nAnimationRendererFactory.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"RendererFactory2\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_4__angular_animations_browser__[\"b\" /* ɵAnimationEngine */], },\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"NgZone\"], },\n]; };\nvar BaseAnimationRenderer = (function () {\n    /**\n     * @param {?} namespaceId\n     * @param {?} delegate\n     * @param {?} engine\n     */\n    function BaseAnimationRenderer(namespaceId, delegate, engine) {\n        this.namespaceId = namespaceId;\n        this.delegate = delegate;\n        this.engine = engine;\n        this.destroyNode = this.delegate.destroyNode ? function (n) { return delegate.destroyNode(n); } : null;\n    }\n    Object.defineProperty(BaseAnimationRenderer.prototype, \"data\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.delegate.data; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    BaseAnimationRenderer.prototype.destroy = function () {\n        this.engine.destroy(this.namespaceId, this.delegate);\n        this.delegate.destroy();\n    };\n    /**\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    BaseAnimationRenderer.prototype.createElement = function (name, namespace) {\n        return this.delegate.createElement(name, namespace);\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    BaseAnimationRenderer.prototype.createComment = function (value) { return this.delegate.createComment(value); };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    BaseAnimationRenderer.prototype.createText = function (value) { return this.delegate.createText(value); };\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @return {?}\n     */\n    BaseAnimationRenderer.prototype.appendChild = function (parent, newChild) {\n        this.delegate.appendChild(parent, newChild);\n        this.engine.onInsert(this.namespaceId, newChild, parent, false);\n    };\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @param {?} refChild\n     * @return {?}\n     */\n    BaseAnimationRenderer.prototype.insertBefore = function (parent, newChild, refChild) {\n        this.delegate.insertBefore(parent, newChild, refChild);\n        this.engine.onInsert(this.namespaceId, newChild, parent, true);\n    };\n    /**\n     * @param {?} parent\n     * @param {?} oldChild\n     * @return {?}\n     */\n    BaseAnimationRenderer.prototype.removeChild = function (parent, oldChild) {\n        this.engine.onRemove(this.namespaceId, oldChild, this.delegate);\n    };\n    /**\n     * @param {?} selectorOrNode\n     * @return {?}\n     */\n    BaseAnimationRenderer.prototype.selectRootElement = function (selectorOrNode) { return this.delegate.selectRootElement(selectorOrNode); };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BaseAnimationRenderer.prototype.parentNode = function (node) { return this.delegate.parentNode(node); };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BaseAnimationRenderer.prototype.nextSibling = function (node) { return this.delegate.nextSibling(node); };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @param {?=} namespace\n     * @return {?}\n     */\n    BaseAnimationRenderer.prototype.setAttribute = function (el, name, value, namespace) {\n        this.delegate.setAttribute(el, name, value, namespace);\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    BaseAnimationRenderer.prototype.removeAttribute = function (el, name, namespace) {\n        this.delegate.removeAttribute(el, name, namespace);\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    BaseAnimationRenderer.prototype.addClass = function (el, name) { this.delegate.addClass(el, name); };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    BaseAnimationRenderer.prototype.removeClass = function (el, name) { this.delegate.removeClass(el, name); };\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} value\n     * @param {?=} flags\n     * @return {?}\n     */\n    BaseAnimationRenderer.prototype.setStyle = function (el, style, value, flags) {\n        this.delegate.setStyle(el, style, value, flags);\n    };\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?=} flags\n     * @return {?}\n     */\n    BaseAnimationRenderer.prototype.removeStyle = function (el, style, flags) {\n        this.delegate.removeStyle(el, style, flags);\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    BaseAnimationRenderer.prototype.setProperty = function (el, name, value) {\n        if (name.charAt(0) == ANIMATION_PREFIX && name == DISABLE_ANIMATIONS_FLAG) {\n            this.disableAnimations(el, !!value);\n        }\n        else {\n            this.delegate.setProperty(el, name, value);\n        }\n    };\n    /**\n     * @param {?} node\n     * @param {?} value\n     * @return {?}\n     */\n    BaseAnimationRenderer.prototype.setValue = function (node, value) { this.delegate.setValue(node, value); };\n    /**\n     * @param {?} target\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    BaseAnimationRenderer.prototype.listen = function (target, eventName, callback) {\n        return this.delegate.listen(target, eventName, callback);\n    };\n    /**\n     * @param {?} element\n     * @param {?} value\n     * @return {?}\n     */\n    BaseAnimationRenderer.prototype.disableAnimations = function (element, value) {\n        this.engine.disableAnimations(element, value);\n    };\n    return BaseAnimationRenderer;\n}());\nvar AnimationRenderer = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](AnimationRenderer, _super);\n    /**\n     * @param {?} factory\n     * @param {?} namespaceId\n     * @param {?} delegate\n     * @param {?} engine\n     */\n    function AnimationRenderer(factory, namespaceId, delegate, engine) {\n        var _this = _super.call(this, namespaceId, delegate, engine) || this;\n        _this.factory = factory;\n        _this.namespaceId = namespaceId;\n        return _this;\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    AnimationRenderer.prototype.setProperty = function (el, name, value) {\n        if (name.charAt(0) == ANIMATION_PREFIX) {\n            if (name.charAt(1) == '.' && name == DISABLE_ANIMATIONS_FLAG) {\n                this.disableAnimations(el, !!value);\n            }\n            else {\n                this.engine.process(this.namespaceId, el, name.substr(1), value);\n            }\n        }\n        else {\n            this.delegate.setProperty(el, name, value);\n        }\n    };\n    /**\n     * @param {?} target\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    AnimationRenderer.prototype.listen = function (target, eventName, callback) {\n        var _this = this;\n        if (eventName.charAt(0) == ANIMATION_PREFIX) {\n            var /** @type {?} */ element = resolveElementFromTarget(target);\n            var /** @type {?} */ name = eventName.substr(1);\n            var /** @type {?} */ phase = '';\n            // @listener.phase is for trigger animation callbacks\n            // @@listener is for animation builder callbacks\n            if (name.charAt(0) != ANIMATION_PREFIX) {\n                _a = parseTriggerCallbackName(name), name = _a[0], phase = _a[1];\n            }\n            return this.engine.listen(this.namespaceId, element, name, phase, function (event) {\n                var /** @type {?} */ countId = ((event))['_data'] || -1;\n                _this.factory.scheduleListenerCallback(countId, callback, event);\n            });\n        }\n        return this.delegate.listen(target, eventName, callback);\n        var _a;\n    };\n    return AnimationRenderer;\n}(BaseAnimationRenderer));\n/**\n * @param {?} target\n * @return {?}\n */\nfunction resolveElementFromTarget(target) {\n    switch (target) {\n        case 'body':\n            return document.body;\n        case 'document':\n            return document;\n        case 'window':\n            return window;\n        default:\n            return target;\n    }\n}\n/**\n * @param {?} triggerName\n * @return {?}\n */\nfunction parseTriggerCallbackName(triggerName) {\n    var /** @type {?} */ dotIndex = triggerName.indexOf('.');\n    var /** @type {?} */ trigger = triggerName.substring(0, dotIndex);\n    var /** @type {?} */ phase = triggerName.substr(dotIndex + 1);\n    return [trigger, phase];\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar InjectableAnimationEngine = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](InjectableAnimationEngine, _super);\n    /**\n     * @param {?} driver\n     * @param {?} normalizer\n     */\n    function InjectableAnimationEngine(driver, normalizer) {\n        return _super.call(this, driver, normalizer) || this;\n    }\n    return InjectableAnimationEngine;\n}(__WEBPACK_IMPORTED_MODULE_4__angular_animations_browser__[\"b\" /* ɵAnimationEngine */]));\nInjectableAnimationEngine.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nInjectableAnimationEngine.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_4__angular_animations_browser__[\"a\" /* AnimationDriver */], },\n    { type: __WEBPACK_IMPORTED_MODULE_4__angular_animations_browser__[\"c\" /* ɵAnimationStyleNormalizer */], },\n]; };\n/**\n * @return {?}\n */\nfunction instantiateSupportedAnimationDriver() {\n    if (Object(__WEBPACK_IMPORTED_MODULE_4__angular_animations_browser__[\"g\" /* ɵsupportsWebAnimations */])()) {\n        return new __WEBPACK_IMPORTED_MODULE_4__angular_animations_browser__[\"e\" /* ɵWebAnimationsDriver */]();\n    }\n    return new __WEBPACK_IMPORTED_MODULE_4__angular_animations_browser__[\"d\" /* ɵNoopAnimationDriver */]();\n}\n/**\n * @return {?}\n */\nfunction instantiateDefaultStyleNormalizer() {\n    return new __WEBPACK_IMPORTED_MODULE_4__angular_animations_browser__[\"f\" /* ɵWebAnimationsStyleNormalizer */]();\n}\n/**\n * @param {?} renderer\n * @param {?} engine\n * @param {?} zone\n * @return {?}\n */\nfunction instantiateRendererFactory(renderer, engine, zone) {\n    return new AnimationRendererFactory(renderer, engine, zone);\n}\nvar SHARED_ANIMATION_PROVIDERS = [\n    { provide: __WEBPACK_IMPORTED_MODULE_3__angular_animations__[\"AnimationBuilder\"], useClass: BrowserAnimationBuilder },\n    { provide: __WEBPACK_IMPORTED_MODULE_4__angular_animations_browser__[\"c\" /* ɵAnimationStyleNormalizer */], useFactory: instantiateDefaultStyleNormalizer },\n    { provide: __WEBPACK_IMPORTED_MODULE_4__angular_animations_browser__[\"b\" /* ɵAnimationEngine */], useClass: InjectableAnimationEngine }, {\n        provide: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"RendererFactory2\"],\n        useFactory: instantiateRendererFactory,\n        deps: [__WEBPACK_IMPORTED_MODULE_2__angular_platform_browser__[\"ɵDomRendererFactory2\"], __WEBPACK_IMPORTED_MODULE_4__angular_animations_browser__[\"b\" /* ɵAnimationEngine */], __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"NgZone\"]]\n    }\n];\n/**\n * Separate providers from the actual module so that we can do a local modification in Google3 to\n * include them in the BrowserModule.\n */\nvar BROWSER_ANIMATIONS_PROVIDERS = [\n    { provide: __WEBPACK_IMPORTED_MODULE_4__angular_animations_browser__[\"a\" /* AnimationDriver */], useFactory: instantiateSupportedAnimationDriver }\n].concat(SHARED_ANIMATION_PROVIDERS);\n/**\n * Separate providers from the actual module so that we can do a local modification in Google3 to\n * include them in the BrowserTestingModule.\n */\nvar BROWSER_NOOP_ANIMATIONS_PROVIDERS = [{ provide: __WEBPACK_IMPORTED_MODULE_4__angular_animations_browser__[\"a\" /* AnimationDriver */], useClass: __WEBPACK_IMPORTED_MODULE_4__angular_animations_browser__[\"d\" /* ɵNoopAnimationDriver */] }].concat(SHARED_ANIMATION_PROVIDERS);\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@experimental Animation support is experimental.\n */\nvar BrowserAnimationsModule = (function () {\n    function BrowserAnimationsModule() {\n    }\n    return BrowserAnimationsModule;\n}());\nBrowserAnimationsModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"NgModule\"], args: [{\n                exports: [__WEBPACK_IMPORTED_MODULE_2__angular_platform_browser__[\"BrowserModule\"]],\n                providers: BROWSER_ANIMATIONS_PROVIDERS,\n            },] },\n];\n/**\n * @nocollapse\n */\nBrowserAnimationsModule.ctorParameters = function () { return []; };\n/**\n * \\@experimental Animation support is experimental.\n */\nvar NoopAnimationsModule = (function () {\n    function NoopAnimationsModule() {\n    }\n    return NoopAnimationsModule;\n}());\nNoopAnimationsModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"NgModule\"], args: [{\n                exports: [__WEBPACK_IMPORTED_MODULE_2__angular_platform_browser__[\"BrowserModule\"]],\n                providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS,\n            },] },\n];\n/**\n * @nocollapse\n */\nNoopAnimationsModule.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all animation APIs of the animation browser package.\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the animation package.\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\n//# sourceMappingURL=animations.es5.js.map\n\n\n/***/ }),\n\n/***/ \"../../../router/@angular/router.es5.js\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouterLink\", function() { return RouterLink; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouterLinkWithHref\", function() { return RouterLinkWithHref; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouterLinkActive\", function() { return RouterLinkActive; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouterOutlet\", function() { return RouterOutlet; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GuardsCheckEnd\", function() { return GuardsCheckEnd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GuardsCheckStart\", function() { return GuardsCheckStart; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NavigationCancel\", function() { return NavigationCancel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NavigationEnd\", function() { return NavigationEnd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NavigationError\", function() { return NavigationError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NavigationStart\", function() { return NavigationStart; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ResolveEnd\", function() { return ResolveEnd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ResolveStart\", function() { return ResolveStart; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouteConfigLoadEnd\", function() { return RouteConfigLoadEnd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouteConfigLoadStart\", function() { return RouteConfigLoadStart; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RoutesRecognized\", function() { return RoutesRecognized; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouteReuseStrategy\", function() { return RouteReuseStrategy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Router\", function() { return Router; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ROUTES\", function() { return ROUTES; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ROUTER_CONFIGURATION\", function() { return ROUTER_CONFIGURATION; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ROUTER_INITIALIZER\", function() { return ROUTER_INITIALIZER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouterModule\", function() { return RouterModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"provideRoutes\", function() { return provideRoutes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ChildrenOutletContexts\", function() { return ChildrenOutletContexts; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OutletContext\", function() { return OutletContext; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NoPreloading\", function() { return NoPreloading; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PreloadAllModules\", function() { return PreloadAllModules; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PreloadingStrategy\", function() { return PreloadingStrategy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouterPreloader\", function() { return RouterPreloader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ActivatedRoute\", function() { return ActivatedRoute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ActivatedRouteSnapshot\", function() { return ActivatedRouteSnapshot; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouterState\", function() { return RouterState; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouterStateSnapshot\", function() { return RouterStateSnapshot; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PRIMARY_OUTLET\", function() { return PRIMARY_OUTLET; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"convertToParamMap\", function() { return convertToParamMap; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UrlHandlingStrategy\", function() { return UrlHandlingStrategy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DefaultUrlSerializer\", function() { return DefaultUrlSerializer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UrlSegment\", function() { return UrlSegment; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UrlSegmentGroup\", function() { return UrlSegmentGroup; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UrlSerializer\", function() { return UrlSerializer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UrlTree\", function() { return UrlTree; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"VERSION\", function() { return VERSION; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵROUTER_PROVIDERS\", function() { return ROUTER_PROVIDERS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵflatten\", function() { return flatten; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵa\", function() { return ROUTER_FORROOT_GUARD; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵg\", function() { return RouterInitializer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵh\", function() { return getAppInitializer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵi\", function() { return getBootstrapListener; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵd\", function() { return provideForRootGuard; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵc\", function() { return provideLocationStrategy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵj\", function() { return provideRouterInitializer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵf\", function() { return rootRoute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵb\", function() { return routerNgProbeToken; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵe\", function() { return setupRouter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵk\", function() { return Tree; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵl\", function() { return TreeNode; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(\"../../../../tslib/tslib.es6.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_common__ = __webpack_require__(\"../../../common/@angular/common.es5.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_core__ = __webpack_require__(\"../../../core/@angular/core.es5.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_BehaviorSubject__ = __webpack_require__(\"../../../../rxjs/BehaviorSubject.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_BehaviorSubject___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_rxjs_BehaviorSubject__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs_Subject__ = __webpack_require__(\"../../../../rxjs/Subject.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs_Subject___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_rxjs_Subject__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_rxjs_observable_from__ = __webpack_require__(\"../../../../rxjs/observable/from.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_rxjs_observable_from___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_from__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__ = __webpack_require__(\"../../../../rxjs/observable/of.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_rxjs_operator_concatMap__ = __webpack_require__(\"../../../../rxjs/operator/concatMap.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_rxjs_operator_concatMap___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_rxjs_operator_concatMap__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_rxjs_operator_every__ = __webpack_require__(\"../../../../rxjs/operator/every.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_rxjs_operator_every___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_rxjs_operator_every__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_rxjs_operator_first__ = __webpack_require__(\"../../../../rxjs/operator/first.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_rxjs_operator_first___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_rxjs_operator_first__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_rxjs_operator_last__ = __webpack_require__(\"../../../../rxjs/operator/last.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_rxjs_operator_last___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_rxjs_operator_last__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__ = __webpack_require__(\"../../../../rxjs/operator/map.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap__ = __webpack_require__(\"../../../../rxjs/operator/mergeMap.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_rxjs_operator_reduce__ = __webpack_require__(\"../../../../rxjs/operator/reduce.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_rxjs_operator_reduce___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13_rxjs_operator_reduce__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_rxjs_Observable__ = __webpack_require__(\"../../../../rxjs/Observable.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_rxjs_Observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_14_rxjs_Observable__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_rxjs_operator_catch__ = __webpack_require__(\"../../../../rxjs/operator/catch.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_rxjs_operator_catch___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_15_rxjs_operator_catch__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_rxjs_operator_concatAll__ = __webpack_require__(\"../../../../rxjs/operator/concatAll.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_rxjs_operator_concatAll___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_16_rxjs_operator_concatAll__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_rxjs_util_EmptyError__ = __webpack_require__(\"../../../../rxjs/util/EmptyError.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_rxjs_util_EmptyError___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_17_rxjs_util_EmptyError__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18_rxjs_observable_fromPromise__ = __webpack_require__(\"../../../../rxjs/observable/fromPromise.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18_rxjs_observable_fromPromise___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_18_rxjs_observable_fromPromise__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19_rxjs_operator_mergeAll__ = __webpack_require__(\"../../../../rxjs/operator/mergeAll.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19_rxjs_operator_mergeAll___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_19_rxjs_operator_mergeAll__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__angular_platform_browser__ = __webpack_require__(\"../../../platform-browser/@angular/platform-browser.es5.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21_rxjs_operator_filter__ = __webpack_require__(\"../../../../rxjs/operator/filter.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21_rxjs_operator_filter___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_21_rxjs_operator_filter__);\n\n/**\n * @license Angular v4.3.5\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@whatItDoes Represents an event triggered when a navigation starts.\n *\n * \\@stable\n */\nvar NavigationStart = (function () {\n    /**\n     * @param {?} id\n     * @param {?} url\n     */\n    function NavigationStart(id, url) {\n        this.id = id;\n        this.url = url;\n    }\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    NavigationStart.prototype.toString = function () { return \"NavigationStart(id: \" + this.id + \", url: '\" + this.url + \"')\"; };\n    return NavigationStart;\n}());\n/**\n * \\@whatItDoes Represents an event triggered when a navigation ends successfully.\n *\n * \\@stable\n */\nvar NavigationEnd = (function () {\n    /**\n     * @param {?} id\n     * @param {?} url\n     * @param {?} urlAfterRedirects\n     */\n    function NavigationEnd(id, url, urlAfterRedirects) {\n        this.id = id;\n        this.url = url;\n        this.urlAfterRedirects = urlAfterRedirects;\n    }\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    NavigationEnd.prototype.toString = function () {\n        return \"NavigationEnd(id: \" + this.id + \", url: '\" + this.url + \"', urlAfterRedirects: '\" + this.urlAfterRedirects + \"')\";\n    };\n    return NavigationEnd;\n}());\n/**\n * \\@whatItDoes Represents an event triggered when a navigation is canceled.\n *\n * \\@stable\n */\nvar NavigationCancel = (function () {\n    /**\n     * @param {?} id\n     * @param {?} url\n     * @param {?} reason\n     */\n    function NavigationCancel(id, url, reason) {\n        this.id = id;\n        this.url = url;\n        this.reason = reason;\n    }\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    NavigationCancel.prototype.toString = function () { return \"NavigationCancel(id: \" + this.id + \", url: '\" + this.url + \"')\"; };\n    return NavigationCancel;\n}());\n/**\n * \\@whatItDoes Represents an event triggered when a navigation fails due to an unexpected error.\n *\n * \\@stable\n */\nvar NavigationError = (function () {\n    /**\n     * @param {?} id\n     * @param {?} url\n     * @param {?} error\n     */\n    function NavigationError(id, url, error) {\n        this.id = id;\n        this.url = url;\n        this.error = error;\n    }\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    NavigationError.prototype.toString = function () {\n        return \"NavigationError(id: \" + this.id + \", url: '\" + this.url + \"', error: \" + this.error + \")\";\n    };\n    return NavigationError;\n}());\n/**\n * \\@whatItDoes Represents an event triggered when routes are recognized.\n *\n * \\@stable\n */\nvar RoutesRecognized = (function () {\n    /**\n     * @param {?} id\n     * @param {?} url\n     * @param {?} urlAfterRedirects\n     * @param {?} state\n     */\n    function RoutesRecognized(id, url, urlAfterRedirects, state) {\n        this.id = id;\n        this.url = url;\n        this.urlAfterRedirects = urlAfterRedirects;\n        this.state = state;\n    }\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    RoutesRecognized.prototype.toString = function () {\n        return \"RoutesRecognized(id: \" + this.id + \", url: '\" + this.url + \"', urlAfterRedirects: '\" + this.urlAfterRedirects + \"', state: \" + this.state + \")\";\n    };\n    return RoutesRecognized;\n}());\n/**\n * \\@whatItDoes Represents an event triggered before lazy loading a route config.\n *\n * \\@experimental\n */\nvar RouteConfigLoadStart = (function () {\n    /**\n     * @param {?} route\n     */\n    function RouteConfigLoadStart(route) {\n        this.route = route;\n    }\n    /**\n     * @return {?}\n     */\n    RouteConfigLoadStart.prototype.toString = function () { return \"RouteConfigLoadStart(path: \" + this.route.path + \")\"; };\n    return RouteConfigLoadStart;\n}());\n/**\n * \\@whatItDoes Represents an event triggered when a route has been lazy loaded.\n *\n * \\@experimental\n */\nvar RouteConfigLoadEnd = (function () {\n    /**\n     * @param {?} route\n     */\n    function RouteConfigLoadEnd(route) {\n        this.route = route;\n    }\n    /**\n     * @return {?}\n     */\n    RouteConfigLoadEnd.prototype.toString = function () { return \"RouteConfigLoadEnd(path: \" + this.route.path + \")\"; };\n    return RouteConfigLoadEnd;\n}());\n/**\n * \\@whatItDoes Represents the start of the Guard phase of routing.\n *\n * \\@experimental\n */\nvar GuardsCheckStart = (function () {\n    /**\n     * @param {?} id\n     * @param {?} url\n     * @param {?} urlAfterRedirects\n     * @param {?} state\n     */\n    function GuardsCheckStart(id, url, urlAfterRedirects, state) {\n        this.id = id;\n        this.url = url;\n        this.urlAfterRedirects = urlAfterRedirects;\n        this.state = state;\n    }\n    /**\n     * @return {?}\n     */\n    GuardsCheckStart.prototype.toString = function () {\n        return \"GuardsCheckStart(id: \" + this.id + \", url: '\" + this.url + \"', urlAfterRedirects: '\" + this.urlAfterRedirects + \"', state: \" + this.state + \")\";\n    };\n    return GuardsCheckStart;\n}());\n/**\n * \\@whatItDoes Represents the end of the Guard phase of routing.\n *\n * \\@experimental\n */\nvar GuardsCheckEnd = (function () {\n    /**\n     * @param {?} id\n     * @param {?} url\n     * @param {?} urlAfterRedirects\n     * @param {?} state\n     * @param {?} shouldActivate\n     */\n    function GuardsCheckEnd(id, url, urlAfterRedirects, state, shouldActivate) {\n        this.id = id;\n        this.url = url;\n        this.urlAfterRedirects = urlAfterRedirects;\n        this.state = state;\n        this.shouldActivate = shouldActivate;\n    }\n    /**\n     * @return {?}\n     */\n    GuardsCheckEnd.prototype.toString = function () {\n        return \"GuardsCheckEnd(id: \" + this.id + \", url: '\" + this.url + \"', urlAfterRedirects: '\" + this.urlAfterRedirects + \"', state: \" + this.state + \", shouldActivate: \" + this.shouldActivate + \")\";\n    };\n    return GuardsCheckEnd;\n}());\n/**\n * \\@whatItDoes Represents the start of the Resolve phase of routing. The timing of this\n * event may change, thus it's experimental. In the current iteration it will run\n * in the \"resolve\" phase whether there's things to resolve or not. In the future this\n * behavior may change to only run when there are things to be resolved.\n *\n * \\@experimental\n */\nvar ResolveStart = (function () {\n    /**\n     * @param {?} id\n     * @param {?} url\n     * @param {?} urlAfterRedirects\n     * @param {?} state\n     */\n    function ResolveStart(id, url, urlAfterRedirects, state) {\n        this.id = id;\n        this.url = url;\n        this.urlAfterRedirects = urlAfterRedirects;\n        this.state = state;\n    }\n    /**\n     * @return {?}\n     */\n    ResolveStart.prototype.toString = function () {\n        return \"ResolveStart(id: \" + this.id + \", url: '\" + this.url + \"', urlAfterRedirects: '\" + this.urlAfterRedirects + \"', state: \" + this.state + \")\";\n    };\n    return ResolveStart;\n}());\n/**\n * \\@whatItDoes Represents the end of the Resolve phase of routing. See note on\n * {\\@link ResolveStart} for use of this experimental API.\n *\n * \\@experimental\n */\nvar ResolveEnd = (function () {\n    /**\n     * @param {?} id\n     * @param {?} url\n     * @param {?} urlAfterRedirects\n     * @param {?} state\n     */\n    function ResolveEnd(id, url, urlAfterRedirects, state) {\n        this.id = id;\n        this.url = url;\n        this.urlAfterRedirects = urlAfterRedirects;\n        this.state = state;\n    }\n    /**\n     * @return {?}\n     */\n    ResolveEnd.prototype.toString = function () {\n        return \"ResolveEnd(id: \" + this.id + \", url: '\" + this.url + \"', urlAfterRedirects: '\" + this.urlAfterRedirects + \"', state: \" + this.state + \")\";\n    };\n    return ResolveEnd;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@whatItDoes Name of the primary outlet.\n *\n * \\@stable\n */\nvar PRIMARY_OUTLET = 'primary';\nvar ParamsAsMap = (function () {\n    /**\n     * @param {?} params\n     */\n    function ParamsAsMap(params) {\n        this.params = params || {};\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    ParamsAsMap.prototype.has = function (name) { return this.params.hasOwnProperty(name); };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    ParamsAsMap.prototype.get = function (name) {\n        if (this.has(name)) {\n            var /** @type {?} */ v = this.params[name];\n            return Array.isArray(v) ? v[0] : v;\n        }\n        return null;\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    ParamsAsMap.prototype.getAll = function (name) {\n        if (this.has(name)) {\n            var /** @type {?} */ v = this.params[name];\n            return Array.isArray(v) ? v : [v];\n        }\n        return [];\n    };\n    Object.defineProperty(ParamsAsMap.prototype, \"keys\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return Object.keys(this.params); },\n        enumerable: true,\n        configurable: true\n    });\n    return ParamsAsMap;\n}());\n/**\n * Convert a {\\@link Params} instance to a {\\@link ParamMap}.\n *\n * \\@stable\n * @param {?} params\n * @return {?}\n */\nfunction convertToParamMap(params) {\n    return new ParamsAsMap(params);\n}\nvar NAVIGATION_CANCELING_ERROR = 'ngNavigationCancelingError';\n/**\n * @param {?} message\n * @return {?}\n */\nfunction navigationCancelingError(message) {\n    var /** @type {?} */ error = Error('NavigationCancelingError: ' + message);\n    ((error))[NAVIGATION_CANCELING_ERROR] = true;\n    return error;\n}\n/**\n * @param {?} error\n * @return {?}\n */\nfunction isNavigationCancelingError(error) {\n    return ((error))[NAVIGATION_CANCELING_ERROR];\n}\n/**\n * @param {?} segments\n * @param {?} segmentGroup\n * @param {?} route\n * @return {?}\n */\nfunction defaultUrlMatcher(segments, segmentGroup, route) {\n    var /** @type {?} */ parts = ((route.path)).split('/');\n    if (parts.length > segments.length) {\n        // The actual URL is shorter than the config, no match\n        return null;\n    }\n    if (route.pathMatch === 'full' &&\n        (segmentGroup.hasChildren() || parts.length < segments.length)) {\n        // The config is longer than the actual URL but we are looking for a full match, return null\n        return null;\n    }\n    var /** @type {?} */ posParams = {};\n    // Check each config part against the actual URL\n    for (var /** @type {?} */ index = 0; index < parts.length; index++) {\n        var /** @type {?} */ part = parts[index];\n        var /** @type {?} */ segment = segments[index];\n        var /** @type {?} */ isParameter = part.startsWith(':');\n        if (isParameter) {\n            posParams[part.substring(1)] = segment;\n        }\n        else if (part !== segment.path) {\n            // The actual URL part does not match the config, no match\n            return null;\n        }\n    }\n    return { consumed: segments.slice(0, parts.length), posParams: posParams };\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar LoadedRouterConfig = (function () {\n    /**\n     * @param {?} routes\n     * @param {?} module\n     */\n    function LoadedRouterConfig(routes, module) {\n        this.routes = routes;\n        this.module = module;\n    }\n    return LoadedRouterConfig;\n}());\n/**\n * @param {?} config\n * @param {?=} parentPath\n * @return {?}\n */\nfunction validateConfig(config, parentPath) {\n    if (parentPath === void 0) { parentPath = ''; }\n    // forEach doesn't iterate undefined values\n    for (var /** @type {?} */ i = 0; i < config.length; i++) {\n        var /** @type {?} */ route = config[i];\n        var /** @type {?} */ fullPath = getFullPath(parentPath, route);\n        validateNode(route, fullPath);\n    }\n}\n/**\n * @param {?} route\n * @param {?} fullPath\n * @return {?}\n */\nfunction validateNode(route, fullPath) {\n    if (!route) {\n        throw new Error(\"\\n      Invalid configuration of route '\" + fullPath + \"': Encountered undefined route.\\n      The reason might be an extra comma.\\n\\n      Example:\\n      const routes: Routes = [\\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\\n        { path: 'detail/:id', component: HeroDetailComponent }\\n      ];\\n    \");\n    }\n    if (Array.isArray(route)) {\n        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': Array cannot be specified\");\n    }\n    if (!route.component && (route.outlet && route.outlet !== PRIMARY_OUTLET)) {\n        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': a componentless route cannot have a named outlet set\");\n    }\n    if (route.redirectTo && route.children) {\n        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': redirectTo and children cannot be used together\");\n    }\n    if (route.redirectTo && route.loadChildren) {\n        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': redirectTo and loadChildren cannot be used together\");\n    }\n    if (route.children && route.loadChildren) {\n        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': children and loadChildren cannot be used together\");\n    }\n    if (route.redirectTo && route.component) {\n        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': redirectTo and component cannot be used together\");\n    }\n    if (route.path && route.matcher) {\n        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': path and matcher cannot be used together\");\n    }\n    if (route.redirectTo === void 0 && !route.component && !route.children && !route.loadChildren) {\n        throw new Error(\"Invalid configuration of route '\" + fullPath + \"'. One of the following must be provided: component, redirectTo, children or loadChildren\");\n    }\n    if (route.path === void 0 && route.matcher === void 0) {\n        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': routes must have either a path or a matcher specified\");\n    }\n    if (typeof route.path === 'string' && route.path.charAt(0) === '/') {\n        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': path cannot start with a slash\");\n    }\n    if (route.path === '' && route.redirectTo !== void 0 && route.pathMatch === void 0) {\n        var /** @type {?} */ exp = \"The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.\";\n        throw new Error(\"Invalid configuration of route '{path: \\\"\" + fullPath + \"\\\", redirectTo: \\\"\" + route.redirectTo + \"\\\"}': please provide 'pathMatch'. \" + exp);\n    }\n    if (route.pathMatch !== void 0 && route.pathMatch !== 'full' && route.pathMatch !== 'prefix') {\n        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': pathMatch can only be set to 'prefix' or 'full'\");\n    }\n    if (route.children) {\n        validateConfig(route.children, fullPath);\n    }\n}\n/**\n * @param {?} parentPath\n * @param {?} currentRoute\n * @return {?}\n */\nfunction getFullPath(parentPath, currentRoute) {\n    if (!currentRoute) {\n        return parentPath;\n    }\n    if (!parentPath && !currentRoute.path) {\n        return '';\n    }\n    else if (parentPath && !currentRoute.path) {\n        return parentPath + \"/\";\n    }\n    else if (!parentPath && currentRoute.path) {\n        return currentRoute.path;\n    }\n    else {\n        return parentPath + \"/\" + currentRoute.path;\n    }\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction shallowEqualArrays(a, b) {\n    if (a.length !== b.length)\n        return false;\n    for (var /** @type {?} */ i = 0; i < a.length; ++i) {\n        if (!shallowEqual(a[i], b[i]))\n            return false;\n    }\n    return true;\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction shallowEqual(a, b) {\n    var /** @type {?} */ k1 = Object.keys(a);\n    var /** @type {?} */ k2 = Object.keys(b);\n    if (k1.length != k2.length) {\n        return false;\n    }\n    var /** @type {?} */ key;\n    for (var /** @type {?} */ i = 0; i < k1.length; i++) {\n        key = k1[i];\n        if (a[key] !== b[key]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * @template T\n * @param {?} arr\n * @return {?}\n */\nfunction flatten(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\n/**\n * @template T\n * @param {?} a\n * @return {?}\n */\nfunction last$1(a) {\n    return a.length > 0 ? a[a.length - 1] : null;\n}\n/**\n * @param {?} bools\n * @return {?}\n */\n/**\n * @template K, V\n * @param {?} map\n * @param {?} callback\n * @return {?}\n */\nfunction forEach(map$$1, callback) {\n    for (var /** @type {?} */ prop in map$$1) {\n        if (map$$1.hasOwnProperty(prop)) {\n            callback(map$$1[prop], prop);\n        }\n    }\n}\n/**\n * @template A, B\n * @param {?} obj\n * @param {?} fn\n * @return {?}\n */\nfunction waitForMap(obj, fn) {\n    if (Object.keys(obj).length === 0) {\n        return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])({});\n    }\n    var /** @type {?} */ waitHead = [];\n    var /** @type {?} */ waitTail = [];\n    var /** @type {?} */ res = {};\n    forEach(obj, function (a, k) {\n        var /** @type {?} */ mapped = __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(fn(k, a), function (r) { return res[k] = r; });\n        if (k === PRIMARY_OUTLET) {\n            waitHead.push(mapped);\n        }\n        else {\n            waitTail.push(mapped);\n        }\n    });\n    var /** @type {?} */ concat$ = __WEBPACK_IMPORTED_MODULE_16_rxjs_operator_concatAll__[\"concatAll\"].call(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"].apply(void 0, waitHead.concat(waitTail)));\n    var /** @type {?} */ last$ = __WEBPACK_IMPORTED_MODULE_10_rxjs_operator_last__[\"last\"].call(concat$);\n    return __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(last$, function () { return res; });\n}\n/**\n * @param {?} observables\n * @return {?}\n */\nfunction andObservables(observables) {\n    var /** @type {?} */ merged$ = __WEBPACK_IMPORTED_MODULE_19_rxjs_operator_mergeAll__[\"mergeAll\"].call(observables);\n    return __WEBPACK_IMPORTED_MODULE_8_rxjs_operator_every__[\"every\"].call(merged$, function (result) { return result === true; });\n}\n/**\n * @template T\n * @param {?} value\n * @return {?}\n */\nfunction wrapIntoObservable(value) {\n    if (Object(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ɵisObservable\"])(value)) {\n        return value;\n    }\n    if (Object(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ɵisPromise\"])(value)) {\n        // Use `Promise.resolve()` to wrap promise-like instances.\n        // Required ie when a Resolver returns a AngularJS `$q` promise to correctly trigger the\n        // change detection.\n        return Object(__WEBPACK_IMPORTED_MODULE_18_rxjs_observable_fromPromise__[\"fromPromise\"])(Promise.resolve(value));\n    }\n    return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(/** @type {?} */ (value));\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @return {?}\n */\nfunction createEmptyUrlTree() {\n    return new UrlTree(new UrlSegmentGroup([], {}), {}, null);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @param {?} exact\n * @return {?}\n */\nfunction containsTree(container, containee, exact) {\n    if (exact) {\n        return equalQueryParams(container.queryParams, containee.queryParams) &&\n            equalSegmentGroups(container.root, containee.root);\n    }\n    return containsQueryParams(container.queryParams, containee.queryParams) &&\n        containsSegmentGroup(container.root, containee.root);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction equalQueryParams(container, containee) {\n    return shallowEqual(container, containee);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction equalSegmentGroups(container, containee) {\n    if (!equalPath(container.segments, containee.segments))\n        return false;\n    if (container.numberOfChildren !== containee.numberOfChildren)\n        return false;\n    for (var /** @type {?} */ c in containee.children) {\n        if (!container.children[c])\n            return false;\n        if (!equalSegmentGroups(container.children[c], containee.children[c]))\n            return false;\n    }\n    return true;\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction containsQueryParams(container, containee) {\n    return Object.keys(containee).length <= Object.keys(container).length &&\n        Object.keys(containee).every(function (key) { return containee[key] === container[key]; });\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction containsSegmentGroup(container, containee) {\n    return containsSegmentGroupHelper(container, containee, containee.segments);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @param {?} containeePaths\n * @return {?}\n */\nfunction containsSegmentGroupHelper(container, containee, containeePaths) {\n    if (container.segments.length > containeePaths.length) {\n        var /** @type {?} */ current = container.segments.slice(0, containeePaths.length);\n        if (!equalPath(current, containeePaths))\n            return false;\n        if (containee.hasChildren())\n            return false;\n        return true;\n    }\n    else if (container.segments.length === containeePaths.length) {\n        if (!equalPath(container.segments, containeePaths))\n            return false;\n        for (var /** @type {?} */ c in containee.children) {\n            if (!container.children[c])\n                return false;\n            if (!containsSegmentGroup(container.children[c], containee.children[c]))\n                return false;\n        }\n        return true;\n    }\n    else {\n        var /** @type {?} */ current = containeePaths.slice(0, container.segments.length);\n        var /** @type {?} */ next = containeePaths.slice(container.segments.length);\n        if (!equalPath(container.segments, current))\n            return false;\n        if (!container.children[PRIMARY_OUTLET])\n            return false;\n        return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);\n    }\n}\n/**\n * \\@whatItDoes Represents the parsed URL.\n *\n * \\@howToUse\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree =\n *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');\n *     const f = tree.fragment; // return 'fragment'\n *     const q = tree.queryParams; // returns {debug: 'true'}\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'\n *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'\n *     g.children['support'].segments; // return 1 segment 'help'\n *   }\n * }\n * ```\n *\n * \\@description\n *\n * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a\n * serialized tree.\n * UrlTree is a data structure that provides a lot of affordances in dealing with URLs\n *\n * \\@stable\n */\nvar UrlTree = (function () {\n    /**\n     * \\@internal\n     * @param {?} root\n     * @param {?} queryParams\n     * @param {?} fragment\n     */\n    function UrlTree(root, queryParams, fragment) {\n        this.root = root;\n        this.queryParams = queryParams;\n        this.fragment = fragment;\n    }\n    Object.defineProperty(UrlTree.prototype, \"queryParamMap\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (!this._queryParamMap) {\n                this._queryParamMap = convertToParamMap(this.queryParams);\n            }\n            return this._queryParamMap;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    UrlTree.prototype.toString = function () { return DEFAULT_SERIALIZER.serialize(this); };\n    return UrlTree;\n}());\n/**\n * \\@whatItDoes Represents the parsed URL segment group.\n *\n * See {\\@link UrlTree} for more information.\n *\n * \\@stable\n */\nvar UrlSegmentGroup = (function () {\n    /**\n     * @param {?} segments\n     * @param {?} children\n     */\n    function UrlSegmentGroup(segments, children) {\n        var _this = this;\n        this.segments = segments;\n        this.children = children;\n        /**\n         * The parent node in the url tree\n         */\n        this.parent = null;\n        forEach(children, function (v, k) { return v.parent = _this; });\n    }\n    /**\n     * Whether the segment has child segments\n     * @return {?}\n     */\n    UrlSegmentGroup.prototype.hasChildren = function () { return this.numberOfChildren > 0; };\n    Object.defineProperty(UrlSegmentGroup.prototype, \"numberOfChildren\", {\n        /**\n         * Number of child segments\n         * @return {?}\n         */\n        get: function () { return Object.keys(this.children).length; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    UrlSegmentGroup.prototype.toString = function () { return serializePaths(this); };\n    return UrlSegmentGroup;\n}());\n/**\n * \\@whatItDoes Represents a single URL segment.\n *\n * \\@howToUse\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree = router.parseUrl('/team;id=33');\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments;\n *     s[0].path; // returns 'team'\n *     s[0].parameters; // returns {id: 33}\n *   }\n * }\n * ```\n *\n * \\@description\n *\n * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix\n * parameters associated with the segment.\n *\n * \\@stable\n */\nvar UrlSegment = (function () {\n    /**\n     * @param {?} path\n     * @param {?} parameters\n     */\n    function UrlSegment(path, parameters) {\n        this.path = path;\n        this.parameters = parameters;\n    }\n    Object.defineProperty(UrlSegment.prototype, \"parameterMap\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (!this._parameterMap) {\n                this._parameterMap = convertToParamMap(this.parameters);\n            }\n            return this._parameterMap;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    UrlSegment.prototype.toString = function () { return serializePath(this); };\n    return UrlSegment;\n}());\n/**\n * @param {?} as\n * @param {?} bs\n * @return {?}\n */\nfunction equalSegments(as, bs) {\n    return equalPath(as, bs) && as.every(function (a, i) { return shallowEqual(a.parameters, bs[i].parameters); });\n}\n/**\n * @param {?} as\n * @param {?} bs\n * @return {?}\n */\nfunction equalPath(as, bs) {\n    if (as.length !== bs.length)\n        return false;\n    return as.every(function (a, i) { return a.path === bs[i].path; });\n}\n/**\n * @template T\n * @param {?} segment\n * @param {?} fn\n * @return {?}\n */\nfunction mapChildrenIntoArray(segment, fn) {\n    var /** @type {?} */ res = [];\n    forEach(segment.children, function (child, childOutlet) {\n        if (childOutlet === PRIMARY_OUTLET) {\n            res = res.concat(fn(child, childOutlet));\n        }\n    });\n    forEach(segment.children, function (child, childOutlet) {\n        if (childOutlet !== PRIMARY_OUTLET) {\n            res = res.concat(fn(child, childOutlet));\n        }\n    });\n    return res;\n}\n/**\n * \\@whatItDoes Serializes and deserializes a URL string into a URL tree.\n *\n * \\@description The url serialization strategy is customizable. You can\n * make all URLs case insensitive by providing a custom UrlSerializer.\n *\n * See {\\@link DefaultUrlSerializer} for an example of a URL serializer.\n *\n * \\@stable\n * @abstract\n */\nvar UrlSerializer = (function () {\n    function UrlSerializer() {\n    }\n    /**\n     * Parse a url into a {\\@link UrlTree}\n     * @abstract\n     * @param {?} url\n     * @return {?}\n     */\n    UrlSerializer.prototype.parse = function (url) { };\n    /**\n     * Converts a {\\@link UrlTree} into a url\n     * @abstract\n     * @param {?} tree\n     * @return {?}\n     */\n    UrlSerializer.prototype.serialize = function (tree) { };\n    return UrlSerializer;\n}());\n/**\n * \\@whatItDoes A default implementation of the {\\@link UrlSerializer}.\n *\n * \\@description\n *\n * Example URLs:\n *\n * ```\n * /inbox/33(popup:compose)\n * /inbox/33;open=true/messages/44\n * ```\n *\n * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the\n * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to\n * specify route specific parameters.\n *\n * \\@stable\n */\nvar DefaultUrlSerializer = (function () {\n    function DefaultUrlSerializer() {\n    }\n    /**\n     * Parses a url into a {\\@link UrlTree}\n     * @param {?} url\n     * @return {?}\n     */\n    DefaultUrlSerializer.prototype.parse = function (url) {\n        var /** @type {?} */ p = new UrlParser(url);\n        return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());\n    };\n    /**\n     * Converts a {\\@link UrlTree} into a url\n     * @param {?} tree\n     * @return {?}\n     */\n    DefaultUrlSerializer.prototype.serialize = function (tree) {\n        var /** @type {?} */ segment = \"/\" + serializeSegment(tree.root, true);\n        var /** @type {?} */ query = serializeQueryParams(tree.queryParams);\n        var /** @type {?} */ fragment = typeof tree.fragment === \"string\" ? \"#\" + encodeURI(/** @type {?} */ ((tree.fragment))) : '';\n        return \"\" + segment + query + fragment;\n    };\n    return DefaultUrlSerializer;\n}());\nvar DEFAULT_SERIALIZER = new DefaultUrlSerializer();\n/**\n * @param {?} segment\n * @return {?}\n */\nfunction serializePaths(segment) {\n    return segment.segments.map(function (p) { return serializePath(p); }).join('/');\n}\n/**\n * @param {?} segment\n * @param {?} root\n * @return {?}\n */\nfunction serializeSegment(segment, root) {\n    if (!segment.hasChildren()) {\n        return serializePaths(segment);\n    }\n    if (root) {\n        var /** @type {?} */ primary = segment.children[PRIMARY_OUTLET] ?\n            serializeSegment(segment.children[PRIMARY_OUTLET], false) :\n            '';\n        var /** @type {?} */ children_1 = [];\n        forEach(segment.children, function (v, k) {\n            if (k !== PRIMARY_OUTLET) {\n                children_1.push(k + \":\" + serializeSegment(v, false));\n            }\n        });\n        return children_1.length > 0 ? primary + \"(\" + children_1.join('//') + \")\" : primary;\n    }\n    else {\n        var /** @type {?} */ children = mapChildrenIntoArray(segment, function (v, k) {\n            if (k === PRIMARY_OUTLET) {\n                return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];\n            }\n            return [k + \":\" + serializeSegment(v, false)];\n        });\n        return serializePaths(segment) + \"/(\" + children.join('//') + \")\";\n    }\n}\n/**\n * This method is intended for encoding *key* or *value* parts of query component. We need a custom\n * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be\n * encoded per http://tools.ietf.org/html/rfc3986:\n *    query         = *( pchar / \"/\" / \"?\" )\n *    pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"\\@\"\n *    unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n *    pct-encoded   = \"%\" HEXDIG HEXDIG\n *    sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n *                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n * @param {?} s\n * @return {?}\n */\nfunction encode(s) {\n    return encodeURIComponent(s)\n        .replace(/%40/g, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/g, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';');\n}\n/**\n * @param {?} s\n * @return {?}\n */\nfunction decode(s) {\n    return decodeURIComponent(s);\n}\n/**\n * @param {?} path\n * @return {?}\n */\nfunction serializePath(path) {\n    return \"\" + encode(path.path) + serializeParams(path.parameters);\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction serializeParams(params) {\n    return Object.keys(params).map(function (key) { return \";\" + encode(key) + \"=\" + encode(params[key]); }).join('');\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction serializeQueryParams(params) {\n    var /** @type {?} */ strParams = Object.keys(params).map(function (name) {\n        var /** @type {?} */ value = params[name];\n        return Array.isArray(value) ? value.map(function (v) { return encode(name) + \"=\" + encode(v); }).join('&') :\n            encode(name) + \"=\" + encode(value);\n    });\n    return strParams.length ? \"?\" + strParams.join(\"&\") : '';\n}\nvar SEGMENT_RE = /^[^\\/()?;=&#]+/;\n/**\n * @param {?} str\n * @return {?}\n */\nfunction matchSegments(str) {\n    var /** @type {?} */ match = str.match(SEGMENT_RE);\n    return match ? match[0] : '';\n}\nvar QUERY_PARAM_RE = /^[^=?&#]+/;\n/**\n * @param {?} str\n * @return {?}\n */\nfunction matchQueryParams(str) {\n    var /** @type {?} */ match = str.match(QUERY_PARAM_RE);\n    return match ? match[0] : '';\n}\nvar QUERY_PARAM_VALUE_RE = /^[^?&#]+/;\n/**\n * @param {?} str\n * @return {?}\n */\nfunction matchUrlQueryParamValue(str) {\n    var /** @type {?} */ match = str.match(QUERY_PARAM_VALUE_RE);\n    return match ? match[0] : '';\n}\nvar UrlParser = (function () {\n    /**\n     * @param {?} url\n     */\n    function UrlParser(url) {\n        this.url = url;\n        this.remaining = url;\n    }\n    /**\n     * @return {?}\n     */\n    UrlParser.prototype.parseRootSegment = function () {\n        this.consumeOptional('/');\n        if (this.remaining === '' || this.peekStartsWith('?') || this.peekStartsWith('#')) {\n            return new UrlSegmentGroup([], {});\n        }\n        // The root segment group never has segments\n        return new UrlSegmentGroup([], this.parseChildren());\n    };\n    /**\n     * @return {?}\n     */\n    UrlParser.prototype.parseQueryParams = function () {\n        var /** @type {?} */ params = {};\n        if (this.consumeOptional('?')) {\n            do {\n                this.parseQueryParam(params);\n            } while (this.consumeOptional('&'));\n        }\n        return params;\n    };\n    /**\n     * @return {?}\n     */\n    UrlParser.prototype.parseFragment = function () {\n        return this.consumeOptional('#') ? decodeURI(this.remaining) : null;\n    };\n    /**\n     * @return {?}\n     */\n    UrlParser.prototype.parseChildren = function () {\n        if (this.remaining === '') {\n            return {};\n        }\n        this.consumeOptional('/');\n        var /** @type {?} */ segments = [];\n        if (!this.peekStartsWith('(')) {\n            segments.push(this.parseSegment());\n        }\n        while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {\n            this.capture('/');\n            segments.push(this.parseSegment());\n        }\n        var /** @type {?} */ children = {};\n        if (this.peekStartsWith('/(')) {\n            this.capture('/');\n            children = this.parseParens(true);\n        }\n        var /** @type {?} */ res = {};\n        if (this.peekStartsWith('(')) {\n            res = this.parseParens(false);\n        }\n        if (segments.length > 0 || Object.keys(children).length > 0) {\n            res[PRIMARY_OUTLET] = new UrlSegmentGroup(segments, children);\n        }\n        return res;\n    };\n    /**\n     * @return {?}\n     */\n    UrlParser.prototype.parseSegment = function () {\n        var /** @type {?} */ path = matchSegments(this.remaining);\n        if (path === '' && this.peekStartsWith(';')) {\n            throw new Error(\"Empty path url segment cannot have parameters: '\" + this.remaining + \"'.\");\n        }\n        this.capture(path);\n        return new UrlSegment(decode(path), this.parseMatrixParams());\n    };\n    /**\n     * @return {?}\n     */\n    UrlParser.prototype.parseMatrixParams = function () {\n        var /** @type {?} */ params = {};\n        while (this.consumeOptional(';')) {\n            this.parseParam(params);\n        }\n        return params;\n    };\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n    UrlParser.prototype.parseParam = function (params) {\n        var /** @type {?} */ key = matchSegments(this.remaining);\n        if (!key) {\n            return;\n        }\n        this.capture(key);\n        var /** @type {?} */ value = '';\n        if (this.consumeOptional('=')) {\n            var /** @type {?} */ valueMatch = matchSegments(this.remaining);\n            if (valueMatch) {\n                value = valueMatch;\n                this.capture(value);\n            }\n        }\n        params[decode(key)] = decode(value);\n    };\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n    UrlParser.prototype.parseQueryParam = function (params) {\n        var /** @type {?} */ key = matchQueryParams(this.remaining);\n        if (!key) {\n            return;\n        }\n        this.capture(key);\n        var /** @type {?} */ value = '';\n        if (this.consumeOptional('=')) {\n            var /** @type {?} */ valueMatch = matchUrlQueryParamValue(this.remaining);\n            if (valueMatch) {\n                value = valueMatch;\n                this.capture(value);\n            }\n        }\n        var /** @type {?} */ decodedKey = decode(key);\n        var /** @type {?} */ decodedVal = decode(value);\n        if (params.hasOwnProperty(decodedKey)) {\n            // Append to existing values\n            var /** @type {?} */ currentVal = params[decodedKey];\n            if (!Array.isArray(currentVal)) {\n                currentVal = [currentVal];\n                params[decodedKey] = currentVal;\n            }\n            currentVal.push(decodedVal);\n        }\n        else {\n            // Create a new value\n            params[decodedKey] = decodedVal;\n        }\n    };\n    /**\n     * @param {?} allowPrimary\n     * @return {?}\n     */\n    UrlParser.prototype.parseParens = function (allowPrimary) {\n        var /** @type {?} */ segments = {};\n        this.capture('(');\n        while (!this.consumeOptional(')') && this.remaining.length > 0) {\n            var /** @type {?} */ path = matchSegments(this.remaining);\n            var /** @type {?} */ next = this.remaining[path.length];\n            // if is is not one of these characters, then the segment was unescaped\n            // or the group was not closed\n            if (next !== '/' && next !== ')' && next !== ';') {\n                throw new Error(\"Cannot parse url '\" + this.url + \"'\");\n            }\n            var /** @type {?} */ outletName = ((undefined));\n            if (path.indexOf(':') > -1) {\n                outletName = path.substr(0, path.indexOf(':'));\n                this.capture(outletName);\n                this.capture(':');\n            }\n            else if (allowPrimary) {\n                outletName = PRIMARY_OUTLET;\n            }\n            var /** @type {?} */ children = this.parseChildren();\n            segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] :\n                new UrlSegmentGroup([], children);\n            this.consumeOptional('//');\n        }\n        return segments;\n    };\n    /**\n     * @param {?} str\n     * @return {?}\n     */\n    UrlParser.prototype.peekStartsWith = function (str) { return this.remaining.startsWith(str); };\n    /**\n     * @param {?} str\n     * @return {?}\n     */\n    UrlParser.prototype.consumeOptional = function (str) {\n        if (this.peekStartsWith(str)) {\n            this.remaining = this.remaining.substring(str.length);\n            return true;\n        }\n        return false;\n    };\n    /**\n     * @param {?} str\n     * @return {?}\n     */\n    UrlParser.prototype.capture = function (str) {\n        if (!this.consumeOptional(str)) {\n            throw new Error(\"Expected \\\"\" + str + \"\\\".\");\n        }\n    };\n    return UrlParser;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar NoMatch = (function () {\n    /**\n     * @param {?=} segmentGroup\n     */\n    function NoMatch(segmentGroup) {\n        this.segmentGroup = segmentGroup || null;\n    }\n    return NoMatch;\n}());\nvar AbsoluteRedirect = (function () {\n    /**\n     * @param {?} urlTree\n     */\n    function AbsoluteRedirect(urlTree) {\n        this.urlTree = urlTree;\n    }\n    return AbsoluteRedirect;\n}());\n/**\n * @param {?} segmentGroup\n * @return {?}\n */\nfunction noMatch(segmentGroup) {\n    return new __WEBPACK_IMPORTED_MODULE_14_rxjs_Observable__[\"Observable\"](function (obs) { return obs.error(new NoMatch(segmentGroup)); });\n}\n/**\n * @param {?} newTree\n * @return {?}\n */\nfunction absoluteRedirect(newTree) {\n    return new __WEBPACK_IMPORTED_MODULE_14_rxjs_Observable__[\"Observable\"](function (obs) { return obs.error(new AbsoluteRedirect(newTree)); });\n}\n/**\n * @param {?} redirectTo\n * @return {?}\n */\nfunction namedOutletsRedirect(redirectTo) {\n    return new __WEBPACK_IMPORTED_MODULE_14_rxjs_Observable__[\"Observable\"](function (obs) { return obs.error(new Error(\"Only absolute redirects can have named outlets. redirectTo: '\" + redirectTo + \"'\")); });\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction canLoadFails(route) {\n    return new __WEBPACK_IMPORTED_MODULE_14_rxjs_Observable__[\"Observable\"](function (obs) { return obs.error(navigationCancelingError(\"Cannot load children because the guard of the route \\\"path: '\" + route.path + \"'\\\" returned false\")); });\n}\n/**\n * Returns the `UrlTree` with the redirection applied.\n *\n * Lazy modules are loaded along the way.\n * @param {?} moduleInjector\n * @param {?} configLoader\n * @param {?} urlSerializer\n * @param {?} urlTree\n * @param {?} config\n * @return {?}\n */\nfunction applyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config) {\n    return new ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config).apply();\n}\nvar ApplyRedirects = (function () {\n    /**\n     * @param {?} moduleInjector\n     * @param {?} configLoader\n     * @param {?} urlSerializer\n     * @param {?} urlTree\n     * @param {?} config\n     */\n    function ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config) {\n        this.configLoader = configLoader;\n        this.urlSerializer = urlSerializer;\n        this.urlTree = urlTree;\n        this.config = config;\n        this.allowRedirects = true;\n        this.ngModule = moduleInjector.get(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"NgModuleRef\"]);\n    }\n    /**\n     * @return {?}\n     */\n    ApplyRedirects.prototype.apply = function () {\n        var _this = this;\n        var /** @type {?} */ expanded$ = this.expandSegmentGroup(this.ngModule, this.config, this.urlTree.root, PRIMARY_OUTLET);\n        var /** @type {?} */ urlTrees$ = __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(expanded$, function (rootSegmentGroup) { return _this.createUrlTree(rootSegmentGroup, _this.urlTree.queryParams, /** @type {?} */ ((_this.urlTree.fragment))); });\n        return __WEBPACK_IMPORTED_MODULE_15_rxjs_operator_catch__[\"_catch\"].call(urlTrees$, function (e) {\n            if (e instanceof AbsoluteRedirect) {\n                // after an absolute redirect we do not apply any more redirects!\n                _this.allowRedirects = false;\n                // we need to run matching, so we can fetch all lazy-loaded modules\n                return _this.match(e.urlTree);\n            }\n            if (e instanceof NoMatch) {\n                throw _this.noMatchError(e);\n            }\n            throw e;\n        });\n    };\n    /**\n     * @param {?} tree\n     * @return {?}\n     */\n    ApplyRedirects.prototype.match = function (tree) {\n        var _this = this;\n        var /** @type {?} */ expanded$ = this.expandSegmentGroup(this.ngModule, this.config, tree.root, PRIMARY_OUTLET);\n        var /** @type {?} */ mapped$ = __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(expanded$, function (rootSegmentGroup) { return _this.createUrlTree(rootSegmentGroup, tree.queryParams, /** @type {?} */ ((tree.fragment))); });\n        return __WEBPACK_IMPORTED_MODULE_15_rxjs_operator_catch__[\"_catch\"].call(mapped$, function (e) {\n            if (e instanceof NoMatch) {\n                throw _this.noMatchError(e);\n            }\n            throw e;\n        });\n    };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    ApplyRedirects.prototype.noMatchError = function (e) {\n        return new Error(\"Cannot match any routes. URL Segment: '\" + e.segmentGroup + \"'\");\n    };\n    /**\n     * @param {?} rootCandidate\n     * @param {?} queryParams\n     * @param {?} fragment\n     * @return {?}\n     */\n    ApplyRedirects.prototype.createUrlTree = function (rootCandidate, queryParams, fragment) {\n        var /** @type {?} */ root = rootCandidate.segments.length > 0 ?\n            new UrlSegmentGroup([], (_a = {}, _a[PRIMARY_OUTLET] = rootCandidate, _a)) :\n            rootCandidate;\n        return new UrlTree(root, queryParams, fragment);\n        var _a;\n    };\n    /**\n     * @param {?} ngModule\n     * @param {?} routes\n     * @param {?} segmentGroup\n     * @param {?} outlet\n     * @return {?}\n     */\n    ApplyRedirects.prototype.expandSegmentGroup = function (ngModule, routes, segmentGroup, outlet) {\n        if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n            return __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(this.expandChildren(ngModule, routes, segmentGroup), function (children) { return new UrlSegmentGroup([], children); });\n        }\n        return this.expandSegment(ngModule, segmentGroup, routes, segmentGroup.segments, outlet, true);\n    };\n    /**\n     * @param {?} ngModule\n     * @param {?} routes\n     * @param {?} segmentGroup\n     * @return {?}\n     */\n    ApplyRedirects.prototype.expandChildren = function (ngModule, routes, segmentGroup) {\n        var _this = this;\n        return waitForMap(segmentGroup.children, function (childOutlet, child) { return _this.expandSegmentGroup(ngModule, routes, child, childOutlet); });\n    };\n    /**\n     * @param {?} ngModule\n     * @param {?} segmentGroup\n     * @param {?} routes\n     * @param {?} segments\n     * @param {?} outlet\n     * @param {?} allowRedirects\n     * @return {?}\n     */\n    ApplyRedirects.prototype.expandSegment = function (ngModule, segmentGroup, routes, segments, outlet, allowRedirects) {\n        var _this = this;\n        var /** @type {?} */ routes$ = __WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"].apply(void 0, routes);\n        var /** @type {?} */ processedRoutes$ = __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(routes$, function (r) {\n            var /** @type {?} */ expanded$ = _this.expandSegmentAgainstRoute(ngModule, segmentGroup, routes, r, segments, outlet, allowRedirects);\n            return __WEBPACK_IMPORTED_MODULE_15_rxjs_operator_catch__[\"_catch\"].call(expanded$, function (e) {\n                if (e instanceof NoMatch) {\n                    return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(null);\n                }\n                throw e;\n            });\n        });\n        var /** @type {?} */ concattedProcessedRoutes$ = __WEBPACK_IMPORTED_MODULE_16_rxjs_operator_concatAll__[\"concatAll\"].call(processedRoutes$);\n        var /** @type {?} */ first$ = __WEBPACK_IMPORTED_MODULE_9_rxjs_operator_first__[\"first\"].call(concattedProcessedRoutes$, function (s) { return !!s; });\n        return __WEBPACK_IMPORTED_MODULE_15_rxjs_operator_catch__[\"_catch\"].call(first$, function (e, _) {\n            if (e instanceof __WEBPACK_IMPORTED_MODULE_17_rxjs_util_EmptyError__[\"EmptyError\"]) {\n                if (_this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n                    return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(new UrlSegmentGroup([], {}));\n                }\n                throw new NoMatch(segmentGroup);\n            }\n            throw e;\n        });\n    };\n    /**\n     * @param {?} segmentGroup\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    ApplyRedirects.prototype.noLeftoversInUrl = function (segmentGroup, segments, outlet) {\n        return segments.length === 0 && !segmentGroup.children[outlet];\n    };\n    /**\n     * @param {?} ngModule\n     * @param {?} segmentGroup\n     * @param {?} routes\n     * @param {?} route\n     * @param {?} paths\n     * @param {?} outlet\n     * @param {?} allowRedirects\n     * @return {?}\n     */\n    ApplyRedirects.prototype.expandSegmentAgainstRoute = function (ngModule, segmentGroup, routes, route, paths, outlet, allowRedirects) {\n        if (getOutlet(route) !== outlet) {\n            return noMatch(segmentGroup);\n        }\n        if (route.redirectTo === undefined) {\n            return this.matchSegmentAgainstRoute(ngModule, segmentGroup, route, paths);\n        }\n        if (allowRedirects && this.allowRedirects) {\n            return this.expandSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, paths, outlet);\n        }\n        return noMatch(segmentGroup);\n    };\n    /**\n     * @param {?} ngModule\n     * @param {?} segmentGroup\n     * @param {?} routes\n     * @param {?} route\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    ApplyRedirects.prototype.expandSegmentAgainstRouteUsingRedirect = function (ngModule, segmentGroup, routes, route, segments, outlet) {\n        if (route.path === '**') {\n            return this.expandWildCardWithParamsAgainstRouteUsingRedirect(ngModule, routes, route, outlet);\n        }\n        return this.expandRegularSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet);\n    };\n    /**\n     * @param {?} ngModule\n     * @param {?} routes\n     * @param {?} route\n     * @param {?} outlet\n     * @return {?}\n     */\n    ApplyRedirects.prototype.expandWildCardWithParamsAgainstRouteUsingRedirect = function (ngModule, routes, route, outlet) {\n        var _this = this;\n        var /** @type {?} */ newTree = this.applyRedirectCommands([], /** @type {?} */ ((route.redirectTo)), {});\n        if (((route.redirectTo)).startsWith('/')) {\n            return absoluteRedirect(newTree);\n        }\n        return __WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap__[\"mergeMap\"].call(this.lineralizeSegments(route, newTree), function (newSegments) {\n            var /** @type {?} */ group = new UrlSegmentGroup(newSegments, {});\n            return _this.expandSegment(ngModule, group, routes, newSegments, outlet, false);\n        });\n    };\n    /**\n     * @param {?} ngModule\n     * @param {?} segmentGroup\n     * @param {?} routes\n     * @param {?} route\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    ApplyRedirects.prototype.expandRegularSegmentAgainstRouteUsingRedirect = function (ngModule, segmentGroup, routes, route, segments, outlet) {\n        var _this = this;\n        var _a = match(segmentGroup, route, segments), matched = _a.matched, consumedSegments = _a.consumedSegments, lastChild = _a.lastChild, positionalParamSegments = _a.positionalParamSegments;\n        if (!matched)\n            return noMatch(segmentGroup);\n        var /** @type {?} */ newTree = this.applyRedirectCommands(consumedSegments, /** @type {?} */ ((route.redirectTo)), /** @type {?} */ (positionalParamSegments));\n        if (((route.redirectTo)).startsWith('/')) {\n            return absoluteRedirect(newTree);\n        }\n        return __WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap__[\"mergeMap\"].call(this.lineralizeSegments(route, newTree), function (newSegments) {\n            return _this.expandSegment(ngModule, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet, false);\n        });\n    };\n    /**\n     * @param {?} ngModule\n     * @param {?} rawSegmentGroup\n     * @param {?} route\n     * @param {?} segments\n     * @return {?}\n     */\n    ApplyRedirects.prototype.matchSegmentAgainstRoute = function (ngModule, rawSegmentGroup, route, segments) {\n        var _this = this;\n        if (route.path === '**') {\n            if (route.loadChildren) {\n                return __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(this.configLoader.load(ngModule.injector, route), function (cfg) {\n                    route._loadedConfig = cfg;\n                    return new UrlSegmentGroup(segments, {});\n                });\n            }\n            return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(new UrlSegmentGroup(segments, {}));\n        }\n        var _a = match(rawSegmentGroup, route, segments), matched = _a.matched, consumedSegments = _a.consumedSegments, lastChild = _a.lastChild;\n        if (!matched)\n            return noMatch(rawSegmentGroup);\n        var /** @type {?} */ rawSlicedSegments = segments.slice(lastChild);\n        var /** @type {?} */ childConfig$ = this.getChildConfig(ngModule, route);\n        return __WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap__[\"mergeMap\"].call(childConfig$, function (routerConfig) {\n            var /** @type {?} */ childModule = routerConfig.module;\n            var /** @type {?} */ childConfig = routerConfig.routes;\n            var _a = split(rawSegmentGroup, consumedSegments, rawSlicedSegments, childConfig), segmentGroup = _a.segmentGroup, slicedSegments = _a.slicedSegments;\n            if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n                var /** @type {?} */ expanded$_1 = _this.expandChildren(childModule, childConfig, segmentGroup);\n                return __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(expanded$_1, function (children) { return new UrlSegmentGroup(consumedSegments, children); });\n            }\n            if (childConfig.length === 0 && slicedSegments.length === 0) {\n                return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(new UrlSegmentGroup(consumedSegments, {}));\n            }\n            var /** @type {?} */ expanded$ = _this.expandSegment(childModule, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, true);\n            return __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(expanded$, function (cs) { return new UrlSegmentGroup(consumedSegments.concat(cs.segments), cs.children); });\n        });\n    };\n    /**\n     * @param {?} ngModule\n     * @param {?} route\n     * @return {?}\n     */\n    ApplyRedirects.prototype.getChildConfig = function (ngModule, route) {\n        var _this = this;\n        if (route.children) {\n            // The children belong to the same module\n            return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(new LoadedRouterConfig(route.children, ngModule));\n        }\n        if (route.loadChildren) {\n            // lazy children belong to the loaded module\n            if (route._loadedConfig !== undefined) {\n                return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(route._loadedConfig);\n            }\n            return __WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap__[\"mergeMap\"].call(runCanLoadGuard(ngModule.injector, route), function (shouldLoad) {\n                if (shouldLoad) {\n                    return __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(_this.configLoader.load(ngModule.injector, route), function (cfg) {\n                        route._loadedConfig = cfg;\n                        return cfg;\n                    });\n                }\n                return canLoadFails(route);\n            });\n        }\n        return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(new LoadedRouterConfig([], ngModule));\n    };\n    /**\n     * @param {?} route\n     * @param {?} urlTree\n     * @return {?}\n     */\n    ApplyRedirects.prototype.lineralizeSegments = function (route, urlTree) {\n        var /** @type {?} */ res = [];\n        var /** @type {?} */ c = urlTree.root;\n        while (true) {\n            res = res.concat(c.segments);\n            if (c.numberOfChildren === 0) {\n                return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(res);\n            }\n            if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {\n                return namedOutletsRedirect(/** @type {?} */ ((route.redirectTo)));\n            }\n            c = c.children[PRIMARY_OUTLET];\n        }\n    };\n    /**\n     * @param {?} segments\n     * @param {?} redirectTo\n     * @param {?} posParams\n     * @return {?}\n     */\n    ApplyRedirects.prototype.applyRedirectCommands = function (segments, redirectTo, posParams) {\n        return this.applyRedirectCreatreUrlTree(redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);\n    };\n    /**\n     * @param {?} redirectTo\n     * @param {?} urlTree\n     * @param {?} segments\n     * @param {?} posParams\n     * @return {?}\n     */\n    ApplyRedirects.prototype.applyRedirectCreatreUrlTree = function (redirectTo, urlTree, segments, posParams) {\n        var /** @type {?} */ newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);\n        return new UrlTree(newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams), urlTree.fragment);\n    };\n    /**\n     * @param {?} redirectToParams\n     * @param {?} actualParams\n     * @return {?}\n     */\n    ApplyRedirects.prototype.createQueryParams = function (redirectToParams, actualParams) {\n        var /** @type {?} */ res = {};\n        forEach(redirectToParams, function (v, k) {\n            var /** @type {?} */ copySourceValue = typeof v === 'string' && v.startsWith(':');\n            if (copySourceValue) {\n                var /** @type {?} */ sourceName = v.substring(1);\n                res[k] = actualParams[sourceName];\n            }\n            else {\n                res[k] = v;\n            }\n        });\n        return res;\n    };\n    /**\n     * @param {?} redirectTo\n     * @param {?} group\n     * @param {?} segments\n     * @param {?} posParams\n     * @return {?}\n     */\n    ApplyRedirects.prototype.createSegmentGroup = function (redirectTo, group, segments, posParams) {\n        var _this = this;\n        var /** @type {?} */ updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);\n        var /** @type {?} */ children = {};\n        forEach(group.children, function (child, name) {\n            children[name] = _this.createSegmentGroup(redirectTo, child, segments, posParams);\n        });\n        return new UrlSegmentGroup(updatedSegments, children);\n    };\n    /**\n     * @param {?} redirectTo\n     * @param {?} redirectToSegments\n     * @param {?} actualSegments\n     * @param {?} posParams\n     * @return {?}\n     */\n    ApplyRedirects.prototype.createSegments = function (redirectTo, redirectToSegments, actualSegments, posParams) {\n        var _this = this;\n        return redirectToSegments.map(function (s) { return s.path.startsWith(':') ? _this.findPosParam(redirectTo, s, posParams) :\n            _this.findOrReturn(s, actualSegments); });\n    };\n    /**\n     * @param {?} redirectTo\n     * @param {?} redirectToUrlSegment\n     * @param {?} posParams\n     * @return {?}\n     */\n    ApplyRedirects.prototype.findPosParam = function (redirectTo, redirectToUrlSegment, posParams) {\n        var /** @type {?} */ pos = posParams[redirectToUrlSegment.path.substring(1)];\n        if (!pos)\n            throw new Error(\"Cannot redirect to '\" + redirectTo + \"'. Cannot find '\" + redirectToUrlSegment.path + \"'.\");\n        return pos;\n    };\n    /**\n     * @param {?} redirectToUrlSegment\n     * @param {?} actualSegments\n     * @return {?}\n     */\n    ApplyRedirects.prototype.findOrReturn = function (redirectToUrlSegment, actualSegments) {\n        var /** @type {?} */ idx = 0;\n        for (var _i = 0, actualSegments_1 = actualSegments; _i < actualSegments_1.length; _i++) {\n            var s = actualSegments_1[_i];\n            if (s.path === redirectToUrlSegment.path) {\n                actualSegments.splice(idx);\n                return s;\n            }\n            idx++;\n        }\n        return redirectToUrlSegment;\n    };\n    return ApplyRedirects;\n}());\n/**\n * @param {?} moduleInjector\n * @param {?} route\n * @return {?}\n */\nfunction runCanLoadGuard(moduleInjector, route) {\n    var /** @type {?} */ canLoad = route.canLoad;\n    if (!canLoad || canLoad.length === 0)\n        return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(true);\n    var /** @type {?} */ obs = __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(Object(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_from__[\"from\"])(canLoad), function (injectionToken) {\n        var /** @type {?} */ guard = moduleInjector.get(injectionToken);\n        return wrapIntoObservable(guard.canLoad ? guard.canLoad(route) : guard(route));\n    });\n    return andObservables(obs);\n}\n/**\n * @param {?} segmentGroup\n * @param {?} route\n * @param {?} segments\n * @return {?}\n */\nfunction match(segmentGroup, route, segments) {\n    if (route.path === '') {\n        if ((route.pathMatch === 'full') && (segmentGroup.hasChildren() || segments.length > 0)) {\n            return { matched: false, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };\n        }\n        return { matched: true, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };\n    }\n    var /** @type {?} */ matcher = route.matcher || defaultUrlMatcher;\n    var /** @type {?} */ res = matcher(segments, segmentGroup, route);\n    if (!res) {\n        return {\n            matched: false,\n            consumedSegments: /** @type {?} */ ([]),\n            lastChild: 0,\n            positionalParamSegments: {},\n        };\n    }\n    return {\n        matched: true,\n        consumedSegments: /** @type {?} */ ((res.consumed)),\n        lastChild: /** @type {?} */ ((res.consumed.length)),\n        positionalParamSegments: /** @type {?} */ ((res.posParams)),\n    };\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} slicedSegments\n * @param {?} config\n * @return {?}\n */\nfunction split(segmentGroup, consumedSegments, slicedSegments, config) {\n    if (slicedSegments.length > 0 &&\n        containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n        var /** @type {?} */ s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptySegments(config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n        return { segmentGroup: mergeTrivialChildren(s), slicedSegments: [] };\n    }\n    if (slicedSegments.length === 0 &&\n        containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {\n        var /** @type {?} */ s = new UrlSegmentGroup(segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));\n        return { segmentGroup: mergeTrivialChildren(s), slicedSegments: slicedSegments };\n    }\n    return { segmentGroup: segmentGroup, slicedSegments: slicedSegments };\n}\n/**\n * @param {?} s\n * @return {?}\n */\nfunction mergeTrivialChildren(s) {\n    if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {\n        var /** @type {?} */ c = s.children[PRIMARY_OUTLET];\n        return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);\n    }\n    return s;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @param {?} children\n * @return {?}\n */\nfunction addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {\n    var /** @type {?} */ res = {};\n    for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {\n        var r = routes_1[_i];\n        if (isEmptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\n            res[getOutlet(r)] = new UrlSegmentGroup([], {});\n        }\n    }\n    return Object.assign({}, children, res);\n}\n/**\n * @param {?} routes\n * @param {?} primarySegmentGroup\n * @return {?}\n */\nfunction createChildrenForEmptySegments(routes, primarySegmentGroup) {\n    var /** @type {?} */ res = {};\n    res[PRIMARY_OUTLET] = primarySegmentGroup;\n    for (var _i = 0, routes_2 = routes; _i < routes_2.length; _i++) {\n        var r = routes_2[_i];\n        if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\n            res[getOutlet(r)] = new UrlSegmentGroup([], {});\n        }\n    }\n    return res;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, segments, routes) {\n    return routes.some(function (r) { return isEmptyPathRedirect(segmentGroup, segments, r) && getOutlet(r) !== PRIMARY_OUTLET; });\n}\n/**\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathRedirects(segmentGroup, segments, routes) {\n    return routes.some(function (r) { return isEmptyPathRedirect(segmentGroup, segments, r); });\n}\n/**\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} r\n * @return {?}\n */\nfunction isEmptyPathRedirect(segmentGroup, segments, r) {\n    if ((segmentGroup.hasChildren() || segments.length > 0) && r.pathMatch === 'full') {\n        return false;\n    }\n    return r.path === '' && r.redirectTo !== undefined;\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getOutlet(route) {\n    return route.outlet || PRIMARY_OUTLET;\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar Tree = (function () {\n    /**\n     * @param {?} root\n     */\n    function Tree(root) {\n        this._root = root;\n    }\n    Object.defineProperty(Tree.prototype, \"root\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._root.value; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    Tree.prototype.parent = function (t) {\n        var /** @type {?} */ p = this.pathFromRoot(t);\n        return p.length > 1 ? p[p.length - 2] : null;\n    };\n    /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    Tree.prototype.children = function (t) {\n        var /** @type {?} */ n = findNode(t, this._root);\n        return n ? n.children.map(function (t) { return t.value; }) : [];\n    };\n    /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    Tree.prototype.firstChild = function (t) {\n        var /** @type {?} */ n = findNode(t, this._root);\n        return n && n.children.length > 0 ? n.children[0].value : null;\n    };\n    /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    Tree.prototype.siblings = function (t) {\n        var /** @type {?} */ p = findPath(t, this._root);\n        if (p.length < 2)\n            return [];\n        var /** @type {?} */ c = p[p.length - 2].children.map(function (c) { return c.value; });\n        return c.filter(function (cc) { return cc !== t; });\n    };\n    /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    Tree.prototype.pathFromRoot = function (t) { return findPath(t, this._root).map(function (s) { return s.value; }); };\n    return Tree;\n}());\n/**\n * @template T\n * @param {?} value\n * @param {?} node\n * @return {?}\n */\nfunction findNode(value, node) {\n    if (value === node.value)\n        return node;\n    for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n        var child = _a[_i];\n        var /** @type {?} */ node_1 = findNode(value, child);\n        if (node_1)\n            return node_1;\n    }\n    return null;\n}\n/**\n * @template T\n * @param {?} value\n * @param {?} node\n * @return {?}\n */\nfunction findPath(value, node) {\n    if (value === node.value)\n        return [node];\n    for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n        var child = _a[_i];\n        var /** @type {?} */ path = findPath(value, child);\n        if (path.length) {\n            path.unshift(node);\n            return path;\n        }\n    }\n    return [];\n}\nvar TreeNode = (function () {\n    /**\n     * @param {?} value\n     * @param {?} children\n     */\n    function TreeNode(value, children) {\n        this.value = value;\n        this.children = children;\n    }\n    /**\n     * @return {?}\n     */\n    TreeNode.prototype.toString = function () { return \"TreeNode(\" + this.value + \")\"; };\n    return TreeNode;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@whatItDoes Represents the state of the router.\n *\n * \\@howToUse\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const root: ActivatedRoute = state.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * \\@description\n * RouterState is a tree of activated routes. Every node in this tree knows about the \"consumed\" URL\n * segments, the extracted parameters, and the resolved data.\n *\n * See {\\@link ActivatedRoute} for more information.\n *\n * \\@stable\n */\nvar RouterState = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](RouterState, _super);\n    /**\n     * \\@internal\n     * @param {?} root\n     * @param {?} snapshot\n     */\n    function RouterState(root, snapshot) {\n        var _this = _super.call(this, root) || this;\n        _this.snapshot = snapshot;\n        setRouterState(_this, root);\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    RouterState.prototype.toString = function () { return this.snapshot.toString(); };\n    return RouterState;\n}(Tree));\n/**\n * @param {?} urlTree\n * @param {?} rootComponent\n * @return {?}\n */\nfunction createEmptyState(urlTree, rootComponent) {\n    var /** @type {?} */ snapshot = createEmptyStateSnapshot(urlTree, rootComponent);\n    var /** @type {?} */ emptyUrl = new __WEBPACK_IMPORTED_MODULE_3_rxjs_BehaviorSubject__[\"BehaviorSubject\"]([new UrlSegment('', {})]);\n    var /** @type {?} */ emptyParams = new __WEBPACK_IMPORTED_MODULE_3_rxjs_BehaviorSubject__[\"BehaviorSubject\"]({});\n    var /** @type {?} */ emptyData = new __WEBPACK_IMPORTED_MODULE_3_rxjs_BehaviorSubject__[\"BehaviorSubject\"]({});\n    var /** @type {?} */ emptyQueryParams = new __WEBPACK_IMPORTED_MODULE_3_rxjs_BehaviorSubject__[\"BehaviorSubject\"]({});\n    var /** @type {?} */ fragment = new __WEBPACK_IMPORTED_MODULE_3_rxjs_BehaviorSubject__[\"BehaviorSubject\"]('');\n    var /** @type {?} */ activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);\n    activated.snapshot = snapshot.root;\n    return new RouterState(new TreeNode(activated, []), snapshot);\n}\n/**\n * @param {?} urlTree\n * @param {?} rootComponent\n * @return {?}\n */\nfunction createEmptyStateSnapshot(urlTree, rootComponent) {\n    var /** @type {?} */ emptyParams = {};\n    var /** @type {?} */ emptyData = {};\n    var /** @type {?} */ emptyQueryParams = {};\n    var /** @type {?} */ fragment = '';\n    var /** @type {?} */ activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, urlTree.root, -1, {});\n    return new RouterStateSnapshot('', new TreeNode(activated, []));\n}\n/**\n * \\@whatItDoes Contains the information about a route associated with a component loaded in an\n * outlet.\n * An `ActivatedRoute` can also be used to traverse the router state tree.\n *\n * \\@howToUse\n *\n * ```\n * \\@Component({...})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: Observable<string> = route.params.map(p => p.id);\n *     const url: Observable<string> = route.url.map(segments => segments.join(''));\n *     // route.data includes both `data` and `resolve`\n *     const user = route.data.map(d => d.user);\n *   }\n * }\n * ```\n *\n * \\@stable\n */\nvar ActivatedRoute = (function () {\n    /**\n     * \\@internal\n     * @param {?} url\n     * @param {?} params\n     * @param {?} queryParams\n     * @param {?} fragment\n     * @param {?} data\n     * @param {?} outlet\n     * @param {?} component\n     * @param {?} futureSnapshot\n     */\n    function ActivatedRoute(url, params, queryParams, fragment, data, outlet, component, futureSnapshot) {\n        this.url = url;\n        this.params = params;\n        this.queryParams = queryParams;\n        this.fragment = fragment;\n        this.data = data;\n        this.outlet = outlet;\n        this.component = component;\n        this._futureSnapshot = futureSnapshot;\n    }\n    Object.defineProperty(ActivatedRoute.prototype, \"routeConfig\", {\n        /**\n         * The configuration used to match this route\n         * @return {?}\n         */\n        get: function () { return this._futureSnapshot.routeConfig; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRoute.prototype, \"root\", {\n        /**\n         * The root of the router state\n         * @return {?}\n         */\n        get: function () { return this._routerState.root; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRoute.prototype, \"parent\", {\n        /**\n         * The parent of this route in the router state tree\n         * @return {?}\n         */\n        get: function () { return this._routerState.parent(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRoute.prototype, \"firstChild\", {\n        /**\n         * The first child of this route in the router state tree\n         * @return {?}\n         */\n        get: function () { return this._routerState.firstChild(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRoute.prototype, \"children\", {\n        /**\n         * The children of this route in the router state tree\n         * @return {?}\n         */\n        get: function () { return this._routerState.children(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRoute.prototype, \"pathFromRoot\", {\n        /**\n         * The path from the root of the router state tree to this route\n         * @return {?}\n         */\n        get: function () { return this._routerState.pathFromRoot(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRoute.prototype, \"paramMap\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (!this._paramMap) {\n                this._paramMap = __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(this.params, function (p) { return convertToParamMap(p); });\n            }\n            return this._paramMap;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRoute.prototype, \"queryParamMap\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (!this._queryParamMap) {\n                this._queryParamMap =\n                    __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(this.queryParams, function (p) { return convertToParamMap(p); });\n            }\n            return this._queryParamMap;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ActivatedRoute.prototype.toString = function () {\n        return this.snapshot ? this.snapshot.toString() : \"Future(\" + this._futureSnapshot + \")\";\n    };\n    return ActivatedRoute;\n}());\n/**\n * \\@internal\n * @param {?} route\n * @return {?}\n */\nfunction inheritedParamsDataResolve(route) {\n    var /** @type {?} */ pathToRoot = route.pathFromRoot;\n    var /** @type {?} */ inhertingStartingFrom = pathToRoot.length - 1;\n    while (inhertingStartingFrom >= 1) {\n        var /** @type {?} */ current = pathToRoot[inhertingStartingFrom];\n        var /** @type {?} */ parent = pathToRoot[inhertingStartingFrom - 1];\n        // current route is an empty path => inherits its parent's params and data\n        if (current.routeConfig && current.routeConfig.path === '') {\n            inhertingStartingFrom--;\n            // parent is componentless => current route should inherit its params and data\n        }\n        else if (!parent.component) {\n            inhertingStartingFrom--;\n        }\n        else {\n            break;\n        }\n    }\n    return pathToRoot.slice(inhertingStartingFrom).reduce(function (res, curr) {\n        var /** @type {?} */ params = Object.assign({}, res.params, curr.params);\n        var /** @type {?} */ data = Object.assign({}, res.data, curr.data);\n        var /** @type {?} */ resolve = Object.assign({}, res.resolve, curr._resolvedData);\n        return { params: params, data: data, resolve: resolve };\n    }, /** @type {?} */ ({ params: {}, data: {}, resolve: {} }));\n}\n/**\n * \\@whatItDoes Contains the information about a route associated with a component loaded in an\n * outlet\n * at a particular moment in time. ActivatedRouteSnapshot can also be used to traverse the router\n * state tree.\n *\n * \\@howToUse\n *\n * ```\n * \\@Component({templateUrl:'./my-component.html'})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: string = route.snapshot.params.id;\n *     const url: string = route.snapshot.url.join('');\n *     const user = route.snapshot.data.user;\n *   }\n * }\n * ```\n *\n * \\@stable\n */\nvar ActivatedRouteSnapshot = (function () {\n    /**\n     * \\@internal\n     * @param {?} url\n     * @param {?} params\n     * @param {?} queryParams\n     * @param {?} fragment\n     * @param {?} data\n     * @param {?} outlet\n     * @param {?} component\n     * @param {?} routeConfig\n     * @param {?} urlSegment\n     * @param {?} lastPathIndex\n     * @param {?} resolve\n     */\n    function ActivatedRouteSnapshot(url, params, queryParams, fragment, data, outlet, component, routeConfig, urlSegment, lastPathIndex, resolve) {\n        this.url = url;\n        this.params = params;\n        this.queryParams = queryParams;\n        this.fragment = fragment;\n        this.data = data;\n        this.outlet = outlet;\n        this.component = component;\n        this._routeConfig = routeConfig;\n        this._urlSegment = urlSegment;\n        this._lastPathIndex = lastPathIndex;\n        this._resolve = resolve;\n    }\n    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"routeConfig\", {\n        /**\n         * The configuration used to match this route\n         * @return {?}\n         */\n        get: function () { return this._routeConfig; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"root\", {\n        /**\n         * The root of the router state\n         * @return {?}\n         */\n        get: function () { return this._routerState.root; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"parent\", {\n        /**\n         * The parent of this route in the router state tree\n         * @return {?}\n         */\n        get: function () { return this._routerState.parent(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"firstChild\", {\n        /**\n         * The first child of this route in the router state tree\n         * @return {?}\n         */\n        get: function () { return this._routerState.firstChild(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"children\", {\n        /**\n         * The children of this route in the router state tree\n         * @return {?}\n         */\n        get: function () { return this._routerState.children(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"pathFromRoot\", {\n        /**\n         * The path from the root of the router state tree to this route\n         * @return {?}\n         */\n        get: function () { return this._routerState.pathFromRoot(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"paramMap\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (!this._paramMap) {\n                this._paramMap = convertToParamMap(this.params);\n            }\n            return this._paramMap;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"queryParamMap\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (!this._queryParamMap) {\n                this._queryParamMap = convertToParamMap(this.queryParams);\n            }\n            return this._queryParamMap;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ActivatedRouteSnapshot.prototype.toString = function () {\n        var /** @type {?} */ url = this.url.map(function (segment) { return segment.toString(); }).join('/');\n        var /** @type {?} */ matched = this._routeConfig ? this._routeConfig.path : '';\n        return \"Route(url:'\" + url + \"', path:'\" + matched + \"')\";\n    };\n    return ActivatedRouteSnapshot;\n}());\n/**\n * \\@whatItDoes Represents the state of the router at a moment in time.\n *\n * \\@howToUse\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const snapshot: RouterStateSnapshot = state.snapshot;\n *     const root: ActivatedRouteSnapshot = snapshot.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * \\@description\n * RouterStateSnapshot is a tree of activated route snapshots. Every node in this tree knows about\n * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\n *\n * \\@stable\n */\nvar RouterStateSnapshot = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](RouterStateSnapshot, _super);\n    /**\n     * \\@internal\n     * @param {?} url\n     * @param {?} root\n     */\n    function RouterStateSnapshot(url, root) {\n        var _this = _super.call(this, root) || this;\n        _this.url = url;\n        setRouterState(_this, root);\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    RouterStateSnapshot.prototype.toString = function () { return serializeNode(this._root); };\n    return RouterStateSnapshot;\n}(Tree));\n/**\n * @template U, T\n * @param {?} state\n * @param {?} node\n * @return {?}\n */\nfunction setRouterState(state, node) {\n    node.value._routerState = state;\n    node.children.forEach(function (c) { return setRouterState(state, c); });\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction serializeNode(node) {\n    var /** @type {?} */ c = node.children.length > 0 ? \" { \" + node.children.map(serializeNode).join(\", \") + \" } \" : '';\n    return \"\" + node.value + c;\n}\n/**\n * The expectation is that the activate route is created with the right set of parameters.\n * So we push new values into the observables only when they are not the initial values.\n * And we detect that by checking if the snapshot field is set.\n * @param {?} route\n * @return {?}\n */\nfunction advanceActivatedRoute(route) {\n    if (route.snapshot) {\n        var /** @type {?} */ currentSnapshot = route.snapshot;\n        var /** @type {?} */ nextSnapshot = route._futureSnapshot;\n        route.snapshot = nextSnapshot;\n        if (!shallowEqual(currentSnapshot.queryParams, nextSnapshot.queryParams)) {\n            ((route.queryParams)).next(nextSnapshot.queryParams);\n        }\n        if (currentSnapshot.fragment !== nextSnapshot.fragment) {\n            ((route.fragment)).next(nextSnapshot.fragment);\n        }\n        if (!shallowEqual(currentSnapshot.params, nextSnapshot.params)) {\n            ((route.params)).next(nextSnapshot.params);\n        }\n        if (!shallowEqualArrays(currentSnapshot.url, nextSnapshot.url)) {\n            ((route.url)).next(nextSnapshot.url);\n        }\n        if (!shallowEqual(currentSnapshot.data, nextSnapshot.data)) {\n            ((route.data)).next(nextSnapshot.data);\n        }\n    }\n    else {\n        route.snapshot = route._futureSnapshot;\n        // this is for resolved data\n        ((route.data)).next(route._futureSnapshot.data);\n    }\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction equalParamsAndUrlSegments(a, b) {\n    var /** @type {?} */ equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);\n    var /** @type {?} */ parentsMismatch = !a.parent !== !b.parent;\n    return equalUrlParams && !parentsMismatch &&\n        (!a.parent || equalParamsAndUrlSegments(a.parent, /** @type {?} */ ((b.parent))));\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} routeReuseStrategy\n * @param {?} curr\n * @param {?} prevState\n * @return {?}\n */\nfunction createRouterState(routeReuseStrategy, curr, prevState) {\n    var /** @type {?} */ root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);\n    return new RouterState(root, curr);\n}\n/**\n * @param {?} routeReuseStrategy\n * @param {?} curr\n * @param {?=} prevState\n * @return {?}\n */\nfunction createNode(routeReuseStrategy, curr, prevState) {\n    // reuse an activated route that is currently displayed on the screen\n    if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {\n        var /** @type {?} */ value = prevState.value;\n        value._futureSnapshot = curr.value;\n        var /** @type {?} */ children = createOrReuseChildren(routeReuseStrategy, curr, prevState);\n        return new TreeNode(value, children);\n        // retrieve an activated route that is used to be displayed, but is not currently displayed\n    }\n    else if (routeReuseStrategy.retrieve(curr.value)) {\n        var /** @type {?} */ tree_1 = ((routeReuseStrategy.retrieve(curr.value))).route;\n        setFutureSnapshotsOfActivatedRoutes(curr, tree_1);\n        return tree_1;\n    }\n    else {\n        var /** @type {?} */ value = createActivatedRoute(curr.value);\n        var /** @type {?} */ children = curr.children.map(function (c) { return createNode(routeReuseStrategy, c); });\n        return new TreeNode(value, children);\n    }\n}\n/**\n * @param {?} curr\n * @param {?} result\n * @return {?}\n */\nfunction setFutureSnapshotsOfActivatedRoutes(curr, result) {\n    if (curr.value.routeConfig !== result.value.routeConfig) {\n        throw new Error('Cannot reattach ActivatedRouteSnapshot created from a different route');\n    }\n    if (curr.children.length !== result.children.length) {\n        throw new Error('Cannot reattach ActivatedRouteSnapshot with a different number of children');\n    }\n    result.value._futureSnapshot = curr.value;\n    for (var /** @type {?} */ i = 0; i < curr.children.length; ++i) {\n        setFutureSnapshotsOfActivatedRoutes(curr.children[i], result.children[i]);\n    }\n}\n/**\n * @param {?} routeReuseStrategy\n * @param {?} curr\n * @param {?} prevState\n * @return {?}\n */\nfunction createOrReuseChildren(routeReuseStrategy, curr, prevState) {\n    return curr.children.map(function (child) {\n        for (var _i = 0, _a = prevState.children; _i < _a.length; _i++) {\n            var p = _a[_i];\n            if (routeReuseStrategy.shouldReuseRoute(p.value.snapshot, child.value)) {\n                return createNode(routeReuseStrategy, child, p);\n            }\n        }\n        return createNode(routeReuseStrategy, child);\n    });\n}\n/**\n * @param {?} c\n * @return {?}\n */\nfunction createActivatedRoute(c) {\n    return new ActivatedRoute(new __WEBPACK_IMPORTED_MODULE_3_rxjs_BehaviorSubject__[\"BehaviorSubject\"](c.url), new __WEBPACK_IMPORTED_MODULE_3_rxjs_BehaviorSubject__[\"BehaviorSubject\"](c.params), new __WEBPACK_IMPORTED_MODULE_3_rxjs_BehaviorSubject__[\"BehaviorSubject\"](c.queryParams), new __WEBPACK_IMPORTED_MODULE_3_rxjs_BehaviorSubject__[\"BehaviorSubject\"](c.fragment), new __WEBPACK_IMPORTED_MODULE_3_rxjs_BehaviorSubject__[\"BehaviorSubject\"](c.data), c.outlet, c.component, c);\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} route\n * @param {?} urlTree\n * @param {?} commands\n * @param {?} queryParams\n * @param {?} fragment\n * @return {?}\n */\nfunction createUrlTree(route, urlTree, commands, queryParams, fragment) {\n    if (commands.length === 0) {\n        return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);\n    }\n    var /** @type {?} */ nav = computeNavigation(commands);\n    if (nav.toRoot()) {\n        return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);\n    }\n    var /** @type {?} */ startingPosition = findStartingPosition(nav, urlTree, route);\n    var /** @type {?} */ segmentGroup = startingPosition.processChildren ?\n        updateSegmentGroupChildren(startingPosition.segmentGroup, startingPosition.index, nav.commands) :\n        updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, nav.commands);\n    return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);\n}\n/**\n * @param {?} command\n * @return {?}\n */\nfunction isMatrixParams(command) {\n    return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;\n}\n/**\n * @param {?} oldSegmentGroup\n * @param {?} newSegmentGroup\n * @param {?} urlTree\n * @param {?} queryParams\n * @param {?} fragment\n * @return {?}\n */\nfunction tree(oldSegmentGroup, newSegmentGroup, urlTree, queryParams, fragment) {\n    var /** @type {?} */ qp = {};\n    if (queryParams) {\n        forEach(queryParams, function (value, name) {\n            qp[name] = Array.isArray(value) ? value.map(function (v) { return \"\" + v; }) : \"\" + value;\n        });\n    }\n    if (urlTree.root === oldSegmentGroup) {\n        return new UrlTree(newSegmentGroup, qp, fragment);\n    }\n    return new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), qp, fragment);\n}\n/**\n * @param {?} current\n * @param {?} oldSegment\n * @param {?} newSegment\n * @return {?}\n */\nfunction replaceSegment(current, oldSegment, newSegment) {\n    var /** @type {?} */ children = {};\n    forEach(current.children, function (c, outletName) {\n        if (c === oldSegment) {\n            children[outletName] = newSegment;\n        }\n        else {\n            children[outletName] = replaceSegment(c, oldSegment, newSegment);\n        }\n    });\n    return new UrlSegmentGroup(current.segments, children);\n}\nvar Navigation = (function () {\n    /**\n     * @param {?} isAbsolute\n     * @param {?} numberOfDoubleDots\n     * @param {?} commands\n     */\n    function Navigation(isAbsolute, numberOfDoubleDots, commands) {\n        this.isAbsolute = isAbsolute;\n        this.numberOfDoubleDots = numberOfDoubleDots;\n        this.commands = commands;\n        if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {\n            throw new Error('Root segment cannot have matrix parameters');\n        }\n        var cmdWithOutlet = commands.find(function (c) { return typeof c === 'object' && c != null && c.outlets; });\n        if (cmdWithOutlet && cmdWithOutlet !== last$1(commands)) {\n            throw new Error('{outlets:{}} has to be the last command');\n        }\n    }\n    /**\n     * @return {?}\n     */\n    Navigation.prototype.toRoot = function () {\n        return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';\n    };\n    return Navigation;\n}());\n/**\n * Transforms commands to a normalized `Navigation`\n * @param {?} commands\n * @return {?}\n */\nfunction computeNavigation(commands) {\n    if ((typeof commands[0] === 'string') && commands.length === 1 && commands[0] === '/') {\n        return new Navigation(true, 0, commands);\n    }\n    var /** @type {?} */ numberOfDoubleDots = 0;\n    var /** @type {?} */ isAbsolute = false;\n    var /** @type {?} */ res = commands.reduce(function (res, cmd, cmdIdx) {\n        if (typeof cmd === 'object' && cmd != null) {\n            if (cmd.outlets) {\n                var /** @type {?} */ outlets_1 = {};\n                forEach(cmd.outlets, function (commands, name) {\n                    outlets_1[name] = typeof commands === 'string' ? commands.split('/') : commands;\n                });\n                return res.concat([{ outlets: outlets_1 }]);\n            }\n            if (cmd.segmentPath) {\n                return res.concat([cmd.segmentPath]);\n            }\n        }\n        if (!(typeof cmd === 'string')) {\n            return res.concat([cmd]);\n        }\n        if (cmdIdx === 0) {\n            cmd.split('/').forEach(function (urlPart, partIndex) {\n                if (partIndex == 0 && urlPart === '.') {\n                    // skip './a'\n                }\n                else if (partIndex == 0 && urlPart === '') {\n                    isAbsolute = true;\n                }\n                else if (urlPart === '..') {\n                    numberOfDoubleDots++;\n                }\n                else if (urlPart != '') {\n                    res.push(urlPart);\n                }\n            });\n            return res;\n        }\n        return res.concat([cmd]);\n    }, []);\n    return new Navigation(isAbsolute, numberOfDoubleDots, res);\n}\nvar Position = (function () {\n    /**\n     * @param {?} segmentGroup\n     * @param {?} processChildren\n     * @param {?} index\n     */\n    function Position(segmentGroup, processChildren, index) {\n        this.segmentGroup = segmentGroup;\n        this.processChildren = processChildren;\n        this.index = index;\n    }\n    return Position;\n}());\n/**\n * @param {?} nav\n * @param {?} tree\n * @param {?} route\n * @return {?}\n */\nfunction findStartingPosition(nav, tree, route) {\n    if (nav.isAbsolute) {\n        return new Position(tree.root, true, 0);\n    }\n    if (route.snapshot._lastPathIndex === -1) {\n        return new Position(route.snapshot._urlSegment, true, 0);\n    }\n    var /** @type {?} */ modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;\n    var /** @type {?} */ index = route.snapshot._lastPathIndex + modifier;\n    return createPositionApplyingDoubleDots(route.snapshot._urlSegment, index, nav.numberOfDoubleDots);\n}\n/**\n * @param {?} group\n * @param {?} index\n * @param {?} numberOfDoubleDots\n * @return {?}\n */\nfunction createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {\n    var /** @type {?} */ g = group;\n    var /** @type {?} */ ci = index;\n    var /** @type {?} */ dd = numberOfDoubleDots;\n    while (dd > ci) {\n        dd -= ci;\n        g = ((g.parent));\n        if (!g) {\n            throw new Error('Invalid number of \\'../\\'');\n        }\n        ci = g.segments.length;\n    }\n    return new Position(g, false, ci - dd);\n}\n/**\n * @param {?} command\n * @return {?}\n */\nfunction getPath(command) {\n    if (typeof command === 'object' && command != null && command.outlets) {\n        return command.outlets[PRIMARY_OUTLET];\n    }\n    return \"\" + command;\n}\n/**\n * @param {?} commands\n * @return {?}\n */\nfunction getOutlets(commands) {\n    if (!(typeof commands[0] === 'object'))\n        return _a = {}, _a[PRIMARY_OUTLET] = commands, _a;\n    if (commands[0].outlets === undefined)\n        return _b = {}, _b[PRIMARY_OUTLET] = commands, _b;\n    return commands[0].outlets;\n    var _a, _b;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction updateSegmentGroup(segmentGroup, startIndex, commands) {\n    if (!segmentGroup) {\n        segmentGroup = new UrlSegmentGroup([], {});\n    }\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n        return updateSegmentGroupChildren(segmentGroup, startIndex, commands);\n    }\n    var /** @type {?} */ m = prefixedWith(segmentGroup, startIndex, commands);\n    var /** @type {?} */ slicedCommands = commands.slice(m.commandIndex);\n    if (m.match && m.pathIndex < segmentGroup.segments.length) {\n        var /** @type {?} */ g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});\n        g.children[PRIMARY_OUTLET] =\n            new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);\n        return updateSegmentGroupChildren(g, 0, slicedCommands);\n    }\n    else if (m.match && slicedCommands.length === 0) {\n        return new UrlSegmentGroup(segmentGroup.segments, {});\n    }\n    else if (m.match && !segmentGroup.hasChildren()) {\n        return createNewSegmentGroup(segmentGroup, startIndex, commands);\n    }\n    else if (m.match) {\n        return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);\n    }\n    else {\n        return createNewSegmentGroup(segmentGroup, startIndex, commands);\n    }\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction updateSegmentGroupChildren(segmentGroup, startIndex, commands) {\n    if (commands.length === 0) {\n        return new UrlSegmentGroup(segmentGroup.segments, {});\n    }\n    else {\n        var /** @type {?} */ outlets_2 = getOutlets(commands);\n        var /** @type {?} */ children_2 = {};\n        forEach(outlets_2, function (commands, outlet) {\n            if (commands !== null) {\n                children_2[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);\n            }\n        });\n        forEach(segmentGroup.children, function (child, childOutlet) {\n            if (outlets_2[childOutlet] === undefined) {\n                children_2[childOutlet] = child;\n            }\n        });\n        return new UrlSegmentGroup(segmentGroup.segments, children_2);\n    }\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction prefixedWith(segmentGroup, startIndex, commands) {\n    var /** @type {?} */ currentCommandIndex = 0;\n    var /** @type {?} */ currentPathIndex = startIndex;\n    var /** @type {?} */ noMatch = { match: false, pathIndex: 0, commandIndex: 0 };\n    while (currentPathIndex < segmentGroup.segments.length) {\n        if (currentCommandIndex >= commands.length)\n            return noMatch;\n        var /** @type {?} */ path = segmentGroup.segments[currentPathIndex];\n        var /** @type {?} */ curr = getPath(commands[currentCommandIndex]);\n        var /** @type {?} */ next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;\n        if (currentPathIndex > 0 && curr === undefined)\n            break;\n        if (curr && next && (typeof next === 'object') && next.outlets === undefined) {\n            if (!compare(curr, next, path))\n                return noMatch;\n            currentCommandIndex += 2;\n        }\n        else {\n            if (!compare(curr, {}, path))\n                return noMatch;\n            currentCommandIndex++;\n        }\n        currentPathIndex++;\n    }\n    return { match: true, pathIndex: currentPathIndex, commandIndex: currentCommandIndex };\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction createNewSegmentGroup(segmentGroup, startIndex, commands) {\n    var /** @type {?} */ paths = segmentGroup.segments.slice(0, startIndex);\n    var /** @type {?} */ i = 0;\n    while (i < commands.length) {\n        if (typeof commands[i] === 'object' && commands[i].outlets !== undefined) {\n            var /** @type {?} */ children = createNewSegmentChildren(commands[i].outlets);\n            return new UrlSegmentGroup(paths, children);\n        }\n        // if we start with an object literal, we need to reuse the path part from the segment\n        if (i === 0 && isMatrixParams(commands[0])) {\n            var /** @type {?} */ p = segmentGroup.segments[startIndex];\n            paths.push(new UrlSegment(p.path, commands[0]));\n            i++;\n            continue;\n        }\n        var /** @type {?} */ curr = getPath(commands[i]);\n        var /** @type {?} */ next = (i < commands.length - 1) ? commands[i + 1] : null;\n        if (curr && next && isMatrixParams(next)) {\n            paths.push(new UrlSegment(curr, stringify(next)));\n            i += 2;\n        }\n        else {\n            paths.push(new UrlSegment(curr, {}));\n            i++;\n        }\n    }\n    return new UrlSegmentGroup(paths, {});\n}\n/**\n * @param {?} outlets\n * @return {?}\n */\nfunction createNewSegmentChildren(outlets) {\n    var /** @type {?} */ children = {};\n    forEach(outlets, function (commands, outlet) {\n        if (commands !== null) {\n            children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);\n        }\n    });\n    return children;\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction stringify(params) {\n    var /** @type {?} */ res = {};\n    forEach(params, function (v, k) { return res[k] = \"\" + v; });\n    return res;\n}\n/**\n * @param {?} path\n * @param {?} params\n * @param {?} segment\n * @return {?}\n */\nfunction compare(path, params, segment) {\n    return path == segment.path && shallowEqual(params, segment.parameters);\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar NoMatch$1 = (function () {\n    function NoMatch$1() {\n    }\n    return NoMatch$1;\n}());\n/**\n * @param {?} rootComponentType\n * @param {?} config\n * @param {?} urlTree\n * @param {?} url\n * @return {?}\n */\nfunction recognize(rootComponentType, config, urlTree, url) {\n    return new Recognizer(rootComponentType, config, urlTree, url).recognize();\n}\nvar Recognizer = (function () {\n    /**\n     * @param {?} rootComponentType\n     * @param {?} config\n     * @param {?} urlTree\n     * @param {?} url\n     */\n    function Recognizer(rootComponentType, config, urlTree, url) {\n        this.rootComponentType = rootComponentType;\n        this.config = config;\n        this.urlTree = urlTree;\n        this.url = url;\n    }\n    /**\n     * @return {?}\n     */\n    Recognizer.prototype.recognize = function () {\n        try {\n            var /** @type {?} */ rootSegmentGroup = split$1(this.urlTree.root, [], [], this.config).segmentGroup;\n            var /** @type {?} */ children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);\n            var /** @type {?} */ root = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze(this.urlTree.queryParams), /** @type {?} */ ((this.urlTree.fragment)), {}, PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {});\n            var /** @type {?} */ rootNode = new TreeNode(root, children);\n            var /** @type {?} */ routeState = new RouterStateSnapshot(this.url, rootNode);\n            this.inheritParamsAndData(routeState._root);\n            return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(routeState);\n        }\n        catch (e) {\n            return new __WEBPACK_IMPORTED_MODULE_14_rxjs_Observable__[\"Observable\"](function (obs) { return obs.error(e); });\n        }\n    };\n    /**\n     * @param {?} routeNode\n     * @return {?}\n     */\n    Recognizer.prototype.inheritParamsAndData = function (routeNode) {\n        var _this = this;\n        var /** @type {?} */ route = routeNode.value;\n        var /** @type {?} */ i = inheritedParamsDataResolve(route);\n        route.params = Object.freeze(i.params);\n        route.data = Object.freeze(i.data);\n        routeNode.children.forEach(function (n) { return _this.inheritParamsAndData(n); });\n    };\n    /**\n     * @param {?} config\n     * @param {?} segmentGroup\n     * @param {?} outlet\n     * @return {?}\n     */\n    Recognizer.prototype.processSegmentGroup = function (config, segmentGroup, outlet) {\n        if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n            return this.processChildren(config, segmentGroup);\n        }\n        return this.processSegment(config, segmentGroup, segmentGroup.segments, outlet);\n    };\n    /**\n     * @param {?} config\n     * @param {?} segmentGroup\n     * @return {?}\n     */\n    Recognizer.prototype.processChildren = function (config, segmentGroup) {\n        var _this = this;\n        var /** @type {?} */ children = mapChildrenIntoArray(segmentGroup, function (child, childOutlet) { return _this.processSegmentGroup(config, child, childOutlet); });\n        checkOutletNameUniqueness(children);\n        sortActivatedRouteSnapshots(children);\n        return children;\n    };\n    /**\n     * @param {?} config\n     * @param {?} segmentGroup\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    Recognizer.prototype.processSegment = function (config, segmentGroup, segments, outlet) {\n        for (var _i = 0, config_1 = config; _i < config_1.length; _i++) {\n            var r = config_1[_i];\n            try {\n                return this.processSegmentAgainstRoute(r, segmentGroup, segments, outlet);\n            }\n            catch (e) {\n                if (!(e instanceof NoMatch$1))\n                    throw e;\n            }\n        }\n        if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n            return [];\n        }\n        throw new NoMatch$1();\n    };\n    /**\n     * @param {?} segmentGroup\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    Recognizer.prototype.noLeftoversInUrl = function (segmentGroup, segments, outlet) {\n        return segments.length === 0 && !segmentGroup.children[outlet];\n    };\n    /**\n     * @param {?} route\n     * @param {?} rawSegment\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    Recognizer.prototype.processSegmentAgainstRoute = function (route, rawSegment, segments, outlet) {\n        if (route.redirectTo)\n            throw new NoMatch$1();\n        if ((route.outlet || PRIMARY_OUTLET) !== outlet)\n            throw new NoMatch$1();\n        if (route.path === '**') {\n            var /** @type {?} */ params = segments.length > 0 ? ((last$1(segments))).parameters : {};\n            var /** @type {?} */ snapshot_1 = new ActivatedRouteSnapshot(segments, params, Object.freeze(this.urlTree.queryParams), /** @type {?} */ ((this.urlTree.fragment)), getData(route), outlet, /** @type {?} */ ((route.component)), route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + segments.length, getResolve(route));\n            return [new TreeNode(snapshot_1, [])];\n        }\n        var _a = match$1(rawSegment, route, segments), consumedSegments = _a.consumedSegments, parameters = _a.parameters, lastChild = _a.lastChild;\n        var /** @type {?} */ rawSlicedSegments = segments.slice(lastChild);\n        var /** @type {?} */ childConfig = getChildConfig(route);\n        var _b = split$1(rawSegment, consumedSegments, rawSlicedSegments, childConfig), segmentGroup = _b.segmentGroup, slicedSegments = _b.slicedSegments;\n        var /** @type {?} */ snapshot = new ActivatedRouteSnapshot(consumedSegments, parameters, Object.freeze(this.urlTree.queryParams), /** @type {?} */ ((this.urlTree.fragment)), getData(route), outlet, /** @type {?} */ ((route.component)), route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length, getResolve(route));\n        if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n            var /** @type {?} */ children_3 = this.processChildren(childConfig, segmentGroup);\n            return [new TreeNode(snapshot, children_3)];\n        }\n        if (childConfig.length === 0 && slicedSegments.length === 0) {\n            return [new TreeNode(snapshot, [])];\n        }\n        var /** @type {?} */ children = this.processSegment(childConfig, segmentGroup, slicedSegments, PRIMARY_OUTLET);\n        return [new TreeNode(snapshot, children)];\n    };\n    return Recognizer;\n}());\n/**\n * @param {?} nodes\n * @return {?}\n */\nfunction sortActivatedRouteSnapshots(nodes) {\n    nodes.sort(function (a, b) {\n        if (a.value.outlet === PRIMARY_OUTLET)\n            return -1;\n        if (b.value.outlet === PRIMARY_OUTLET)\n            return 1;\n        return a.value.outlet.localeCompare(b.value.outlet);\n    });\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getChildConfig(route) {\n    if (route.children) {\n        return route.children;\n    }\n    if (route.loadChildren) {\n        return ((route._loadedConfig)).routes;\n    }\n    return [];\n}\n/**\n * @param {?} segmentGroup\n * @param {?} route\n * @param {?} segments\n * @return {?}\n */\nfunction match$1(segmentGroup, route, segments) {\n    if (route.path === '') {\n        if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {\n            throw new NoMatch$1();\n        }\n        return { consumedSegments: [], lastChild: 0, parameters: {} };\n    }\n    var /** @type {?} */ matcher = route.matcher || defaultUrlMatcher;\n    var /** @type {?} */ res = matcher(segments, segmentGroup, route);\n    if (!res)\n        throw new NoMatch$1();\n    var /** @type {?} */ posParams = {};\n    forEach(/** @type {?} */ ((res.posParams)), function (v, k) { posParams[k] = v.path; });\n    var /** @type {?} */ parameters = res.consumed.length > 0 ? Object.assign({}, posParams, res.consumed[res.consumed.length - 1].parameters) :\n        posParams;\n    return { consumedSegments: res.consumed, lastChild: res.consumed.length, parameters: parameters };\n}\n/**\n * @param {?} nodes\n * @return {?}\n */\nfunction checkOutletNameUniqueness(nodes) {\n    var /** @type {?} */ names = {};\n    nodes.forEach(function (n) {\n        var /** @type {?} */ routeWithSameOutletName = names[n.value.outlet];\n        if (routeWithSameOutletName) {\n            var /** @type {?} */ p = routeWithSameOutletName.url.map(function (s) { return s.toString(); }).join('/');\n            var /** @type {?} */ c = n.value.url.map(function (s) { return s.toString(); }).join('/');\n            throw new Error(\"Two segments cannot have the same outlet name: '\" + p + \"' and '\" + c + \"'.\");\n        }\n        names[n.value.outlet] = n.value;\n    });\n}\n/**\n * @param {?} segmentGroup\n * @return {?}\n */\nfunction getSourceSegmentGroup(segmentGroup) {\n    var /** @type {?} */ s = segmentGroup;\n    while (s._sourceSegment) {\n        s = s._sourceSegment;\n    }\n    return s;\n}\n/**\n * @param {?} segmentGroup\n * @return {?}\n */\nfunction getPathIndexShift(segmentGroup) {\n    var /** @type {?} */ s = segmentGroup;\n    var /** @type {?} */ res = (s._segmentIndexShift ? s._segmentIndexShift : 0);\n    while (s._sourceSegment) {\n        s = s._sourceSegment;\n        res += (s._segmentIndexShift ? s._segmentIndexShift : 0);\n    }\n    return res - 1;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} slicedSegments\n * @param {?} config\n * @return {?}\n */\nfunction split$1(segmentGroup, consumedSegments, slicedSegments, config) {\n    if (slicedSegments.length > 0 &&\n        containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n        var /** @type {?} */ s_1 = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(segmentGroup, consumedSegments, config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n        s_1._sourceSegment = segmentGroup;\n        s_1._segmentIndexShift = consumedSegments.length;\n        return { segmentGroup: s_1, slicedSegments: [] };\n    }\n    if (slicedSegments.length === 0 &&\n        containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {\n        var /** @type {?} */ s_2 = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));\n        s_2._sourceSegment = segmentGroup;\n        s_2._segmentIndexShift = consumedSegments.length;\n        return { segmentGroup: s_2, slicedSegments: slicedSegments };\n    }\n    var /** @type {?} */ s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);\n    s._sourceSegment = segmentGroup;\n    s._segmentIndexShift = consumedSegments.length;\n    return { segmentGroup: s, slicedSegments: slicedSegments };\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @param {?} children\n * @return {?}\n */\nfunction addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {\n    var /** @type {?} */ res = {};\n    for (var _i = 0, routes_3 = routes; _i < routes_3.length; _i++) {\n        var r = routes_3[_i];\n        if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet$1(r)]) {\n            var /** @type {?} */ s = new UrlSegmentGroup([], {});\n            s._sourceSegment = segmentGroup;\n            s._segmentIndexShift = segmentGroup.segments.length;\n            res[getOutlet$1(r)] = s;\n        }\n    }\n    return Object.assign({}, children, res);\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} routes\n * @param {?} primarySegment\n * @return {?}\n */\nfunction createChildrenForEmptyPaths(segmentGroup, consumedSegments, routes, primarySegment) {\n    var /** @type {?} */ res = {};\n    res[PRIMARY_OUTLET] = primarySegment;\n    primarySegment._sourceSegment = segmentGroup;\n    primarySegment._segmentIndexShift = consumedSegments.length;\n    for (var _i = 0, routes_4 = routes; _i < routes_4.length; _i++) {\n        var r = routes_4[_i];\n        if (r.path === '' && getOutlet$1(r) !== PRIMARY_OUTLET) {\n            var /** @type {?} */ s = new UrlSegmentGroup([], {});\n            s._sourceSegment = segmentGroup;\n            s._segmentIndexShift = consumedSegments.length;\n            res[getOutlet$1(r)] = s;\n        }\n    }\n    return res;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {\n    return routes.some(function (r) { return emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet$1(r) !== PRIMARY_OUTLET; });\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {\n    return routes.some(function (r) { return emptyPathMatch(segmentGroup, slicedSegments, r); });\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} r\n * @return {?}\n */\nfunction emptyPathMatch(segmentGroup, slicedSegments, r) {\n    if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full') {\n        return false;\n    }\n    return r.path === '' && r.redirectTo === undefined;\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getOutlet$1(route) {\n    return route.outlet || PRIMARY_OUTLET;\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getData(route) {\n    return route.data || {};\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getResolve(route) {\n    return route.resolve || {};\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@whatItDoes Provides a way to customize when activated routes get reused.\n *\n * \\@experimental\n * @abstract\n */\nvar RouteReuseStrategy = (function () {\n    function RouteReuseStrategy() {\n    }\n    /**\n     * Determines if this route (and its subtree) should be detached to be reused later\n     * @abstract\n     * @param {?} route\n     * @return {?}\n     */\n    RouteReuseStrategy.prototype.shouldDetach = function (route) { };\n    /**\n     * Stores the detached route.\n     *\n     * Storing a `null` value should erase the previously stored value.\n     * @abstract\n     * @param {?} route\n     * @param {?} handle\n     * @return {?}\n     */\n    RouteReuseStrategy.prototype.store = function (route, handle) { };\n    /**\n     * Determines if this route (and its subtree) should be reattached\n     * @abstract\n     * @param {?} route\n     * @return {?}\n     */\n    RouteReuseStrategy.prototype.shouldAttach = function (route) { };\n    /**\n     * Retrieves the previously stored route\n     * @abstract\n     * @param {?} route\n     * @return {?}\n     */\n    RouteReuseStrategy.prototype.retrieve = function (route) { };\n    /**\n     * Determines if a route should be reused\n     * @abstract\n     * @param {?} future\n     * @param {?} curr\n     * @return {?}\n     */\n    RouteReuseStrategy.prototype.shouldReuseRoute = function (future, curr) { };\n    return RouteReuseStrategy;\n}());\n/**\n * Does not detach any subtrees. Reuses routes as long as their route config is the same.\n */\nvar DefaultRouteReuseStrategy = (function () {\n    function DefaultRouteReuseStrategy() {\n    }\n    /**\n     * @param {?} route\n     * @return {?}\n     */\n    DefaultRouteReuseStrategy.prototype.shouldDetach = function (route) { return false; };\n    /**\n     * @param {?} route\n     * @param {?} detachedTree\n     * @return {?}\n     */\n    DefaultRouteReuseStrategy.prototype.store = function (route, detachedTree) { };\n    /**\n     * @param {?} route\n     * @return {?}\n     */\n    DefaultRouteReuseStrategy.prototype.shouldAttach = function (route) { return false; };\n    /**\n     * @param {?} route\n     * @return {?}\n     */\n    DefaultRouteReuseStrategy.prototype.retrieve = function (route) { return null; };\n    /**\n     * @param {?} future\n     * @param {?} curr\n     * @return {?}\n     */\n    DefaultRouteReuseStrategy.prototype.shouldReuseRoute = function (future, curr) {\n        return future.routeConfig === curr.routeConfig;\n    };\n    return DefaultRouteReuseStrategy;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@docsNotRequired\n * \\@experimental\n */\nvar ROUTES = new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"InjectionToken\"]('ROUTES');\nvar RouterConfigLoader = (function () {\n    /**\n     * @param {?} loader\n     * @param {?} compiler\n     * @param {?=} onLoadStartListener\n     * @param {?=} onLoadEndListener\n     */\n    function RouterConfigLoader(loader, compiler, onLoadStartListener, onLoadEndListener) {\n        this.loader = loader;\n        this.compiler = compiler;\n        this.onLoadStartListener = onLoadStartListener;\n        this.onLoadEndListener = onLoadEndListener;\n    }\n    /**\n     * @param {?} parentInjector\n     * @param {?} route\n     * @return {?}\n     */\n    RouterConfigLoader.prototype.load = function (parentInjector, route) {\n        var _this = this;\n        if (this.onLoadStartListener) {\n            this.onLoadStartListener(route);\n        }\n        var /** @type {?} */ moduleFactory$ = this.loadModuleFactory(/** @type {?} */ ((route.loadChildren)));\n        return __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(moduleFactory$, function (factory) {\n            if (_this.onLoadEndListener) {\n                _this.onLoadEndListener(route);\n            }\n            var /** @type {?} */ module = factory.create(parentInjector);\n            return new LoadedRouterConfig(flatten(module.injector.get(ROUTES)), module);\n        });\n    };\n    /**\n     * @param {?} loadChildren\n     * @return {?}\n     */\n    RouterConfigLoader.prototype.loadModuleFactory = function (loadChildren) {\n        var _this = this;\n        if (typeof loadChildren === 'string') {\n            return Object(__WEBPACK_IMPORTED_MODULE_18_rxjs_observable_fromPromise__[\"fromPromise\"])(this.loader.load(loadChildren));\n        }\n        else {\n            return __WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap__[\"mergeMap\"].call(wrapIntoObservable(loadChildren()), function (t) {\n                if (t instanceof __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"NgModuleFactory\"]) {\n                    return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(t);\n                }\n                else {\n                    return Object(__WEBPACK_IMPORTED_MODULE_18_rxjs_observable_fromPromise__[\"fromPromise\"])(_this.compiler.compileModuleAsync(t));\n                }\n            });\n        }\n    };\n    return RouterConfigLoader;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@whatItDoes Provides a way to migrate AngularJS applications to Angular.\n *\n * \\@experimental\n * @abstract\n */\nvar UrlHandlingStrategy = (function () {\n    function UrlHandlingStrategy() {\n    }\n    /**\n     * Tells the router if this URL should be processed.\n     *\n     * When it returns true, the router will execute the regular navigation.\n     * When it returns false, the router will set the router state to an empty state.\n     * As a result, all the active components will be destroyed.\n     *\n     * @abstract\n     * @param {?} url\n     * @return {?}\n     */\n    UrlHandlingStrategy.prototype.shouldProcessUrl = function (url) { };\n    /**\n     * Extracts the part of the URL that should be handled by the router.\n     * The rest of the URL will remain untouched.\n     * @abstract\n     * @param {?} url\n     * @return {?}\n     */\n    UrlHandlingStrategy.prototype.extract = function (url) { };\n    /**\n     * Merges the URL fragment with the rest of the URL.\n     * @abstract\n     * @param {?} newUrlPart\n     * @param {?} rawUrl\n     * @return {?}\n     */\n    UrlHandlingStrategy.prototype.merge = function (newUrlPart, rawUrl) { };\n    return UrlHandlingStrategy;\n}());\n/**\n * \\@experimental\n */\nvar DefaultUrlHandlingStrategy = (function () {\n    function DefaultUrlHandlingStrategy() {\n    }\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    DefaultUrlHandlingStrategy.prototype.shouldProcessUrl = function (url) { return true; };\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    DefaultUrlHandlingStrategy.prototype.extract = function (url) { return url; };\n    /**\n     * @param {?} newUrlPart\n     * @param {?} wholeUrl\n     * @return {?}\n     */\n    DefaultUrlHandlingStrategy.prototype.merge = function (newUrlPart, wholeUrl) { return newUrlPart; };\n    return DefaultUrlHandlingStrategy;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} error\n * @return {?}\n */\nfunction defaultErrorHandler(error) {\n    throw error;\n}\n/**\n * \\@internal\n * @param {?} snapshot\n * @return {?}\n */\nfunction defaultRouterHook(snapshot) {\n    return (Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(null));\n}\n/**\n * \\@whatItDoes Provides the navigation and url manipulation capabilities.\n *\n * See {\\@link Routes} for more details and examples.\n *\n * \\@ngModule RouterModule\n *\n * \\@stable\n */\nvar Router = (function () {\n    /**\n     * @param {?} rootComponentType\n     * @param {?} urlSerializer\n     * @param {?} rootContexts\n     * @param {?} location\n     * @param {?} injector\n     * @param {?} loader\n     * @param {?} compiler\n     * @param {?} config\n     */\n    function Router(rootComponentType, urlSerializer, rootContexts, location, injector, loader, compiler, config) {\n        var _this = this;\n        this.rootComponentType = rootComponentType;\n        this.urlSerializer = urlSerializer;\n        this.rootContexts = rootContexts;\n        this.location = location;\n        this.config = config;\n        this.navigations = new __WEBPACK_IMPORTED_MODULE_3_rxjs_BehaviorSubject__[\"BehaviorSubject\"](/** @type {?} */ ((null)));\n        this.routerEvents = new __WEBPACK_IMPORTED_MODULE_4_rxjs_Subject__[\"Subject\"]();\n        this.navigationId = 0;\n        /**\n         * Error handler that is invoked when a navigation errors.\n         *\n         * See {\\@link ErrorHandler} for more information.\n         */\n        this.errorHandler = defaultErrorHandler;\n        /**\n         * Indicates if at least one navigation happened.\n         */\n        this.navigated = false;\n        /**\n         * Used by RouterModule. This allows us to\n         * pause the navigation either before preactivation or after it.\n         * \\@internal\n         */\n        this.hooks = {\n            beforePreactivation: defaultRouterHook,\n            afterPreactivation: defaultRouterHook\n        };\n        /**\n         * Extracts and merges URLs. Used for AngularJS to Angular migrations.\n         */\n        this.urlHandlingStrategy = new DefaultUrlHandlingStrategy();\n        this.routeReuseStrategy = new DefaultRouteReuseStrategy();\n        var onLoadStart = function (r) { return _this.triggerEvent(new RouteConfigLoadStart(r)); };\n        var onLoadEnd = function (r) { return _this.triggerEvent(new RouteConfigLoadEnd(r)); };\n        this.ngModule = injector.get(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"NgModuleRef\"]);\n        this.resetConfig(config);\n        this.currentUrlTree = createEmptyUrlTree();\n        this.rawUrlTree = this.currentUrlTree;\n        this.configLoader = new RouterConfigLoader(loader, compiler, onLoadStart, onLoadEnd);\n        this.currentRouterState = createEmptyState(this.currentUrlTree, this.rootComponentType);\n        this.processNavigations();\n    }\n    /**\n     * \\@internal\n     * TODO: this should be removed once the constructor of the router made internal\n     * @param {?} rootComponentType\n     * @return {?}\n     */\n    Router.prototype.resetRootComponentType = function (rootComponentType) {\n        this.rootComponentType = rootComponentType;\n        // TODO: vsavkin router 4.0 should make the root component set to null\n        // this will simplify the lifecycle of the router.\n        this.currentRouterState.root.component = this.rootComponentType;\n    };\n    /**\n     * Sets up the location change listener and performs the initial navigation.\n     * @return {?}\n     */\n    Router.prototype.initialNavigation = function () {\n        this.setUpLocationChangeListener();\n        if (this.navigationId === 0) {\n            this.navigateByUrl(this.location.path(true), { replaceUrl: true });\n        }\n    };\n    /**\n     * Sets up the location change listener.\n     * @return {?}\n     */\n    Router.prototype.setUpLocationChangeListener = function () {\n        var _this = this;\n        // Zone.current.wrap is needed because of the issue with RxJS scheduler,\n        // which does not work properly with zone.js in IE and Safari\n        if (!this.locationSubscription) {\n            this.locationSubscription = (this.location.subscribe(Zone.current.wrap(function (change) {\n                var /** @type {?} */ rawUrlTree = _this.urlSerializer.parse(change['url']);\n                var /** @type {?} */ source = change['type'] === 'popstate' ? 'popstate' : 'hashchange';\n                setTimeout(function () { _this.scheduleNavigation(rawUrlTree, source, { replaceUrl: true }); }, 0);\n            })));\n        }\n    };\n    Object.defineProperty(Router.prototype, \"routerState\", {\n        /**\n         * The current route state\n         * @return {?}\n         */\n        get: function () { return this.currentRouterState; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Router.prototype, \"url\", {\n        /**\n         * The current url\n         * @return {?}\n         */\n        get: function () { return this.serializeUrl(this.currentUrlTree); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Router.prototype, \"events\", {\n        /**\n         * An observable of router events\n         * @return {?}\n         */\n        get: function () { return this.routerEvents; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * \\@internal\n     * @param {?} e\n     * @return {?}\n     */\n    Router.prototype.triggerEvent = function (e) { this.routerEvents.next(e); };\n    /**\n     * Resets the configuration used for navigation and generating links.\n     *\n     * ### Usage\n     *\n     * ```\n     * router.resetConfig([\n     *  { path: 'team/:id', component: TeamCmp, children: [\n     *    { path: 'simple', component: SimpleCmp },\n     *    { path: 'user/:name', component: UserCmp }\n     *  ]}\n     * ]);\n     * ```\n     * @param {?} config\n     * @return {?}\n     */\n    Router.prototype.resetConfig = function (config) {\n        validateConfig(config);\n        this.config = config;\n        this.navigated = false;\n    };\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    Router.prototype.ngOnDestroy = function () { this.dispose(); };\n    /**\n     * Disposes of the router\n     * @return {?}\n     */\n    Router.prototype.dispose = function () {\n        if (this.locationSubscription) {\n            this.locationSubscription.unsubscribe();\n            this.locationSubscription = ((null));\n        }\n    };\n    /**\n     * Applies an array of commands to the current url tree and creates a new url tree.\n     *\n     * When given an activate route, applies the given commands starting from the route.\n     * When not given a route, applies the given command starting from the root.\n     *\n     * ### Usage\n     *\n     * ```\n     * // create /team/33/user/11\n     * router.createUrlTree(['/team', 33, 'user', 11]);\n     *\n     * // create /team/33;expand=true/user/11\n     * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n     *\n     * // you can collapse static segments like this (this works only with the first passed-in value):\n     * router.createUrlTree(['/team/33/user', userId]);\n     *\n     * // If the first segment can contain slashes, and you do not want the router to split it, you\n     * // can do the following:\n     *\n     * router.createUrlTree([{segmentPath: '/one/two'}]);\n     *\n     * // create /team/33/(user/11//right:chat)\n     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\n     *\n     * // remove the right secondary node\n     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n     *\n     * // assuming the current url is `/team/33/user/11` and the route points to `user/11`\n     *\n     * // navigate to /team/33/user/11/details\n     * router.createUrlTree(['details'], {relativeTo: route});\n     *\n     * // navigate to /team/33/user/22\n     * router.createUrlTree(['../22'], {relativeTo: route});\n     *\n     * // navigate to /team/44/user/22\n     * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n     * ```\n     * @param {?} commands\n     * @param {?=} navigationExtras\n     * @return {?}\n     */\n    Router.prototype.createUrlTree = function (commands, navigationExtras) {\n        if (navigationExtras === void 0) { navigationExtras = {}; }\n        var relativeTo = navigationExtras.relativeTo, queryParams = navigationExtras.queryParams, fragment = navigationExtras.fragment, preserveQueryParams = navigationExtras.preserveQueryParams, queryParamsHandling = navigationExtras.queryParamsHandling, preserveFragment = navigationExtras.preserveFragment;\n        if (Object(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"isDevMode\"])() && preserveQueryParams && (console) && (console.warn)) {\n            console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');\n        }\n        var /** @type {?} */ a = relativeTo || this.routerState.root;\n        var /** @type {?} */ f = preserveFragment ? this.currentUrlTree.fragment : fragment;\n        var /** @type {?} */ q = null;\n        if (queryParamsHandling) {\n            switch (queryParamsHandling) {\n                case 'merge':\n                    q = Object.assign({}, this.currentUrlTree.queryParams, queryParams);\n                    break;\n                case 'preserve':\n                    q = this.currentUrlTree.queryParams;\n                    break;\n                default:\n                    q = queryParams || null;\n            }\n        }\n        else {\n            q = preserveQueryParams ? this.currentUrlTree.queryParams : queryParams || null;\n        }\n        return createUrlTree(a, this.currentUrlTree, commands, /** @type {?} */ ((q)), /** @type {?} */ ((f)));\n    };\n    /**\n     * Navigate based on the provided url. This navigation is always absolute.\n     *\n     * Returns a promise that:\n     * - resolves to 'true' when navigation succeeds,\n     * - resolves to 'false' when navigation fails,\n     * - is rejected when an error happens.\n     *\n     * ### Usage\n     *\n     * ```\n     * router.navigateByUrl(\"/team/33/user/11\");\n     *\n     * // Navigate without updating the URL\n     * router.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n     * ```\n     *\n     * In opposite to `navigate`, `navigateByUrl` takes a whole URL\n     * and does not apply any delta to the current one.\n     * @param {?} url\n     * @param {?=} extras\n     * @return {?}\n     */\n    Router.prototype.navigateByUrl = function (url, extras) {\n        if (extras === void 0) { extras = { skipLocationChange: false }; }\n        var /** @type {?} */ urlTree = url instanceof UrlTree ? url : this.parseUrl(url);\n        var /** @type {?} */ mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);\n        return this.scheduleNavigation(mergedTree, 'imperative', extras);\n    };\n    /**\n     * Navigate based on the provided array of commands and a starting point.\n     * If no starting route is provided, the navigation is absolute.\n     *\n     * Returns a promise that:\n     * - resolves to 'true' when navigation succeeds,\n     * - resolves to 'false' when navigation fails,\n     * - is rejected when an error happens.\n     *\n     * ### Usage\n     *\n     * ```\n     * router.navigate(['team', 33, 'user', 11], {relativeTo: route});\n     *\n     * // Navigate without updating the URL\n     * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\n     * ```\n     *\n     * In opposite to `navigateByUrl`, `navigate` always takes a delta that is applied to the current\n     * URL.\n     * @param {?} commands\n     * @param {?=} extras\n     * @return {?}\n     */\n    Router.prototype.navigate = function (commands, extras) {\n        if (extras === void 0) { extras = { skipLocationChange: false }; }\n        validateCommands(commands);\n        if (typeof extras.queryParams === 'object' && extras.queryParams !== null) {\n            extras.queryParams = this.removeEmptyProps(extras.queryParams);\n        }\n        return this.navigateByUrl(this.createUrlTree(commands, extras), extras);\n    };\n    /**\n     * Serializes a {\\@link UrlTree} into a string\n     * @param {?} url\n     * @return {?}\n     */\n    Router.prototype.serializeUrl = function (url) { return this.urlSerializer.serialize(url); };\n    /**\n     * Parses a string into a {\\@link UrlTree}\n     * @param {?} url\n     * @return {?}\n     */\n    Router.prototype.parseUrl = function (url) { return this.urlSerializer.parse(url); };\n    /**\n     * Returns whether the url is activated\n     * @param {?} url\n     * @param {?} exact\n     * @return {?}\n     */\n    Router.prototype.isActive = function (url, exact) {\n        if (url instanceof UrlTree) {\n            return containsTree(this.currentUrlTree, url, exact);\n        }\n        var /** @type {?} */ urlTree = this.urlSerializer.parse(url);\n        return containsTree(this.currentUrlTree, urlTree, exact);\n    };\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n    Router.prototype.removeEmptyProps = function (params) {\n        return Object.keys(params).reduce(function (result, key) {\n            var /** @type {?} */ value = params[key];\n            if (value !== null && value !== undefined) {\n                result[key] = value;\n            }\n            return result;\n        }, {});\n    };\n    /**\n     * @return {?}\n     */\n    Router.prototype.processNavigations = function () {\n        var _this = this;\n        __WEBPACK_IMPORTED_MODULE_7_rxjs_operator_concatMap__[\"concatMap\"]\n            .call(this.navigations, function (nav) {\n            if (nav) {\n                _this.executeScheduledNavigation(nav);\n                // a failed navigation should not stop the router from processing\n                // further navigations => the catch\n                return nav.promise.catch(function () { });\n            }\n            else {\n                return (Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(null));\n            }\n        })\n            .subscribe(function () { });\n    };\n    /**\n     * @param {?} rawUrl\n     * @param {?} source\n     * @param {?} extras\n     * @return {?}\n     */\n    Router.prototype.scheduleNavigation = function (rawUrl, source, extras) {\n        var /** @type {?} */ lastNavigation = this.navigations.value;\n        // If the user triggers a navigation imperatively (e.g., by using navigateByUrl),\n        // and that navigation results in 'replaceState' that leads to the same URL,\n        // we should skip those.\n        if (lastNavigation && source !== 'imperative' && lastNavigation.source === 'imperative' &&\n            lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n            return Promise.resolve(true); // return value is not used\n        }\n        // Because of a bug in IE and Edge, the location class fires two events (popstate and\n        // hashchange) every single time. The second one should be ignored. Otherwise, the URL will\n        // flicker.\n        if (lastNavigation && source == 'hashchange' && lastNavigation.source === 'popstate' &&\n            lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n            return Promise.resolve(true); // return value is not used\n        }\n        var /** @type {?} */ resolve = null;\n        var /** @type {?} */ reject = null;\n        var /** @type {?} */ promise = new Promise(function (res, rej) {\n            resolve = res;\n            reject = rej;\n        });\n        var /** @type {?} */ id = ++this.navigationId;\n        this.navigations.next({ id: id, source: source, rawUrl: rawUrl, extras: extras, resolve: resolve, reject: reject, promise: promise });\n        // Make sure that the error is propagated even though `processNavigations` catch\n        // handler does not rethrow\n        return promise.catch(function (e) { return Promise.reject(e); });\n    };\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    Router.prototype.executeScheduledNavigation = function (_a) {\n        var _this = this;\n        var id = _a.id, rawUrl = _a.rawUrl, extras = _a.extras, resolve = _a.resolve, reject = _a.reject;\n        var /** @type {?} */ url = this.urlHandlingStrategy.extract(rawUrl);\n        var /** @type {?} */ urlTransition = !this.navigated || url.toString() !== this.currentUrlTree.toString();\n        if (urlTransition && this.urlHandlingStrategy.shouldProcessUrl(rawUrl)) {\n            this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));\n            Promise.resolve()\n                .then(function (_) { return _this.runNavigate(url, rawUrl, !!extras.skipLocationChange, !!extras.replaceUrl, id, null); })\n                .then(resolve, reject);\n            // we cannot process the current URL, but we could process the previous one =>\n            // we need to do some cleanup\n        }\n        else if (urlTransition && this.rawUrlTree &&\n            this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree)) {\n            this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));\n            Promise.resolve()\n                .then(function (_) { return _this.runNavigate(url, rawUrl, false, false, id, createEmptyState(url, _this.rootComponentType).snapshot); })\n                .then(resolve, reject);\n        }\n        else {\n            this.rawUrlTree = rawUrl;\n            resolve(null);\n        }\n    };\n    /**\n     * @param {?} url\n     * @param {?} rawUrl\n     * @param {?} shouldPreventPushState\n     * @param {?} shouldReplaceUrl\n     * @param {?} id\n     * @param {?} precreatedState\n     * @return {?}\n     */\n    Router.prototype.runNavigate = function (url, rawUrl, shouldPreventPushState, shouldReplaceUrl, id, precreatedState) {\n        var _this = this;\n        if (id !== this.navigationId) {\n            this.location.go(this.urlSerializer.serialize(this.currentUrlTree));\n            this.routerEvents.next(new NavigationCancel(id, this.serializeUrl(url), \"Navigation ID \" + id + \" is not equal to the current navigation id \" + this.navigationId));\n            return Promise.resolve(false);\n        }\n        return new Promise(function (resolvePromise, rejectPromise) {\n            // create an observable of the url and route state snapshot\n            // this operation do not result in any side effects\n            var /** @type {?} */ urlAndSnapshot$;\n            if (!precreatedState) {\n                var /** @type {?} */ moduleInjector = _this.ngModule.injector;\n                var /** @type {?} */ redirectsApplied$ = applyRedirects(moduleInjector, _this.configLoader, _this.urlSerializer, url, _this.config);\n                urlAndSnapshot$ = __WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap__[\"mergeMap\"].call(redirectsApplied$, function (appliedUrl) {\n                    return __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(recognize(_this.rootComponentType, _this.config, appliedUrl, _this.serializeUrl(appliedUrl)), function (snapshot) {\n                        _this.routerEvents.next(new RoutesRecognized(id, _this.serializeUrl(url), _this.serializeUrl(appliedUrl), snapshot));\n                        return { appliedUrl: appliedUrl, snapshot: snapshot };\n                    });\n                });\n            }\n            else {\n                urlAndSnapshot$ = Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])({ appliedUrl: url, snapshot: precreatedState });\n            }\n            var /** @type {?} */ beforePreactivationDone$ = __WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap__[\"mergeMap\"].call(urlAndSnapshot$, function (p) {\n                return __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(_this.hooks.beforePreactivation(p.snapshot), function () { return p; });\n            });\n            // run preactivation: guards and data resolvers\n            var /** @type {?} */ preActivation;\n            var /** @type {?} */ preactivationTraverse$ = __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(beforePreactivationDone$, function (_a) {\n                var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot;\n                var /** @type {?} */ moduleInjector = _this.ngModule.injector;\n                preActivation =\n                    new PreActivation(snapshot, _this.currentRouterState.snapshot, moduleInjector);\n                preActivation.traverse(_this.rootContexts);\n                return { appliedUrl: appliedUrl, snapshot: snapshot };\n            });\n            var /** @type {?} */ preactivationCheckGuards$ = __WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap__[\"mergeMap\"].call(preactivationTraverse$, function (_a) {\n                var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot;\n                if (_this.navigationId !== id)\n                    return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(false);\n                _this.triggerEvent(new GuardsCheckStart(id, _this.serializeUrl(url), appliedUrl, snapshot));\n                return __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(preActivation.checkGuards(), function (shouldActivate) {\n                    _this.triggerEvent(new GuardsCheckEnd(id, _this.serializeUrl(url), appliedUrl, snapshot, shouldActivate));\n                    return { appliedUrl: appliedUrl, snapshot: snapshot, shouldActivate: shouldActivate };\n                });\n            });\n            var /** @type {?} */ preactivationResolveData$ = __WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap__[\"mergeMap\"].call(preactivationCheckGuards$, function (p) {\n                if (_this.navigationId !== id)\n                    return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(false);\n                if (p.shouldActivate && preActivation.isActivating()) {\n                    _this.triggerEvent(new ResolveStart(id, _this.serializeUrl(url), p.appliedUrl, p.snapshot));\n                    return __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(preActivation.resolveData(), function () {\n                        _this.triggerEvent(new ResolveEnd(id, _this.serializeUrl(url), p.appliedUrl, p.snapshot));\n                        return p;\n                    });\n                }\n                else {\n                    return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(p);\n                }\n            });\n            var /** @type {?} */ preactivationDone$ = __WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap__[\"mergeMap\"].call(preactivationResolveData$, function (p) {\n                return __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(_this.hooks.afterPreactivation(p.snapshot), function () { return p; });\n            });\n            // create router state\n            // this operation has side effects => route state is being affected\n            var /** @type {?} */ routerState$ = __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(preactivationDone$, function (_a) {\n                var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot, shouldActivate = _a.shouldActivate;\n                if (shouldActivate) {\n                    var /** @type {?} */ state = createRouterState(_this.routeReuseStrategy, snapshot, _this.currentRouterState);\n                    return { appliedUrl: appliedUrl, state: state, shouldActivate: shouldActivate };\n                }\n                else {\n                    return { appliedUrl: appliedUrl, state: null, shouldActivate: shouldActivate };\n                }\n            });\n            // applied the new router state\n            // this operation has side effects\n            var /** @type {?} */ navigationIsSuccessful;\n            var /** @type {?} */ storedState = _this.currentRouterState;\n            var /** @type {?} */ storedUrl = _this.currentUrlTree;\n            routerState$\n                .forEach(function (_a) {\n                var appliedUrl = _a.appliedUrl, state = _a.state, shouldActivate = _a.shouldActivate;\n                if (!shouldActivate || id !== _this.navigationId) {\n                    navigationIsSuccessful = false;\n                    return;\n                }\n                _this.currentUrlTree = appliedUrl;\n                _this.rawUrlTree = _this.urlHandlingStrategy.merge(_this.currentUrlTree, rawUrl);\n                _this.currentRouterState = state;\n                if (!shouldPreventPushState) {\n                    var /** @type {?} */ path = _this.urlSerializer.serialize(_this.rawUrlTree);\n                    if (_this.location.isCurrentPathEqualTo(path) || shouldReplaceUrl) {\n                        _this.location.replaceState(path);\n                    }\n                    else {\n                        _this.location.go(path);\n                    }\n                }\n                new ActivateRoutes(_this.routeReuseStrategy, state, storedState)\n                    .activate(_this.rootContexts);\n                navigationIsSuccessful = true;\n            })\n                .then(function () {\n                if (navigationIsSuccessful) {\n                    _this.navigated = true;\n                    _this.routerEvents.next(new NavigationEnd(id, _this.serializeUrl(url), _this.serializeUrl(_this.currentUrlTree)));\n                    resolvePromise(true);\n                }\n                else {\n                    _this.resetUrlToCurrentUrlTree();\n                    _this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url), ''));\n                    resolvePromise(false);\n                }\n            }, function (e) {\n                if (isNavigationCancelingError(e)) {\n                    _this.resetUrlToCurrentUrlTree();\n                    _this.navigated = true;\n                    _this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url), e.message));\n                    resolvePromise(false);\n                }\n                else {\n                    _this.routerEvents.next(new NavigationError(id, _this.serializeUrl(url), e));\n                    try {\n                        resolvePromise(_this.errorHandler(e));\n                    }\n                    catch (ee) {\n                        rejectPromise(ee);\n                    }\n                }\n                _this.currentRouterState = storedState;\n                _this.currentUrlTree = storedUrl;\n                _this.rawUrlTree = _this.urlHandlingStrategy.merge(_this.currentUrlTree, rawUrl);\n                _this.location.replaceState(_this.serializeUrl(_this.rawUrlTree));\n            });\n        });\n    };\n    /**\n     * @return {?}\n     */\n    Router.prototype.resetUrlToCurrentUrlTree = function () {\n        var /** @type {?} */ path = this.urlSerializer.serialize(this.rawUrlTree);\n        this.location.replaceState(path);\n    };\n    return Router;\n}());\nvar CanActivate = (function () {\n    /**\n     * @param {?} path\n     */\n    function CanActivate(path) {\n        this.path = path;\n    }\n    Object.defineProperty(CanActivate.prototype, \"route\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.path[this.path.length - 1]; },\n        enumerable: true,\n        configurable: true\n    });\n    return CanActivate;\n}());\nvar CanDeactivate = (function () {\n    /**\n     * @param {?} component\n     * @param {?} route\n     */\n    function CanDeactivate(component, route) {\n        this.component = component;\n        this.route = route;\n    }\n    return CanDeactivate;\n}());\nvar PreActivation = (function () {\n    /**\n     * @param {?} future\n     * @param {?} curr\n     * @param {?} moduleInjector\n     */\n    function PreActivation(future, curr, moduleInjector) {\n        this.future = future;\n        this.curr = curr;\n        this.moduleInjector = moduleInjector;\n        this.canActivateChecks = [];\n        this.canDeactivateChecks = [];\n    }\n    /**\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    PreActivation.prototype.traverse = function (parentContexts) {\n        var /** @type {?} */ futureRoot = this.future._root;\n        var /** @type {?} */ currRoot = this.curr ? this.curr._root : null;\n        this.traverseChildRoutes(futureRoot, currRoot, parentContexts, [futureRoot.value]);\n    };\n    /**\n     * @return {?}\n     */\n    PreActivation.prototype.checkGuards = function () {\n        var _this = this;\n        if (!this.isDeactivating() && !this.isActivating()) {\n            return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(true);\n        }\n        var /** @type {?} */ canDeactivate$ = this.runCanDeactivateChecks();\n        return __WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap__[\"mergeMap\"].call(canDeactivate$, function (canDeactivate) { return canDeactivate ? _this.runCanActivateChecks() : Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(false); });\n    };\n    /**\n     * @return {?}\n     */\n    PreActivation.prototype.resolveData = function () {\n        var _this = this;\n        if (!this.isActivating())\n            return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(null);\n        var /** @type {?} */ checks$ = Object(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_from__[\"from\"])(this.canActivateChecks);\n        var /** @type {?} */ runningChecks$ = __WEBPACK_IMPORTED_MODULE_7_rxjs_operator_concatMap__[\"concatMap\"].call(checks$, function (check) { return _this.runResolve(check.route); });\n        return __WEBPACK_IMPORTED_MODULE_13_rxjs_operator_reduce__[\"reduce\"].call(runningChecks$, function (_, __) { return _; });\n    };\n    /**\n     * @return {?}\n     */\n    PreActivation.prototype.isDeactivating = function () { return this.canDeactivateChecks.length !== 0; };\n    /**\n     * @return {?}\n     */\n    PreActivation.prototype.isActivating = function () { return this.canActivateChecks.length !== 0; };\n    /**\n     * @param {?} futureNode\n     * @param {?} currNode\n     * @param {?} contexts\n     * @param {?} futurePath\n     * @return {?}\n     */\n    PreActivation.prototype.traverseChildRoutes = function (futureNode, currNode, contexts, futurePath) {\n        var _this = this;\n        var /** @type {?} */ prevChildren = nodeChildrenAsMap(currNode);\n        // Process the children of the future route\n        futureNode.children.forEach(function (c) {\n            _this.traverseRoutes(c, prevChildren[c.value.outlet], contexts, futurePath.concat([c.value]));\n            delete prevChildren[c.value.outlet];\n        });\n        // Process any children left from the current route (not active for the future route)\n        forEach(prevChildren, function (v, k) { return _this.deactivateRouteAndItsChildren(v, /** @type {?} */ ((contexts)).getContext(k)); });\n    };\n    /**\n     * @param {?} futureNode\n     * @param {?} currNode\n     * @param {?} parentContexts\n     * @param {?} futurePath\n     * @return {?}\n     */\n    PreActivation.prototype.traverseRoutes = function (futureNode, currNode, parentContexts, futurePath) {\n        var /** @type {?} */ future = futureNode.value;\n        var /** @type {?} */ curr = currNode ? currNode.value : null;\n        var /** @type {?} */ context = parentContexts ? parentContexts.getContext(futureNode.value.outlet) : null;\n        // reusing the node\n        if (curr && future._routeConfig === curr._routeConfig) {\n            var /** @type {?} */ shouldRunGuardsAndResolvers = this.shouldRunGuardsAndResolvers(curr, future, /** @type {?} */ ((future._routeConfig)).runGuardsAndResolvers);\n            if (shouldRunGuardsAndResolvers) {\n                this.canActivateChecks.push(new CanActivate(futurePath));\n            }\n            else {\n                // we need to set the data\n                future.data = curr.data;\n                future._resolvedData = curr._resolvedData;\n            }\n            // If we have a component, we need to go through an outlet.\n            if (future.component) {\n                this.traverseChildRoutes(futureNode, currNode, context ? context.children : null, futurePath);\n                // if we have a componentless route, we recurse but keep the same outlet map.\n            }\n            else {\n                this.traverseChildRoutes(futureNode, currNode, parentContexts, futurePath);\n            }\n            if (shouldRunGuardsAndResolvers) {\n                var /** @type {?} */ outlet = ((((context)).outlet));\n                this.canDeactivateChecks.push(new CanDeactivate(outlet.component, curr));\n            }\n        }\n        else {\n            if (curr) {\n                this.deactivateRouteAndItsChildren(currNode, context);\n            }\n            this.canActivateChecks.push(new CanActivate(futurePath));\n            // If we have a component, we need to go through an outlet.\n            if (future.component) {\n                this.traverseChildRoutes(futureNode, null, context ? context.children : null, futurePath);\n                // if we have a componentless route, we recurse but keep the same outlet map.\n            }\n            else {\n                this.traverseChildRoutes(futureNode, null, parentContexts, futurePath);\n            }\n        }\n    };\n    /**\n     * @param {?} curr\n     * @param {?} future\n     * @param {?} mode\n     * @return {?}\n     */\n    PreActivation.prototype.shouldRunGuardsAndResolvers = function (curr, future, mode) {\n        switch (mode) {\n            case 'always':\n                return true;\n            case 'paramsOrQueryParamsChange':\n                return !equalParamsAndUrlSegments(curr, future) ||\n                    !shallowEqual(curr.queryParams, future.queryParams);\n            case 'paramsChange':\n            default:\n                return !equalParamsAndUrlSegments(curr, future);\n        }\n    };\n    /**\n     * @param {?} route\n     * @param {?} context\n     * @return {?}\n     */\n    PreActivation.prototype.deactivateRouteAndItsChildren = function (route, context) {\n        var _this = this;\n        var /** @type {?} */ children = nodeChildrenAsMap(route);\n        var /** @type {?} */ r = route.value;\n        forEach(children, function (node, childName) {\n            if (!r.component) {\n                _this.deactivateRouteAndItsChildren(node, context);\n            }\n            else if (context) {\n                _this.deactivateRouteAndItsChildren(node, context.children.getContext(childName));\n            }\n            else {\n                _this.deactivateRouteAndItsChildren(node, null);\n            }\n        });\n        if (!r.component) {\n            this.canDeactivateChecks.push(new CanDeactivate(null, r));\n        }\n        else if (context && context.outlet && context.outlet.isActivated) {\n            this.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, r));\n        }\n        else {\n            this.canDeactivateChecks.push(new CanDeactivate(null, r));\n        }\n    };\n    /**\n     * @return {?}\n     */\n    PreActivation.prototype.runCanDeactivateChecks = function () {\n        var _this = this;\n        var /** @type {?} */ checks$ = Object(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_from__[\"from\"])(this.canDeactivateChecks);\n        var /** @type {?} */ runningChecks$ = __WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap__[\"mergeMap\"].call(checks$, function (check) { return _this.runCanDeactivate(check.component, check.route); });\n        return __WEBPACK_IMPORTED_MODULE_8_rxjs_operator_every__[\"every\"].call(runningChecks$, function (result) { return result === true; });\n    };\n    /**\n     * @return {?}\n     */\n    PreActivation.prototype.runCanActivateChecks = function () {\n        var _this = this;\n        var /** @type {?} */ checks$ = Object(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_from__[\"from\"])(this.canActivateChecks);\n        var /** @type {?} */ runningChecks$ = __WEBPACK_IMPORTED_MODULE_7_rxjs_operator_concatMap__[\"concatMap\"].call(checks$, function (check) { return andObservables(Object(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_from__[\"from\"])([_this.runCanActivateChild(check.path), _this.runCanActivate(check.route)])); });\n        return __WEBPACK_IMPORTED_MODULE_8_rxjs_operator_every__[\"every\"].call(runningChecks$, function (result) { return result === true; });\n    };\n    /**\n     * @param {?} future\n     * @return {?}\n     */\n    PreActivation.prototype.runCanActivate = function (future) {\n        var _this = this;\n        var /** @type {?} */ canActivate = future._routeConfig ? future._routeConfig.canActivate : null;\n        if (!canActivate || canActivate.length === 0)\n            return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(true);\n        var /** @type {?} */ obs = __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(Object(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_from__[\"from\"])(canActivate), function (c) {\n            var /** @type {?} */ guard = _this.getToken(c, future);\n            var /** @type {?} */ observable;\n            if (guard.canActivate) {\n                observable = wrapIntoObservable(guard.canActivate(future, _this.future));\n            }\n            else {\n                observable = wrapIntoObservable(guard(future, _this.future));\n            }\n            return __WEBPACK_IMPORTED_MODULE_9_rxjs_operator_first__[\"first\"].call(observable);\n        });\n        return andObservables(obs);\n    };\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    PreActivation.prototype.runCanActivateChild = function (path) {\n        var _this = this;\n        var /** @type {?} */ future = path[path.length - 1];\n        var /** @type {?} */ canActivateChildGuards = path.slice(0, path.length - 1)\n            .reverse()\n            .map(function (p) { return _this.extractCanActivateChild(p); })\n            .filter(function (_) { return _ !== null; });\n        return andObservables(__WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(Object(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_from__[\"from\"])(canActivateChildGuards), function (d) {\n            var /** @type {?} */ obs = __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(Object(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_from__[\"from\"])(d.guards), function (c) {\n                var /** @type {?} */ guard = _this.getToken(c, d.node);\n                var /** @type {?} */ observable;\n                if (guard.canActivateChild) {\n                    observable = wrapIntoObservable(guard.canActivateChild(future, _this.future));\n                }\n                else {\n                    observable = wrapIntoObservable(guard(future, _this.future));\n                }\n                return __WEBPACK_IMPORTED_MODULE_9_rxjs_operator_first__[\"first\"].call(observable);\n            });\n            return andObservables(obs);\n        }));\n    };\n    /**\n     * @param {?} p\n     * @return {?}\n     */\n    PreActivation.prototype.extractCanActivateChild = function (p) {\n        var /** @type {?} */ canActivateChild = p._routeConfig ? p._routeConfig.canActivateChild : null;\n        if (!canActivateChild || canActivateChild.length === 0)\n            return null;\n        return { node: p, guards: canActivateChild };\n    };\n    /**\n     * @param {?} component\n     * @param {?} curr\n     * @return {?}\n     */\n    PreActivation.prototype.runCanDeactivate = function (component, curr) {\n        var _this = this;\n        var /** @type {?} */ canDeactivate = curr && curr._routeConfig ? curr._routeConfig.canDeactivate : null;\n        if (!canDeactivate || canDeactivate.length === 0)\n            return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(true);\n        var /** @type {?} */ canDeactivate$ = __WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap__[\"mergeMap\"].call(Object(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_from__[\"from\"])(canDeactivate), function (c) {\n            var /** @type {?} */ guard = _this.getToken(c, curr);\n            var /** @type {?} */ observable;\n            if (guard.canDeactivate) {\n                observable =\n                    wrapIntoObservable(guard.canDeactivate(component, curr, _this.curr, _this.future));\n            }\n            else {\n                observable = wrapIntoObservable(guard(component, curr, _this.curr, _this.future));\n            }\n            return __WEBPACK_IMPORTED_MODULE_9_rxjs_operator_first__[\"first\"].call(observable);\n        });\n        return __WEBPACK_IMPORTED_MODULE_8_rxjs_operator_every__[\"every\"].call(canDeactivate$, function (result) { return result === true; });\n    };\n    /**\n     * @param {?} future\n     * @return {?}\n     */\n    PreActivation.prototype.runResolve = function (future) {\n        var /** @type {?} */ resolve = future._resolve;\n        return __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(this.resolveNode(resolve, future), function (resolvedData) {\n            future._resolvedData = resolvedData;\n            future.data = Object.assign({}, future.data, inheritedParamsDataResolve(future).resolve);\n            return null;\n        });\n    };\n    /**\n     * @param {?} resolve\n     * @param {?} future\n     * @return {?}\n     */\n    PreActivation.prototype.resolveNode = function (resolve, future) {\n        var _this = this;\n        var /** @type {?} */ keys = Object.keys(resolve);\n        if (keys.length === 0) {\n            return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])({});\n        }\n        if (keys.length === 1) {\n            var /** @type {?} */ key_1 = keys[0];\n            return __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(this.getResolver(resolve[key_1], future), function (value) {\n                return _a = {}, _a[key_1] = value, _a;\n                var _a;\n            });\n        }\n        var /** @type {?} */ data = {};\n        var /** @type {?} */ runningResolvers$ = __WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap__[\"mergeMap\"].call(Object(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_from__[\"from\"])(keys), function (key) {\n            return __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(_this.getResolver(resolve[key], future), function (value) {\n                data[key] = value;\n                return value;\n            });\n        });\n        return __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(__WEBPACK_IMPORTED_MODULE_10_rxjs_operator_last__[\"last\"].call(runningResolvers$), function () { return data; });\n    };\n    /**\n     * @param {?} injectionToken\n     * @param {?} future\n     * @return {?}\n     */\n    PreActivation.prototype.getResolver = function (injectionToken, future) {\n        var /** @type {?} */ resolver = this.getToken(injectionToken, future);\n        return resolver.resolve ? wrapIntoObservable(resolver.resolve(future, this.future)) :\n            wrapIntoObservable(resolver(future, this.future));\n    };\n    /**\n     * @param {?} token\n     * @param {?} snapshot\n     * @return {?}\n     */\n    PreActivation.prototype.getToken = function (token, snapshot) {\n        var /** @type {?} */ config = closestLoadedConfig(snapshot);\n        var /** @type {?} */ injector = config ? config.module.injector : this.moduleInjector;\n        return injector.get(token);\n    };\n    return PreActivation;\n}());\nvar ActivateRoutes = (function () {\n    /**\n     * @param {?} routeReuseStrategy\n     * @param {?} futureState\n     * @param {?} currState\n     */\n    function ActivateRoutes(routeReuseStrategy, futureState, currState) {\n        this.routeReuseStrategy = routeReuseStrategy;\n        this.futureState = futureState;\n        this.currState = currState;\n    }\n    /**\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    ActivateRoutes.prototype.activate = function (parentContexts) {\n        var /** @type {?} */ futureRoot = this.futureState._root;\n        var /** @type {?} */ currRoot = this.currState ? this.currState._root : null;\n        this.deactivateChildRoutes(futureRoot, currRoot, parentContexts);\n        advanceActivatedRoute(this.futureState.root);\n        this.activateChildRoutes(futureRoot, currRoot, parentContexts);\n    };\n    /**\n     * @param {?} futureNode\n     * @param {?} currNode\n     * @param {?} contexts\n     * @return {?}\n     */\n    ActivateRoutes.prototype.deactivateChildRoutes = function (futureNode, currNode, contexts) {\n        var _this = this;\n        var /** @type {?} */ children = nodeChildrenAsMap(currNode);\n        // Recurse on the routes active in the future state to de-activate deeper children\n        futureNode.children.forEach(function (futureChild) {\n            var /** @type {?} */ childOutletName = futureChild.value.outlet;\n            _this.deactivateRoutes(futureChild, children[childOutletName], contexts);\n            delete children[childOutletName];\n        });\n        // De-activate the routes that will not be re-used\n        forEach(children, function (v, childName) {\n            _this.deactivateRouteAndItsChildren(v, contexts);\n        });\n    };\n    /**\n     * @param {?} futureNode\n     * @param {?} currNode\n     * @param {?} parentContext\n     * @return {?}\n     */\n    ActivateRoutes.prototype.deactivateRoutes = function (futureNode, currNode, parentContext) {\n        var /** @type {?} */ future = futureNode.value;\n        var /** @type {?} */ curr = currNode ? currNode.value : null;\n        if (future === curr) {\n            // Reusing the node, check to see if the children need to be de-activated\n            if (future.component) {\n                // If we have a normal route, we need to go through an outlet.\n                var /** @type {?} */ context = parentContext.getContext(future.outlet);\n                if (context) {\n                    this.deactivateChildRoutes(futureNode, currNode, context.children);\n                }\n            }\n            else {\n                // if we have a componentless route, we recurse but keep the same outlet map.\n                this.deactivateChildRoutes(futureNode, currNode, parentContext);\n            }\n        }\n        else {\n            if (curr) {\n                // Deactivate the current route which will not be re-used\n                this.deactivateRouteAndItsChildren(currNode, parentContext);\n            }\n        }\n    };\n    /**\n     * @param {?} route\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    ActivateRoutes.prototype.deactivateRouteAndItsChildren = function (route, parentContexts) {\n        if (this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {\n            this.detachAndStoreRouteSubtree(route, parentContexts);\n        }\n        else {\n            this.deactivateRouteAndOutlet(route, parentContexts);\n        }\n    };\n    /**\n     * @param {?} route\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    ActivateRoutes.prototype.detachAndStoreRouteSubtree = function (route, parentContexts) {\n        var /** @type {?} */ context = parentContexts.getContext(route.value.outlet);\n        if (context && context.outlet) {\n            var /** @type {?} */ componentRef = context.outlet.detach();\n            var /** @type {?} */ contexts = context.children.onOutletDeactivated();\n            this.routeReuseStrategy.store(route.value.snapshot, { componentRef: componentRef, route: route, contexts: contexts });\n        }\n    };\n    /**\n     * @param {?} route\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    ActivateRoutes.prototype.deactivateRouteAndOutlet = function (route, parentContexts) {\n        var _this = this;\n        var /** @type {?} */ context = parentContexts.getContext(route.value.outlet);\n        if (context) {\n            var /** @type {?} */ children = nodeChildrenAsMap(route);\n            var /** @type {?} */ contexts_1 = route.value.component ? context.children : parentContexts;\n            forEach(children, function (v, k) { return _this.deactivateRouteAndItsChildren(v, contexts_1); });\n            if (context.outlet) {\n                // Destroy the component\n                context.outlet.deactivate();\n                // Destroy the contexts for all the outlets that were in the component\n                context.children.onOutletDeactivated();\n            }\n        }\n    };\n    /**\n     * @param {?} futureNode\n     * @param {?} currNode\n     * @param {?} contexts\n     * @return {?}\n     */\n    ActivateRoutes.prototype.activateChildRoutes = function (futureNode, currNode, contexts) {\n        var _this = this;\n        var /** @type {?} */ children = nodeChildrenAsMap(currNode);\n        futureNode.children.forEach(function (c) { _this.activateRoutes(c, children[c.value.outlet], contexts); });\n    };\n    /**\n     * @param {?} futureNode\n     * @param {?} currNode\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    ActivateRoutes.prototype.activateRoutes = function (futureNode, currNode, parentContexts) {\n        var /** @type {?} */ future = futureNode.value;\n        var /** @type {?} */ curr = currNode ? currNode.value : null;\n        advanceActivatedRoute(future);\n        // reusing the node\n        if (future === curr) {\n            if (future.component) {\n                // If we have a normal route, we need to go through an outlet.\n                var /** @type {?} */ context = parentContexts.getOrCreateContext(future.outlet);\n                this.activateChildRoutes(futureNode, currNode, context.children);\n            }\n            else {\n                // if we have a componentless route, we recurse but keep the same outlet map.\n                this.activateChildRoutes(futureNode, currNode, parentContexts);\n            }\n        }\n        else {\n            if (future.component) {\n                // if we have a normal route, we need to place the component into the outlet and recurse.\n                var /** @type {?} */ context = parentContexts.getOrCreateContext(future.outlet);\n                if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {\n                    var /** @type {?} */ stored = ((this.routeReuseStrategy.retrieve(future.snapshot)));\n                    this.routeReuseStrategy.store(future.snapshot, null);\n                    context.children.onOutletReAttached(stored.contexts);\n                    context.attachRef = stored.componentRef;\n                    context.route = stored.route.value;\n                    if (context.outlet) {\n                        // Attach right away when the outlet has already been instantiated\n                        // Otherwise attach from `RouterOutlet.ngOnInit` when it is instantiated\n                        context.outlet.attach(stored.componentRef, stored.route.value);\n                    }\n                    advanceActivatedRouteNodeAndItsChildren(stored.route);\n                }\n                else {\n                    var /** @type {?} */ config = parentLoadedConfig(future.snapshot);\n                    var /** @type {?} */ cmpFactoryResolver = config ? config.module.componentFactoryResolver : null;\n                    context.route = future;\n                    context.resolver = cmpFactoryResolver;\n                    if (context.outlet) {\n                        // Activate the outlet when it has already been instantiated\n                        // Otherwise it will get activated from its `ngOnInit` when instantiated\n                        context.outlet.activateWith(future, cmpFactoryResolver);\n                    }\n                    this.activateChildRoutes(futureNode, null, context.children);\n                }\n            }\n            else {\n                // if we have a componentless route, we recurse but keep the same outlet map.\n                this.activateChildRoutes(futureNode, null, parentContexts);\n            }\n        }\n    };\n    return ActivateRoutes;\n}());\n/**\n * @param {?} node\n * @return {?}\n */\nfunction advanceActivatedRouteNodeAndItsChildren(node) {\n    advanceActivatedRoute(node.value);\n    node.children.forEach(advanceActivatedRouteNodeAndItsChildren);\n}\n/**\n * @param {?} snapshot\n * @return {?}\n */\nfunction parentLoadedConfig(snapshot) {\n    for (var /** @type {?} */ s = snapshot.parent; s; s = s.parent) {\n        var /** @type {?} */ route = s._routeConfig;\n        if (route && route._loadedConfig)\n            return route._loadedConfig;\n        if (route && route.component)\n            return null;\n    }\n    return null;\n}\n/**\n * @param {?} snapshot\n * @return {?}\n */\nfunction closestLoadedConfig(snapshot) {\n    if (!snapshot)\n        return null;\n    for (var /** @type {?} */ s = snapshot.parent; s; s = s.parent) {\n        var /** @type {?} */ route = s._routeConfig;\n        if (route && route._loadedConfig)\n            return route._loadedConfig;\n    }\n    return null;\n}\n/**\n * @template T\n * @param {?} node\n * @return {?}\n */\nfunction nodeChildrenAsMap(node) {\n    var /** @type {?} */ map$$1 = {};\n    if (node) {\n        node.children.forEach(function (child) { return map$$1[child.value.outlet] = child; });\n    }\n    return map$$1;\n}\n/**\n * @param {?} commands\n * @return {?}\n */\nfunction validateCommands(commands) {\n    for (var /** @type {?} */ i = 0; i < commands.length; i++) {\n        var /** @type {?} */ cmd = commands[i];\n        if (cmd == null) {\n            throw new Error(\"The requested path contains \" + cmd + \" segment at index \" + i);\n        }\n    }\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@whatItDoes Lets you link to specific parts of your app.\n *\n * \\@howToUse\n *\n * Consider the following route configuration:\n * `[{ path: 'user/:name', component: UserCmp }]`\n *\n * When linking to this `user/:name` route, you can write:\n * `<a routerLink='/user/bob'>link to user component<\/a>`\n *\n * \\@description\n *\n * The RouterLink directives let you link to specific parts of your app.\n *\n * When the link is static, you can use the directive as follows:\n * `<a routerLink=\"/user/bob\">link to user component<\/a>`\n *\n * If you use dynamic values to generate the link, you can pass an array of path\n * segments, followed by the params for each segment.\n *\n * For instance `['/team', teamId, 'user', userName, {details: true}]`\n * means that we want to generate a link to `/team/11/user/bob;details=true`.\n *\n * Multiple static segments can be merged into one\n * (e.g., `['/team/11/user', userName, {details: true}]`).\n *\n * The first segment name can be prepended with `/`, `./`, or `../`:\n * * If the first segment begins with `/`, the router will look up the route from the root of the\n *   app.\n * * If the first segment begins with `./`, or doesn't begin with a slash, the router will\n *   instead look in the children of the current activated route.\n * * And if the first segment begins with `../`, the router will go up one level.\n *\n * You can set query params and fragment as follows:\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\n *   link to user component\n * <\/a>\n * ```\n * RouterLink will use these to generate this link: `/user/bob#education?debug=true`.\n *\n * (Deprecated in v4.0.0 use `queryParamsHandling` instead) You can also tell the\n * directive to preserve the current query params and fragment:\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" preserveQueryParams preserveFragment>\n *   link to user component\n * <\/a>\n * ```\n *\n * You can tell the directive to how to handle queryParams, available options are:\n *  - 'merge' merge the queryParams into the current queryParams\n *  - 'preserve' preserve the current queryParams\n *  - default / '' use the queryParams only\n *  same options for {\\@link NavigationExtras#queryParamsHandling}\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" queryParamsHandling=\"merge\">\n *   link to user component\n * <\/a>\n * ```\n *\n * The router link directive always treats the provided input as a delta to the current url.\n *\n * For instance, if the current url is `/user/(box//aux:team)`.\n *\n * Then the following link `<a [routerLink]=\"['/user/jim']\">Jim<\/a>` will generate the link\n * `/user/(jim//aux:team)`.\n *\n * \\@ngModule RouterModule\n *\n * See {\\@link Router#createUrlTree} for more information.\n *\n * \\@stable\n */\nvar RouterLink = (function () {\n    /**\n     * @param {?} router\n     * @param {?} route\n     * @param {?} tabIndex\n     * @param {?} renderer\n     * @param {?} el\n     */\n    function RouterLink(router, route, tabIndex, renderer, el) {\n        this.router = router;\n        this.route = route;\n        this.commands = [];\n        if (tabIndex == null) {\n            renderer.setAttribute(el.nativeElement, 'tabindex', '0');\n        }\n    }\n    Object.defineProperty(RouterLink.prototype, \"routerLink\", {\n        /**\n         * @param {?} commands\n         * @return {?}\n         */\n        set: function (commands) {\n            if (commands != null) {\n                this.commands = Array.isArray(commands) ? commands : [commands];\n            }\n            else {\n                this.commands = [];\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RouterLink.prototype, \"preserveQueryParams\", {\n        /**\n         * @deprecated 4.0.0 use `queryParamsHandling` instead.\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (Object(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"isDevMode\"])() && (console) && (console.warn)) {\n                console.warn('preserveQueryParams is deprecated!, use queryParamsHandling instead.');\n            }\n            this.preserve = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    RouterLink.prototype.onClick = function () {\n        var /** @type {?} */ extras = {\n            skipLocationChange: attrBoolValue(this.skipLocationChange),\n            replaceUrl: attrBoolValue(this.replaceUrl),\n        };\n        this.router.navigateByUrl(this.urlTree, extras);\n        return true;\n    };\n    Object.defineProperty(RouterLink.prototype, \"urlTree\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.router.createUrlTree(this.commands, {\n                relativeTo: this.route,\n                queryParams: this.queryParams,\n                fragment: this.fragment,\n                preserveQueryParams: attrBoolValue(this.preserve),\n                queryParamsHandling: this.queryParamsHandling,\n                preserveFragment: attrBoolValue(this.preserveFragment),\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return RouterLink;\n}());\nRouterLink.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Directive\"], args: [{ selector: ':not(a)[routerLink]' },] },\n];\n/**\n * @nocollapse\n */\nRouterLink.ctorParameters = function () { return [\n    { type: Router, },\n    { type: ActivatedRoute, },\n    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Attribute\"], args: ['tabindex',] },] },\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Renderer2\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ElementRef\"], },\n]; };\nRouterLink.propDecorators = {\n    'queryParams': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],\n    'fragment': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],\n    'queryParamsHandling': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],\n    'preserveFragment': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],\n    'skipLocationChange': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],\n    'replaceUrl': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],\n    'routerLink': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],\n    'preserveQueryParams': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],\n    'onClick': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"HostListener\"], args: ['click',] },],\n};\n/**\n * \\@whatItDoes Lets you link to specific parts of your app.\n *\n * See {\\@link RouterLink} for more information.\n *\n * \\@ngModule RouterModule\n *\n * \\@stable\n */\nvar RouterLinkWithHref = (function () {\n    /**\n     * @param {?} router\n     * @param {?} route\n     * @param {?} locationStrategy\n     */\n    function RouterLinkWithHref(router, route, locationStrategy) {\n        var _this = this;\n        this.router = router;\n        this.route = route;\n        this.locationStrategy = locationStrategy;\n        this.commands = [];\n        this.subscription = router.events.subscribe(function (s) {\n            if (s instanceof NavigationEnd) {\n                _this.updateTargetUrlAndHref();\n            }\n        });\n    }\n    Object.defineProperty(RouterLinkWithHref.prototype, \"routerLink\", {\n        /**\n         * @param {?} commands\n         * @return {?}\n         */\n        set: function (commands) {\n            if (commands != null) {\n                this.commands = Array.isArray(commands) ? commands : [commands];\n            }\n            else {\n                this.commands = [];\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RouterLinkWithHref.prototype, \"preserveQueryParams\", {\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (Object(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"isDevMode\"])() && (console) && (console.warn)) {\n                console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');\n            }\n            this.preserve = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    RouterLinkWithHref.prototype.ngOnChanges = function (changes) { this.updateTargetUrlAndHref(); };\n    /**\n     * @return {?}\n     */\n    RouterLinkWithHref.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };\n    /**\n     * @param {?} button\n     * @param {?} ctrlKey\n     * @param {?} metaKey\n     * @param {?} shiftKey\n     * @return {?}\n     */\n    RouterLinkWithHref.prototype.onClick = function (button, ctrlKey, metaKey, shiftKey) {\n        if (button !== 0 || ctrlKey || metaKey || shiftKey) {\n            return true;\n        }\n        if (typeof this.target === 'string' && this.target != '_self') {\n            return true;\n        }\n        var /** @type {?} */ extras = {\n            skipLocationChange: attrBoolValue(this.skipLocationChange),\n            replaceUrl: attrBoolValue(this.replaceUrl),\n        };\n        this.router.navigateByUrl(this.urlTree, extras);\n        return false;\n    };\n    /**\n     * @return {?}\n     */\n    RouterLinkWithHref.prototype.updateTargetUrlAndHref = function () {\n        this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));\n    };\n    Object.defineProperty(RouterLinkWithHref.prototype, \"urlTree\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.router.createUrlTree(this.commands, {\n                relativeTo: this.route,\n                queryParams: this.queryParams,\n                fragment: this.fragment,\n                preserveQueryParams: attrBoolValue(this.preserve),\n                queryParamsHandling: this.queryParamsHandling,\n                preserveFragment: attrBoolValue(this.preserveFragment),\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return RouterLinkWithHref;\n}());\nRouterLinkWithHref.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Directive\"], args: [{ selector: 'a[routerLink]' },] },\n];\n/**\n * @nocollapse\n */\nRouterLinkWithHref.ctorParameters = function () { return [\n    { type: Router, },\n    { type: ActivatedRoute, },\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_common__[\"LocationStrategy\"], },\n]; };\nRouterLinkWithHref.propDecorators = {\n    'target': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"HostBinding\"], args: ['attr.target',] }, { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],\n    'queryParams': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],\n    'fragment': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],\n    'queryParamsHandling': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],\n    'preserveFragment': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],\n    'skipLocationChange': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],\n    'replaceUrl': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],\n    'href': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"HostBinding\"] },],\n    'routerLink': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],\n    'preserveQueryParams': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],\n    'onClick': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"HostListener\"], args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey', '$event.shiftKey'],] },],\n};\n/**\n * @param {?} s\n * @return {?}\n */\nfunction attrBoolValue(s) {\n    return s === '' || !!s;\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@whatItDoes Lets you add a CSS class to an element when the link's route becomes active.\n *\n * \\@howToUse\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob<\/a>\n * ```\n *\n * \\@description\n *\n * The RouterLinkActive directive lets you add a CSS class to an element when the link's route\n * becomes active.\n *\n * Consider the following example:\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob<\/a>\n * ```\n *\n * When the url is either '/user' or '/user/bob', the active-link class will\n * be added to the `a` tag. If the url changes, the class will be removed.\n *\n * You can set more than one class, as follows:\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"class1 class2\">Bob<\/a>\n * <a routerLink=\"/user/bob\" [routerLinkActive]=\"['class1', 'class2']\">Bob<\/a>\n * ```\n *\n * You can configure RouterLinkActive by passing `exact: true`. This will add the classes\n * only when the url matches the link exactly.\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact:\n * true}\">Bob<\/a>\n * ```\n *\n * You can assign the RouterLinkActive instance to a template variable and directly check\n * the `isActive` status.\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive #rla=\"routerLinkActive\">\n *   Bob {{ rla.isActive ? '(already open)' : ''}}\n * <\/a>\n * ```\n *\n * Finally, you can apply the RouterLinkActive directive to an ancestor of a RouterLink.\n *\n * ```\n * <div routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact: true}\">\n *   <a routerLink=\"/user/jim\">Jim<\/a>\n *   <a routerLink=\"/user/bob\">Bob<\/a>\n * <\/div>\n * ```\n *\n * This will set the active-link class on the div tag if the url is either '/user/jim' or\n * '/user/bob'.\n *\n * \\@ngModule RouterModule\n *\n * \\@stable\n */\nvar RouterLinkActive = (function () {\n    /**\n     * @param {?} router\n     * @param {?} element\n     * @param {?} renderer\n     * @param {?} cdr\n     */\n    function RouterLinkActive(router, element, renderer, cdr) {\n        var _this = this;\n        this.router = router;\n        this.element = element;\n        this.renderer = renderer;\n        this.cdr = cdr;\n        this.classes = [];\n        this.active = false;\n        this.routerLinkActiveOptions = { exact: false };\n        this.subscription = router.events.subscribe(function (s) {\n            if (s instanceof NavigationEnd) {\n                _this.update();\n            }\n        });\n    }\n    Object.defineProperty(RouterLinkActive.prototype, \"isActive\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.active; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    RouterLinkActive.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this.links.changes.subscribe(function (_) { return _this.update(); });\n        this.linksWithHrefs.changes.subscribe(function (_) { return _this.update(); });\n        this.update();\n    };\n    Object.defineProperty(RouterLinkActive.prototype, \"routerLinkActive\", {\n        /**\n         * @param {?} data\n         * @return {?}\n         */\n        set: function (data) {\n            var /** @type {?} */ classes = Array.isArray(data) ? data : data.split(' ');\n            this.classes = classes.filter(function (c) { return !!c; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    RouterLinkActive.prototype.ngOnChanges = function (changes) { this.update(); };\n    /**\n     * @return {?}\n     */\n    RouterLinkActive.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };\n    /**\n     * @return {?}\n     */\n    RouterLinkActive.prototype.update = function () {\n        var _this = this;\n        if (!this.links || !this.linksWithHrefs || !this.router.navigated)\n            return;\n        var /** @type {?} */ hasActiveLinks = this.hasActiveLinks();\n        // react only when status has changed to prevent unnecessary dom updates\n        if (this.active !== hasActiveLinks) {\n            this.classes.forEach(function (c) {\n                if (hasActiveLinks) {\n                    _this.renderer.addClass(_this.element.nativeElement, c);\n                }\n                else {\n                    _this.renderer.removeClass(_this.element.nativeElement, c);\n                }\n            });\n            Promise.resolve(hasActiveLinks).then(function (active) { return _this.active = active; });\n        }\n    };\n    /**\n     * @param {?} router\n     * @return {?}\n     */\n    RouterLinkActive.prototype.isLinkActive = function (router) {\n        var _this = this;\n        return function (link) { return router.isActive(link.urlTree, _this.routerLinkActiveOptions.exact); };\n    };\n    /**\n     * @return {?}\n     */\n    RouterLinkActive.prototype.hasActiveLinks = function () {\n        return this.links.some(this.isLinkActive(this.router)) ||\n            this.linksWithHrefs.some(this.isLinkActive(this.router));\n    };\n    return RouterLinkActive;\n}());\nRouterLinkActive.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Directive\"], args: [{\n                selector: '[routerLinkActive]',\n                exportAs: 'routerLinkActive',\n            },] },\n];\n/**\n * @nocollapse\n */\nRouterLinkActive.ctorParameters = function () { return [\n    { type: Router, },\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ElementRef\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Renderer2\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ChangeDetectorRef\"], },\n]; };\nRouterLinkActive.propDecorators = {\n    'links': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ContentChildren\"], args: [RouterLink, { descendants: true },] },],\n    'linksWithHrefs': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ContentChildren\"], args: [RouterLinkWithHref, { descendants: true },] },],\n    'routerLinkActiveOptions': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],\n    'routerLinkActive': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],\n};\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Store contextual information about a {\\@link RouterOutlet}\n *\n * \\@stable\n */\nvar OutletContext = (function () {\n    function OutletContext() {\n        this.outlet = null;\n        this.route = null;\n        this.resolver = null;\n        this.children = new ChildrenOutletContexts();\n        this.attachRef = null;\n    }\n    return OutletContext;\n}());\n/**\n * Store contextual information about the children (= nested) {\\@link RouterOutlet}\n *\n * \\@stable\n */\nvar ChildrenOutletContexts = (function () {\n    function ChildrenOutletContexts() {\n        this.contexts = new Map();\n    }\n    /**\n     * Called when a `RouterOutlet` directive is instantiated\n     * @param {?} childName\n     * @param {?} outlet\n     * @return {?}\n     */\n    ChildrenOutletContexts.prototype.onChildOutletCreated = function (childName, outlet) {\n        var /** @type {?} */ context = this.getOrCreateContext(childName);\n        context.outlet = outlet;\n        this.contexts.set(childName, context);\n    };\n    /**\n     * Called when a `RouterOutlet` directive is destroyed.\n     * We need to keep the context as the outlet could be destroyed inside a NgIf and might be\n     * re-created later.\n     * @param {?} childName\n     * @return {?}\n     */\n    ChildrenOutletContexts.prototype.onChildOutletDestroyed = function (childName) {\n        var /** @type {?} */ context = this.getContext(childName);\n        if (context) {\n            context.outlet = null;\n        }\n    };\n    /**\n     * Called when the corresponding route is deactivated during navigation.\n     * Because the component get destroyed, all children outlet are destroyed.\n     * @return {?}\n     */\n    ChildrenOutletContexts.prototype.onOutletDeactivated = function () {\n        var /** @type {?} */ contexts = this.contexts;\n        this.contexts = new Map();\n        return contexts;\n    };\n    /**\n     * @param {?} contexts\n     * @return {?}\n     */\n    ChildrenOutletContexts.prototype.onOutletReAttached = function (contexts) { this.contexts = contexts; };\n    /**\n     * @param {?} childName\n     * @return {?}\n     */\n    ChildrenOutletContexts.prototype.getOrCreateContext = function (childName) {\n        var /** @type {?} */ context = this.getContext(childName);\n        if (!context) {\n            context = new OutletContext();\n            this.contexts.set(childName, context);\n        }\n        return context;\n    };\n    /**\n     * @param {?} childName\n     * @return {?}\n     */\n    ChildrenOutletContexts.prototype.getContext = function (childName) { return this.contexts.get(childName) || null; };\n    return ChildrenOutletContexts;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@whatItDoes Acts as a placeholder that Angular dynamically fills based on the current router\n * state.\n *\n * \\@howToUse\n *\n * ```\n * <router-outlet><\/router-outlet>\n * <router-outlet name='left'><\/router-outlet>\n * <router-outlet name='right'><\/router-outlet>\n * ```\n *\n * A router outlet will emit an activate event any time a new component is being instantiated,\n * and a deactivate event when it is being destroyed.\n *\n * ```\n * <router-outlet\n *   (activate)='onActivate($event)'\n *   (deactivate)='onDeactivate($event)'><\/router-outlet>\n * ```\n * \\@ngModule RouterModule\n *\n * \\@stable\n */\nvar RouterOutlet = (function () {\n    /**\n     * @param {?} parentContexts\n     * @param {?} location\n     * @param {?} resolver\n     * @param {?} name\n     * @param {?} changeDetector\n     */\n    function RouterOutlet(parentContexts, location, resolver, name, changeDetector) {\n        this.parentContexts = parentContexts;\n        this.location = location;\n        this.resolver = resolver;\n        this.changeDetector = changeDetector;\n        this.activated = null;\n        this._activatedRoute = null;\n        this.activateEvents = new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"EventEmitter\"]();\n        this.deactivateEvents = new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"EventEmitter\"]();\n        this.name = name || PRIMARY_OUTLET;\n        parentContexts.onChildOutletCreated(this.name, this);\n    }\n    /**\n     * @return {?}\n     */\n    RouterOutlet.prototype.ngOnDestroy = function () { this.parentContexts.onChildOutletDestroyed(this.name); };\n    /**\n     * @return {?}\n     */\n    RouterOutlet.prototype.ngOnInit = function () {\n        if (!this.activated) {\n            // If the outlet was not instantiated at the time the route got activated we need to populate\n            // the outlet when it is initialized (ie inside a NgIf)\n            var /** @type {?} */ context = this.parentContexts.getContext(this.name);\n            if (context && context.route) {\n                if (context.attachRef) {\n                    // `attachRef` is populated when there is an existing component to mount\n                    this.attach(context.attachRef, context.route);\n                }\n                else {\n                    // otherwise the component defined in the configuration is created\n                    this.activateWith(context.route, context.resolver || null);\n                }\n            }\n        }\n    };\n    Object.defineProperty(RouterOutlet.prototype, \"locationInjector\", {\n        /**\n         * @deprecated since v4 *\n         * @return {?}\n         */\n        get: function () { return this.location.injector; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RouterOutlet.prototype, \"locationFactoryResolver\", {\n        /**\n         * @deprecated since v4 *\n         * @return {?}\n         */\n        get: function () { return this.resolver; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RouterOutlet.prototype, \"isActivated\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return !!this.activated; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RouterOutlet.prototype, \"component\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (!this.activated)\n                throw new Error('Outlet is not activated');\n            return this.activated.instance;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RouterOutlet.prototype, \"activatedRoute\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (!this.activated)\n                throw new Error('Outlet is not activated');\n            return (this._activatedRoute);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RouterOutlet.prototype, \"activatedRouteData\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (this._activatedRoute) {\n                return this._activatedRoute.snapshot.data;\n            }\n            return {};\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Called when the `RouteReuseStrategy` instructs to detach the subtree\n     * @return {?}\n     */\n    RouterOutlet.prototype.detach = function () {\n        if (!this.activated)\n            throw new Error('Outlet is not activated');\n        this.location.detach();\n        var /** @type {?} */ cmp = this.activated;\n        this.activated = null;\n        this._activatedRoute = null;\n        return cmp;\n    };\n    /**\n     * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree\n     * @param {?} ref\n     * @param {?} activatedRoute\n     * @return {?}\n     */\n    RouterOutlet.prototype.attach = function (ref, activatedRoute) {\n        this.activated = ref;\n        this._activatedRoute = activatedRoute;\n        this.location.insert(ref.hostView);\n    };\n    /**\n     * @return {?}\n     */\n    RouterOutlet.prototype.deactivate = function () {\n        if (this.activated) {\n            var /** @type {?} */ c = this.component;\n            this.activated.destroy();\n            this.activated = null;\n            this._activatedRoute = null;\n            this.deactivateEvents.emit(c);\n        }\n    };\n    /**\n     * @param {?} activatedRoute\n     * @param {?} resolver\n     * @return {?}\n     */\n    RouterOutlet.prototype.activateWith = function (activatedRoute, resolver) {\n        if (this.isActivated) {\n            throw new Error('Cannot activate an already activated outlet');\n        }\n        this._activatedRoute = activatedRoute;\n        var /** @type {?} */ snapshot = activatedRoute._futureSnapshot;\n        var /** @type {?} */ component = (((snapshot._routeConfig)).component);\n        resolver = resolver || this.resolver;\n        var /** @type {?} */ factory = resolver.resolveComponentFactory(component);\n        var /** @type {?} */ childContexts = this.parentContexts.getOrCreateContext(this.name).children;\n        var /** @type {?} */ injector = new OutletInjector(activatedRoute, childContexts, this.location.injector);\n        this.activated = this.location.createComponent(factory, this.location.length, injector);\n        // Calling `markForCheck` to make sure we will run the change detection when the\n        // `RouterOutlet` is inside a `ChangeDetectionStrategy.OnPush` component.\n        this.changeDetector.markForCheck();\n        this.activateEvents.emit(this.activated.instance);\n    };\n    return RouterOutlet;\n}());\nRouterOutlet.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Directive\"], args: [{ selector: 'router-outlet', exportAs: 'outlet' },] },\n];\n/**\n * @nocollapse\n */\nRouterOutlet.ctorParameters = function () { return [\n    { type: ChildrenOutletContexts, },\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ViewContainerRef\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ComponentFactoryResolver\"], },\n    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Attribute\"], args: ['name',] },] },\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ChangeDetectorRef\"], },\n]; };\nRouterOutlet.propDecorators = {\n    'activateEvents': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Output\"], args: ['activate',] },],\n    'deactivateEvents': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Output\"], args: ['deactivate',] },],\n};\nvar OutletInjector = (function () {\n    /**\n     * @param {?} route\n     * @param {?} childContexts\n     * @param {?} parent\n     */\n    function OutletInjector(route, childContexts, parent) {\n        this.route = route;\n        this.childContexts = childContexts;\n        this.parent = parent;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    OutletInjector.prototype.get = function (token, notFoundValue) {\n        if (token === ActivatedRoute) {\n            return this.route;\n        }\n        if (token === ChildrenOutletContexts) {\n            return this.childContexts;\n        }\n        return this.parent.get(token, notFoundValue);\n    };\n    return OutletInjector;\n}());\n/**\n*@license\n*Copyright Google Inc. All Rights Reserved.\n*\n*Use of this source code is governed by an MIT-style license that can be\n*found in the LICENSE file at https://angular.io/license\n*/\n/**\n * \\@whatItDoes Provides a preloading strategy.\n *\n * \\@experimental\n * @abstract\n */\nvar PreloadingStrategy = (function () {\n    function PreloadingStrategy() {\n    }\n    /**\n     * @abstract\n     * @param {?} route\n     * @param {?} fn\n     * @return {?}\n     */\n    PreloadingStrategy.prototype.preload = function (route, fn) { };\n    return PreloadingStrategy;\n}());\n/**\n * \\@whatItDoes Provides a preloading strategy that preloads all modules as quickly as possible.\n *\n * \\@howToUse\n *\n * ```\n * RouteModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\n * ```\n *\n * \\@experimental\n */\nvar PreloadAllModules = (function () {\n    function PreloadAllModules() {\n    }\n    /**\n     * @param {?} route\n     * @param {?} fn\n     * @return {?}\n     */\n    PreloadAllModules.prototype.preload = function (route, fn) {\n        return __WEBPACK_IMPORTED_MODULE_15_rxjs_operator_catch__[\"_catch\"].call(fn(), function () { return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(null); });\n    };\n    return PreloadAllModules;\n}());\n/**\n * \\@whatItDoes Provides a preloading strategy that does not preload any modules.\n *\n * \\@description\n *\n * This strategy is enabled by default.\n *\n * \\@experimental\n */\nvar NoPreloading = (function () {\n    function NoPreloading() {\n    }\n    /**\n     * @param {?} route\n     * @param {?} fn\n     * @return {?}\n     */\n    NoPreloading.prototype.preload = function (route, fn) { return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(null); };\n    return NoPreloading;\n}());\n/**\n * The preloader optimistically loads all router configurations to\n * make navigations into lazily-loaded sections of the application faster.\n *\n * The preloader runs in the background. When the router bootstraps, the preloader\n * starts listening to all navigation events. After every such event, the preloader\n * will check if any configurations can be loaded lazily.\n *\n * If a route is protected by `canLoad` guards, the preloaded will not load it.\n *\n * \\@stable\n */\nvar RouterPreloader = (function () {\n    /**\n     * @param {?} router\n     * @param {?} moduleLoader\n     * @param {?} compiler\n     * @param {?} injector\n     * @param {?} preloadingStrategy\n     */\n    function RouterPreloader(router, moduleLoader, compiler, injector, preloadingStrategy) {\n        this.router = router;\n        this.injector = injector;\n        this.preloadingStrategy = preloadingStrategy;\n        var onStartLoad = function (r) { return router.triggerEvent(new RouteConfigLoadStart(r)); };\n        var onEndLoad = function (r) { return router.triggerEvent(new RouteConfigLoadEnd(r)); };\n        this.loader = new RouterConfigLoader(moduleLoader, compiler, onStartLoad, onEndLoad);\n    }\n    ;\n    /**\n     * @return {?}\n     */\n    RouterPreloader.prototype.setUpPreloading = function () {\n        var _this = this;\n        var /** @type {?} */ navigations$ = __WEBPACK_IMPORTED_MODULE_21_rxjs_operator_filter__[\"filter\"].call(this.router.events, function (e) { return e instanceof NavigationEnd; });\n        this.subscription = __WEBPACK_IMPORTED_MODULE_7_rxjs_operator_concatMap__[\"concatMap\"].call(navigations$, function () { return _this.preload(); }).subscribe(function () { });\n    };\n    /**\n     * @return {?}\n     */\n    RouterPreloader.prototype.preload = function () {\n        var /** @type {?} */ ngModule = this.injector.get(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"NgModuleRef\"]);\n        return this.processRoutes(ngModule, this.router.config);\n    };\n    /**\n     * @return {?}\n     */\n    RouterPreloader.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };\n    /**\n     * @param {?} ngModule\n     * @param {?} routes\n     * @return {?}\n     */\n    RouterPreloader.prototype.processRoutes = function (ngModule, routes) {\n        var /** @type {?} */ res = [];\n        for (var _i = 0, routes_5 = routes; _i < routes_5.length; _i++) {\n            var route = routes_5[_i];\n            // we already have the config loaded, just recurse\n            if (route.loadChildren && !route.canLoad && route._loadedConfig) {\n                var /** @type {?} */ childConfig = route._loadedConfig;\n                res.push(this.processRoutes(childConfig.module, childConfig.routes));\n                // no config loaded, fetch the config\n            }\n            else if (route.loadChildren && !route.canLoad) {\n                res.push(this.preloadConfig(ngModule, route));\n                // recurse into children\n            }\n            else if (route.children) {\n                res.push(this.processRoutes(ngModule, route.children));\n            }\n        }\n        return __WEBPACK_IMPORTED_MODULE_19_rxjs_operator_mergeAll__[\"mergeAll\"].call(Object(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_from__[\"from\"])(res));\n    };\n    /**\n     * @param {?} ngModule\n     * @param {?} route\n     * @return {?}\n     */\n    RouterPreloader.prototype.preloadConfig = function (ngModule, route) {\n        var _this = this;\n        return this.preloadingStrategy.preload(route, function () {\n            var /** @type {?} */ loaded$ = _this.loader.load(ngModule.injector, route);\n            return __WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap__[\"mergeMap\"].call(loaded$, function (config) {\n                route._loadedConfig = config;\n                return _this.processRoutes(config.module, config.routes);\n            });\n        });\n    };\n    return RouterPreloader;\n}());\nRouterPreloader.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nRouterPreloader.ctorParameters = function () { return [\n    { type: Router, },\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"NgModuleFactoryLoader\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Compiler\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injector\"], },\n    { type: PreloadingStrategy, },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@whatItDoes Contains a list of directives\n * \\@stable\n */\nvar ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive];\n/**\n * \\@whatItDoes Is used in DI to configure the router.\n * \\@stable\n */\nvar ROUTER_CONFIGURATION = new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"InjectionToken\"]('ROUTER_CONFIGURATION');\n/**\n * \\@docsNotRequired\n */\nvar ROUTER_FORROOT_GUARD = new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"InjectionToken\"]('ROUTER_FORROOT_GUARD');\nvar ROUTER_PROVIDERS = [\n    __WEBPACK_IMPORTED_MODULE_1__angular_common__[\"Location\"],\n    { provide: UrlSerializer, useClass: DefaultUrlSerializer },\n    {\n        provide: Router,\n        useFactory: setupRouter,\n        deps: [\n            __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ApplicationRef\"], UrlSerializer, ChildrenOutletContexts, __WEBPACK_IMPORTED_MODULE_1__angular_common__[\"Location\"], __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injector\"],\n            __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"NgModuleFactoryLoader\"], __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Compiler\"], ROUTES, ROUTER_CONFIGURATION,\n            [UrlHandlingStrategy, new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Optional\"]()], [RouteReuseStrategy, new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Optional\"]()]\n        ]\n    },\n    ChildrenOutletContexts,\n    { provide: ActivatedRoute, useFactory: rootRoute, deps: [Router] },\n    { provide: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"NgModuleFactoryLoader\"], useClass: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"SystemJsNgModuleLoader\"] },\n    RouterPreloader,\n    NoPreloading,\n    PreloadAllModules,\n    { provide: ROUTER_CONFIGURATION, useValue: { enableTracing: false } },\n];\n/**\n * @return {?}\n */\nfunction routerNgProbeToken() {\n    return new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"NgProbeToken\"]('Router', Router);\n}\n/**\n * \\@whatItDoes Adds router directives and providers.\n *\n * \\@howToUse\n *\n * RouterModule can be imported multiple times: once per lazily-loaded bundle.\n * Since the router deals with a global shared resource--location, we cannot have\n * more than one router service active.\n *\n * That is why there are two ways to create the module: `RouterModule.forRoot` and\n * `RouterModule.forChild`.\n *\n * * `forRoot` creates a module that contains all the directives, the given routes, and the router\n *   service itself.\n * * `forChild` creates a module that contains all the directives and the given routes, but does not\n *   include the router service.\n *\n * When registered at the root, the module should be used as follows\n *\n * ```\n * \\@NgModule({\n *   imports: [RouterModule.forRoot(ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n * For submodules and lazy loaded submodules the module should be used as follows:\n *\n * ```\n * \\@NgModule({\n *   imports: [RouterModule.forChild(ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n * \\@description\n *\n * Managing state transitions is one of the hardest parts of building applications. This is\n * especially true on the web, where you also need to ensure that the state is reflected in the URL.\n * In addition, we often want to split applications into multiple bundles and load them on demand.\n * Doing this transparently is not trivial.\n *\n * The Angular router solves these problems. Using the router, you can declaratively specify\n * application states, manage state transitions while taking care of the URL, and load bundles on\n * demand.\n *\n * [Read this developer guide](https://angular.io/docs/ts/latest/guide/router.html) to get an\n * overview of how the router should be used.\n *\n * \\@stable\n */\nvar RouterModule = (function () {\n    /**\n     * @param {?} guard\n     * @param {?} router\n     */\n    function RouterModule(guard, router) {\n    }\n    /**\n     * Creates a module with all the router providers and directives. It also optionally sets up an\n     * application listener to perform an initial navigation.\n     *\n     * Options:\n     * * `enableTracing` makes the router log all its internal events to the console.\n     * * `useHash` enables the location strategy that uses the URL fragment instead of the history\n     * API.\n     * * `initialNavigation` disables the initial navigation.\n     * * `errorHandler` provides a custom error handler.\n     * @param {?} routes\n     * @param {?=} config\n     * @return {?}\n     */\n    RouterModule.forRoot = function (routes, config) {\n        return {\n            ngModule: RouterModule,\n            providers: [\n                ROUTER_PROVIDERS,\n                provideRoutes(routes),\n                {\n                    provide: ROUTER_FORROOT_GUARD,\n                    useFactory: provideForRootGuard,\n                    deps: [[Router, new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Optional\"](), new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"SkipSelf\"]()]]\n                },\n                { provide: ROUTER_CONFIGURATION, useValue: config ? config : {} },\n                {\n                    provide: __WEBPACK_IMPORTED_MODULE_1__angular_common__[\"LocationStrategy\"],\n                    useFactory: provideLocationStrategy,\n                    deps: [\n                        __WEBPACK_IMPORTED_MODULE_1__angular_common__[\"PlatformLocation\"], [new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Inject\"](__WEBPACK_IMPORTED_MODULE_1__angular_common__[\"APP_BASE_HREF\"]), new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Optional\"]()], ROUTER_CONFIGURATION\n                    ]\n                },\n                {\n                    provide: PreloadingStrategy,\n                    useExisting: config && config.preloadingStrategy ? config.preloadingStrategy :\n                        NoPreloading\n                },\n                { provide: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"NgProbeToken\"], multi: true, useFactory: routerNgProbeToken },\n                provideRouterInitializer(),\n            ],\n        };\n    };\n    /**\n     * Creates a module with all the router directives and a provider registering routes.\n     * @param {?} routes\n     * @return {?}\n     */\n    RouterModule.forChild = function (routes) {\n        return { ngModule: RouterModule, providers: [provideRoutes(routes)] };\n    };\n    return RouterModule;\n}());\nRouterModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"NgModule\"], args: [{ declarations: ROUTER_DIRECTIVES, exports: ROUTER_DIRECTIVES },] },\n];\n/**\n * @nocollapse\n */\nRouterModule.ctorParameters = function () { return [\n    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Inject\"], args: [ROUTER_FORROOT_GUARD,] },] },\n    { type: Router, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Optional\"] },] },\n]; };\n/**\n * @param {?} platformLocationStrategy\n * @param {?} baseHref\n * @param {?=} options\n * @return {?}\n */\nfunction provideLocationStrategy(platformLocationStrategy, baseHref, options) {\n    if (options === void 0) { options = {}; }\n    return options.useHash ? new __WEBPACK_IMPORTED_MODULE_1__angular_common__[\"HashLocationStrategy\"](platformLocationStrategy, baseHref) :\n        new __WEBPACK_IMPORTED_MODULE_1__angular_common__[\"PathLocationStrategy\"](platformLocationStrategy, baseHref);\n}\n/**\n * @param {?} router\n * @return {?}\n */\nfunction provideForRootGuard(router) {\n    if (router) {\n        throw new Error(\"RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.\");\n    }\n    return 'guarded';\n}\n/**\n * \\@whatItDoes Registers routes.\n *\n * \\@howToUse\n *\n * ```\n * \\@NgModule({\n *   imports: [RouterModule.forChild(ROUTES)],\n *   providers: [provideRoutes(EXTRA_ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n * \\@stable\n * @param {?} routes\n * @return {?}\n */\nfunction provideRoutes(routes) {\n    return [\n        { provide: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ANALYZE_FOR_ENTRY_COMPONENTS\"], multi: true, useValue: routes },\n        { provide: ROUTES, multi: true, useValue: routes },\n    ];\n}\n/**\n * @param {?} ref\n * @param {?} urlSerializer\n * @param {?} contexts\n * @param {?} location\n * @param {?} injector\n * @param {?} loader\n * @param {?} compiler\n * @param {?} config\n * @param {?=} opts\n * @param {?=} urlHandlingStrategy\n * @param {?=} routeReuseStrategy\n * @return {?}\n */\nfunction setupRouter(ref, urlSerializer, contexts, location, injector, loader, compiler, config, opts, urlHandlingStrategy, routeReuseStrategy) {\n    if (opts === void 0) { opts = {}; }\n    var /** @type {?} */ router = new Router(null, urlSerializer, contexts, location, injector, loader, compiler, flatten(config));\n    if (urlHandlingStrategy) {\n        router.urlHandlingStrategy = urlHandlingStrategy;\n    }\n    if (routeReuseStrategy) {\n        router.routeReuseStrategy = routeReuseStrategy;\n    }\n    if (opts.errorHandler) {\n        router.errorHandler = opts.errorHandler;\n    }\n    if (opts.enableTracing) {\n        var /** @type {?} */ dom_1 = Object(__WEBPACK_IMPORTED_MODULE_20__angular_platform_browser__[\"ɵgetDOM\"])();\n        router.events.subscribe(function (e) {\n            dom_1.logGroup(\"Router Event: \" + ((e.constructor)).name);\n            dom_1.log(e.toString());\n            dom_1.log(e);\n            dom_1.logGroupEnd();\n        });\n    }\n    return router;\n}\n/**\n * @param {?} router\n * @return {?}\n */\nfunction rootRoute(router) {\n    return router.routerState.root;\n}\n/**\n * To initialize the router properly we need to do in two steps:\n *\n * We need to start the navigation in a APP_INITIALIZER to block the bootstrap if\n * a resolver or a guards executes asynchronously. Second, we need to actually run\n * activation in a BOOTSTRAP_LISTENER. We utilize the afterPreactivation\n * hook provided by the router to do that.\n *\n * The router navigation starts, reaches the point when preactivation is done, and then\n * pauses. It waits for the hook to be resolved. We then resolve it only in a bootstrap listener.\n */\nvar RouterInitializer = (function () {\n    /**\n     * @param {?} injector\n     */\n    function RouterInitializer(injector) {\n        this.injector = injector;\n        this.initNavigation = false;\n        this.resultOfPreactivationDone = new __WEBPACK_IMPORTED_MODULE_4_rxjs_Subject__[\"Subject\"]();\n    }\n    /**\n     * @return {?}\n     */\n    RouterInitializer.prototype.appInitializer = function () {\n        var _this = this;\n        var /** @type {?} */ p = this.injector.get(__WEBPACK_IMPORTED_MODULE_1__angular_common__[\"LOCATION_INITIALIZED\"], Promise.resolve(null));\n        return p.then(function () {\n            var /** @type {?} */ resolve = ((null));\n            var /** @type {?} */ res = new Promise(function (r) { return resolve = r; });\n            var /** @type {?} */ router = _this.injector.get(Router);\n            var /** @type {?} */ opts = _this.injector.get(ROUTER_CONFIGURATION);\n            if (_this.isLegacyDisabled(opts) || _this.isLegacyEnabled(opts)) {\n                resolve(true);\n            }\n            else if (opts.initialNavigation === 'disabled') {\n                router.setUpLocationChangeListener();\n                resolve(true);\n            }\n            else if (opts.initialNavigation === 'enabled') {\n                router.hooks.afterPreactivation = function () {\n                    // only the initial navigation should be delayed\n                    if (!_this.initNavigation) {\n                        _this.initNavigation = true;\n                        resolve(true);\n                        return _this.resultOfPreactivationDone;\n                        // subsequent navigations should not be delayed\n                    }\n                    else {\n                        return (Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(null));\n                    }\n                };\n                router.initialNavigation();\n            }\n            else {\n                throw new Error(\"Invalid initialNavigation options: '\" + opts.initialNavigation + \"'\");\n            }\n            return res;\n        });\n    };\n    /**\n     * @param {?} bootstrappedComponentRef\n     * @return {?}\n     */\n    RouterInitializer.prototype.bootstrapListener = function (bootstrappedComponentRef) {\n        var /** @type {?} */ opts = this.injector.get(ROUTER_CONFIGURATION);\n        var /** @type {?} */ preloader = this.injector.get(RouterPreloader);\n        var /** @type {?} */ router = this.injector.get(Router);\n        var /** @type {?} */ ref = this.injector.get(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ApplicationRef\"]);\n        if (bootstrappedComponentRef !== ref.components[0]) {\n            return;\n        }\n        if (this.isLegacyEnabled(opts)) {\n            router.initialNavigation();\n        }\n        else if (this.isLegacyDisabled(opts)) {\n            router.setUpLocationChangeListener();\n        }\n        preloader.setUpPreloading();\n        router.resetRootComponentType(ref.componentTypes[0]);\n        this.resultOfPreactivationDone.next(/** @type {?} */ ((null)));\n        this.resultOfPreactivationDone.complete();\n    };\n    /**\n     * @param {?} opts\n     * @return {?}\n     */\n    RouterInitializer.prototype.isLegacyEnabled = function (opts) {\n        return opts.initialNavigation === 'legacy_enabled' || opts.initialNavigation === true ||\n            opts.initialNavigation === undefined;\n    };\n    /**\n     * @param {?} opts\n     * @return {?}\n     */\n    RouterInitializer.prototype.isLegacyDisabled = function (opts) {\n        return opts.initialNavigation === 'legacy_disabled' || opts.initialNavigation === false;\n    };\n    return RouterInitializer;\n}());\nRouterInitializer.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injectable\"] },\n];\n/**\n * @nocollapse\n */\nRouterInitializer.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injector\"], },\n]; };\n/**\n * @param {?} r\n * @return {?}\n */\nfunction getAppInitializer(r) {\n    return r.appInitializer.bind(r);\n}\n/**\n * @param {?} r\n * @return {?}\n */\nfunction getBootstrapListener(r) {\n    return r.bootstrapListener.bind(r);\n}\n/**\n * A token for the router initializer that will be called after the app is bootstrapped.\n *\n * \\@experimental\n */\nvar ROUTER_INITIALIZER = new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"InjectionToken\"]('Router Initializer');\n/**\n * @return {?}\n */\nfunction provideRouterInitializer() {\n    return [\n        RouterInitializer,\n        {\n            provide: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"APP_INITIALIZER\"],\n            multi: true,\n            useFactory: getAppInitializer,\n            deps: [RouterInitializer]\n        },\n        { provide: ROUTER_INITIALIZER, useFactory: getBootstrapListener, deps: [RouterInitializer] },\n        { provide: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"APP_BOOTSTRAP_LISTENER\"], multi: true, useExisting: ROUTER_INITIALIZER },\n    ];\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n/**\n * \\@stable\n */\nvar VERSION = new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Version\"]('4.3.5');\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the router package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n/**\n * Generated bundle index. Do not edit.\n */\n\n//# sourceMappingURL=router.es5.js.map\n\n\n/***/ })\n\n}"}],"count":"1","solution":"<p>Ensure that application Source Code is not available with alternative extensions, and ensure that source code is not present within other files or data deployed to the web server, or served by the web server. <\/p>","otherinfo":"<p>class for {\\@link FormControl}, {\\@link FormGroup}, and<\/p><p> * {\\@link FormArray}.<\/p><p> *<\/p><p> * It provides some of the shared behavior that all controls and groups of controls have, like<\/p><p> * running validators, calculating status, and resetting state. It also defines the properties<\/p><p> * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be<\/p><p> * instantiated directly.<\/p><p> *<\/p><p> * \\@stable<\/p><p> * @abstract<\/p><p> */<\/p><p>var AbstractControl = (function () {<\/p><p>    /**<\/p><p>     * @param {?} validator<\/p><p>     * @param {?} asyncValidator<\/p><p>     */<\/p><p>    function AbstractControl(validator, asyncValidator) {<\/p><p>        this.validator = validator;<\/p><p>        this.asyncValidator = asyncValidator;<\/p><p>        /**<\/p><p>         * \\@internal<\/p><p>         */<\/p><p>        this._onCollectionChange = function () { };<\/p><p>        this._pristine = true;<\/p><p>        this._touched = false;<\/p><p>        /**<\/p><p>         * \\@internal<\/p><p>         */<\/p><p>        this._onDisabledChange = [];<\/p><p>    }<\/p><p>    Object.defineProperty(AbstractControl.prototype, \"value\", {<\/p><p>        /**<\/p><p>         * The value of the control.<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._value; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(AbstractControl.prototype, \"parent\", {<\/p><p>        /**<\/p><p>         * The parent control.<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._parent; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(AbstractControl.prototype, \"status\", {<\/p><p>        /**<\/p><p>         * The validation status of the control. There are four possible<\/p><p>         * validation statuses:<\/p><p>         *<\/p><p>         * * **VALID**:  control has passed all validation checks<\/p><p>         * * **INVALID**: control has failed at least one validation check<\/p><p>         * * **PENDING**: control is in the midst of conducting a validation check<\/p><p>         * * **DISABLED**: control is exempt from validation checks<\/p><p>         *<\/p><p>         * These statuses are mutually exclusive, so a control cannot be<\/p><p>         * both valid AND invalid or invalid AND disabled.<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._status; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(AbstractControl.prototype, \"valid\", {<\/p><p>        /**<\/p><p>         * A control is `valid` when its `status === VALID`.<\/p><p>         *<\/p><p>         * In order to have this status, the control must have passed all its<\/p><p>         * validation checks.<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._status === VALID; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(AbstractControl.prototype, \"invalid\", {<\/p><p>        /**<\/p><p>         * A control is `invalid` when its `status === INVALID`.<\/p><p>         *<\/p><p>         * In order to have this status, the control must have failed<\/p><p>         * at least one of its validation checks.<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._status === INVALID; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(AbstractControl.prototype, \"pending\", {<\/p><p>        /**<\/p><p>         * A control is `pending` when its `status === PENDING`.<\/p><p>         *<\/p><p>         * In order to have this status, the control must be in the<\/p><p>         * middle of conducting a validation check.<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._status == PENDING; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(AbstractControl.prototype, \"disabled\", {<\/p><p>        /**<\/p><p>         * A control is `disabled` when its `status === DISABLED`.<\/p><p>         *<\/p><p>         * Disabled controls are exempt from validation checks and<\/p><p>         * are not included in the aggregate value of their ancestor<\/p><p>         * controls.<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._status === DISABLED; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(AbstractControl.prototype, \"enabled\", {<\/p><p>        /**<\/p><p>         * A control is `enabled` as long as its `status !== DISABLED`.<\/p><p>         *<\/p><p>         * In other words, it has a status of `VALID`, `INVALID`, or<\/p><p>         * `PENDING`.<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._status !== DISABLED; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(AbstractControl.prototype, \"errors\", {<\/p><p>        /**<\/p><p>         * Returns any errors generated by failing validation. If there<\/p><p>         * are no errors, it will return null.<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._errors; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(AbstractControl.prototype, \"pristine\", {<\/p><p>        /**<\/p><p>         * A control is `pristine` if the user has not yet changed<\/p><p>         * the value in the UI.<\/p><p>         *<\/p><p>         * Note that programmatic changes to a control's value will<\/p><p>         * *not* mark it dirty.<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._pristine; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(AbstractControl.prototype, \"dirty\", {<\/p><p>        /**<\/p><p>         * A control is `dirty` if the user has changed the value<\/p><p>         * in the UI.<\/p><p>         *<\/p><p>         * Note that programmatic changes to a control's value will<\/p><p>         * *not* mark it dirty.<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return !this.pristine; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(AbstractControl.prototype, \"touched\", {<\/p><p>        /**<\/p><p>         * A control is marked `touched` once the user has triggered<\/p><p>         * a `blur` event on it.<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._touched; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(AbstractControl.prototype, \"untouched\", {<\/p><p>        /**<\/p><p>         * A control is `untouched` if the user has not yet triggered<\/p><p>         * a `blur` event on it.<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return !this._touched; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(AbstractControl.prototype, \"valueChanges\", {<\/p><p>        /**<\/p><p>         * Emits an event every time the value of the control changes, in<\/p><p>         * the UI or programmatically.<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._valueChanges; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(AbstractControl.prototype, \"statusChanges\", {<\/p><p>        /**<\/p><p>         * Emits an event every time the validation status of the control<\/p><p>         * is re-calculated.<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._statusChanges; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    /**<\/p><p>     * Sets the synchronous validators that are active on this control.  Calling<\/p><p>     * this will overwrite any existing sync validators.<\/p><p>     * @param {?} newValidator<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype.setValidators = function (newValidator) {<\/p><p>        this.validator = coerceToValidator(newValidator);<\/p><p>    };<\/p><p>    /**<\/p><p>     * Sets the async validators that are active on this control. Calling this<\/p><p>     * will overwrite any existing async validators.<\/p><p>     * @param {?} newValidator<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype.setAsyncValidators = function (newValidator) {<\/p><p>        this.asyncValidator = coerceToAsyncValidator(newValidator);<\/p><p>    };<\/p><p>    /**<\/p><p>     * Empties out the sync validator list.<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype.clearValidators = function () { this.validator = null; };<\/p><p>    /**<\/p><p>     * Empties out the async validator list.<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype.clearAsyncValidators = function () { this.asyncValidator = null; };<\/p><p>    /**<\/p><p>     * Marks the control as `touched`.<\/p><p>     *<\/p><p>     * This will also mark all direct ancestors as `touched` to maintain<\/p><p>     * the model.<\/p><p>     * @param {?=} opts<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype.markAsTouched = function (opts) {<\/p><p>        if (opts === void 0) { opts = {}; }<\/p><p>        this._touched = true;<\/p><p>        if (this._parent && !opts.onlySelf) {<\/p><p>            this._parent.markAsTouched(opts);<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * Marks the control as `untouched`.<\/p><p>     *<\/p><p>     * If the control has any children, it will also mark all children as `untouched`<\/p><p>     * to maintain the model, and re-calculate the `touched` status of all parent<\/p><p>     * controls.<\/p><p>     * @param {?=} opts<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype.markAsUntouched = function (opts) {<\/p><p>        if (opts === void 0) { opts = {}; }<\/p><p>        this._touched = false;<\/p><p>        this._forEachChild(function (control) { control.markAsUntouched({ onlySelf: true }); });<\/p><p>        if (this._parent && !opts.onlySelf) {<\/p><p>            this._parent._updateTouched(opts);<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * Marks the control as `dirty`.<\/p><p>     *<\/p><p>     * This will also mark all direct ancestors as `dirty` to maintain<\/p><p>     * the model.<\/p><p>     * @param {?=} opts<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype.markAsDirty = function (opts) {<\/p><p>        if (opts === void 0) { opts = {}; }<\/p><p>        this._pristine = false;<\/p><p>        if (this._parent && !opts.onlySelf) {<\/p><p>            this._parent.markAsDirty(opts);<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * Marks the control as `pristine`.<\/p><p>     *<\/p><p>     * If the control has any children, it will also mark all children as `pristine`<\/p><p>     * to maintain the model, and re-calculate the `pristine` status of all parent<\/p><p>     * controls.<\/p><p>     * @param {?=} opts<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype.markAsPristine = function (opts) {<\/p><p>        if (opts === void 0) { opts = {}; }<\/p><p>        this._pristine = true;<\/p><p>        this._forEachChild(function (control) { control.markAsPristine({ onlySelf: true }); });<\/p><p>        if (this._parent && !opts.onlySelf) {<\/p><p>            this._parent._updatePristine(opts);<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * Marks the control as `pending`.<\/p><p>     * @param {?=} opts<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype.markAsPending = function (opts) {<\/p><p>        if (opts === void 0) { opts = {}; }<\/p><p>        this._status = PENDING;<\/p><p>        if (this._parent && !opts.onlySelf) {<\/p><p>            this._parent.markAsPending(opts);<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * Disables the control. This means the control will be exempt from validation checks and<\/p><p>     * excluded from the aggregate value of any parent. Its status is `DISABLED`.<\/p><p>     *<\/p><p>     * If the control has children, all children will be disabled to maintain the model.<\/p><p>     * @param {?=} opts<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype.disable = function (opts) {<\/p><p>        if (opts === void 0) { opts = {}; }<\/p><p>        this._status = DISABLED;<\/p><p>        this._errors = null;<\/p><p>        this._forEachChild(function (control) { control.disable({ onlySelf: true }); });<\/p><p>        this._updateValue();<\/p><p>        if (opts.emitEvent !== false) {<\/p><p>            this._valueChanges.emit(this._value);<\/p><p>            this._statusChanges.emit(this._status);<\/p><p>        }<\/p><p>        this._updateAncestors(!!opts.onlySelf);<\/p><p>        this._onDisabledChange.forEach(function (changeFn) { return changeFn(true); });<\/p><p>    };<\/p><p>    /**<\/p><p>     * Enables the control. This means the control will be included in validation checks and<\/p><p>     * the aggregate value of its parent. Its status is re-calculated based on its value and<\/p><p>     * its validators.<\/p><p>     *<\/p><p>     * If the control has children, all children will be enabled.<\/p><p>     * @param {?=} opts<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype.enable = function (opts) {<\/p><p>        if (opts === void 0) { opts = {}; }<\/p><p>        this._status = VALID;<\/p><p>        this._forEachChild(function (control) { control.enable({ onlySelf: true }); });<\/p><p>        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });<\/p><p>        this._updateAncestors(!!opts.onlySelf);<\/p><p>        this._onDisabledChange.forEach(function (changeFn) { return changeFn(false); });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} onlySelf<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype._updateAncestors = function (onlySelf) {<\/p><p>        if (this._parent && !onlySelf) {<\/p><p>            this._parent.updateValueAndValidity();<\/p><p>            this._parent._updatePristine();<\/p><p>            this._parent._updateTouched();<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} parent<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype.setParent = function (parent) { this._parent = parent; };<\/p><p>    /**<\/p><p>     * Sets the value of the control. Abstract method (implemented in sub-classes).<\/p><p>     * @abstract<\/p><p>     * @param {?} value<\/p><p>     * @param {?=} options<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype.setValue = function (value, options) { };<\/p><p>    /**<\/p><p>     * Patches the value of the control. Abstract method (implemented in sub-classes).<\/p><p>     * @abstract<\/p><p>     * @param {?} value<\/p><p>     * @param {?=} options<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype.patchValue = function (value, options) { };<\/p><p>    /**<\/p><p>     * Resets the control. Abstract method (implemented in sub-classes).<\/p><p>     * @abstract<\/p><p>     * @param {?=} value<\/p><p>     * @param {?=} options<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype.reset = function (value, options) { };<\/p><p>    /**<\/p><p>     * Re-calculates the value and validation status of the control.<\/p><p>     *<\/p><p>     * By default, it will also update the value and validity of its ancestors.<\/p><p>     * @param {?=} opts<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype.updateValueAndValidity = function (opts) {<\/p><p>        if (opts === void 0) { opts = {}; }<\/p><p>        this._setInitialStatus();<\/p><p>        this._updateValue();<\/p><p>        if (this.enabled) {<\/p><p>            this._cancelExistingSubscription();<\/p><p>            this._errors = this._runValidator();<\/p><p>            this._status = this._calculateStatus();<\/p><p>            if (this._status === VALID || this._status === PENDING) {<\/p><p>                this._runAsyncValidator(opts.emitEvent);<\/p><p>            }<\/p><p>        }<\/p><p>        if (opts.emitEvent !== false) {<\/p><p>            this._valueChanges.emit(this._value);<\/p><p>            this._statusChanges.emit(this._status);<\/p><p>        }<\/p><p>        if (this._parent && !opts.onlySelf) {<\/p><p>            this._parent.updateValueAndValidity(opts);<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @param {?=} opts<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype._updateTreeValidity = function (opts) {<\/p><p>        if (opts === void 0) { opts = { emitEvent: true }; }<\/p><p>        this._forEachChild(function (ctrl) { return ctrl._updateTreeValidity(opts); });<\/p><p>        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype._setInitialStatus = function () { this._status = this._allControlsDisabled() ? DISABLED : VALID; };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype._runValidator = function () {<\/p><p>        return this.validator ? this.validator(this) : null;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?=} emitEvent<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype._runAsyncValidator = function (emitEvent) {<\/p><p>        var _this = this;<\/p><p>        if (this.asyncValidator) {<\/p><p>            this._status = PENDING;<\/p><p>            var /** @type {?} */ obs = toObservable(this.asyncValidator(this));<\/p><p>            this._asyncValidationSubscription =<\/p><p>                obs.subscribe(function (errors) { return _this.setErrors(errors, { emitEvent: emitEvent }); });<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype._cancelExistingSubscription = function () {<\/p><p>        if (this._asyncValidationSubscription) {<\/p><p>            this._asyncValidationSubscription.unsubscribe();<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * Sets errors on a form control.<\/p><p>     *<\/p><p>     * This is used when validations are run manually by the user, rather than automatically.<\/p><p>     *<\/p><p>     * Calling `setErrors` will also update the validity of the parent control.<\/p><p>     *<\/p><p>     * ### Example<\/p><p>     *<\/p><p>     * ```<\/p><p>     * const login = new FormControl(\"someLogin\");<\/p><p>     * login.setErrors({<\/p><p>     *   \"notUnique\": true<\/p><p>     * });<\/p><p>     *<\/p><p>     * expect(login.valid).toEqual(false);<\/p><p>     * expect(login.errors).toEqual({\"notUnique\": true});<\/p><p>     *<\/p><p>     * login.setValue(\"someOtherLogin\");<\/p><p>     *<\/p><p>     * expect(login.valid).toEqual(true);<\/p><p>     * ```<\/p><p>     * @param {?} errors<\/p><p>     * @param {?=} opts<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype.setErrors = function (errors, opts) {<\/p><p>        if (opts === void 0) { opts = {}; }<\/p><p>        this._errors = errors;<\/p><p>        this._updateControlsErrors(opts.emitEvent !== false);<\/p><p>    };<\/p><p>    /**<\/p><p>     * Retrieves a child control given the control's name or path.<\/p><p>     *<\/p><p>     * Paths can be passed in as an array or a string delimited by a dot.<\/p><p>     *<\/p><p>     * To get a control nested within a `person` sub-group:<\/p><p>     *<\/p><p>     * * `this.form.get('person.name');`<\/p><p>     *<\/p><p>     * -OR-<\/p><p>     *<\/p><p>     * * `this.form.get(['person', 'name']);`<\/p><p>     * @param {?} path<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype.get = function (path) { return _find(this, path, '.'); };<\/p><p>    /**<\/p><p>     * Returns error data if the control with the given path has the error specified. Otherwise<\/p><p>     * returns null or undefined.<\/p><p>     *<\/p><p>     * If no path is given, it checks for the error on the present control.<\/p><p>     * @param {?} errorCode<\/p><p>     * @param {?=} path<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype.getError = function (errorCode, path) {<\/p><p>        var /** @type {?} */ control = path ? this.get(path) : this;<\/p><p>        return control && control._errors ? control._errors[errorCode] : null;<\/p><p>    };<\/p><p>    /**<\/p><p>     * Returns true if the control with the given path has the error specified. Otherwise<\/p><p>     * returns false.<\/p><p>     *<\/p><p>     * If no path is given, it checks for the error on the present control.<\/p><p>     * @param {?} errorCode<\/p><p>     * @param {?=} path<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype.hasError = function (errorCode, path) { return !!this.getError(errorCode, path); };<\/p><p>    Object.defineProperty(AbstractControl.prototype, \"root\", {<\/p><p>        /**<\/p><p>         * Retrieves the top-level ancestor of this control.<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () {<\/p><p>            var /** @type {?} */ x = this;<\/p><p>            while (x._parent) {<\/p><p>                x = x._parent;<\/p><p>            }<\/p><p>            return x;<\/p><p>        },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @param {?} emitEvent<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype._updateControlsErrors = function (emitEvent) {<\/p><p>        this._status = this._calculateStatus();<\/p><p>        if (emitEvent) {<\/p><p>            this._statusChanges.emit(this._status);<\/p><p>        }<\/p><p>        if (this._parent) {<\/p><p>            this._parent._updateControlsErrors(emitEvent);<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype._initObservables = function () {<\/p><p>        this._valueChanges = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"EventEmitter\"]();<\/p><p>        this._statusChanges = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"EventEmitter\"]();<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype._calculateStatus = function () {<\/p><p>        if (this._allControlsDisabled())<\/p><p>            return DISABLED;<\/p><p>        if (this._errors)<\/p><p>            return INVALID;<\/p><p>        if (this._anyControlsHaveStatus(PENDING))<\/p><p>            return PENDING;<\/p><p>        if (this._anyControlsHaveStatus(INVALID))<\/p><p>            return INVALID;<\/p><p>        return VALID;<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @abstract<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype._updateValue = function () { };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @abstract<\/p><p>     * @param {?} cb<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype._forEachChild = function (cb) { };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @abstract<\/p><p>     * @param {?} condition<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype._anyControls = function (condition) { };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @abstract<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype._allControlsDisabled = function () { };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @param {?} status<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype._anyControlsHaveStatus = function (status) {<\/p><p>        return this._anyControls(function (control) { return control.status === status; });<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype._anyControlsDirty = function () {<\/p><p>        return this._anyControls(function (control) { return control.dirty; });<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype._anyControlsTouched = function () {<\/p><p>        return this._anyControls(function (control) { return control.touched; });<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @param {?=} opts<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype._updatePristine = function (opts) {<\/p><p>        if (opts === void 0) { opts = {}; }<\/p><p>        this._pristine = !this._anyControlsDirty();<\/p><p>        if (this._parent && !opts.onlySelf) {<\/p><p>            this._parent._updatePristine(opts);<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @param {?=} opts<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype._updateTouched = function (opts) {<\/p><p>        if (opts === void 0) { opts = {}; }<\/p><p>        this._touched = this._anyControlsTouched();<\/p><p>        if (this._parent && !opts.onlySelf) {<\/p><p>            this._parent._updateTouched(opts);<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @param {?} formState<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype._isBoxedValue = function (formState) {<\/p><p>        return typeof formState === 'object' && formState !== null &&<\/p><p>            Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @param {?} fn<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AbstractControl.prototype._registerOnCollectionChange = function (fn) { this._onCollectionChange = fn; };<\/p><p>    return AbstractControl;<\/p><p>}());<\/p><p>/**<\/p><p> * \\@whatItDoes Tracks the value and validation status of an individual form control.<\/p><p> *<\/p><p> * It is one of the three fundamental building blocks of Angular forms, along with<\/p><p> * {\\@link FormGroup} and {\\@link FormArray}.<\/p><p> *<\/p><p> * \\@howToUse<\/p><p> *<\/p><p> * When instantiating a {\\@link FormControl}, you can pass in an initial value as the<\/p><p> * first argument. Example:<\/p><p> *<\/p><p> * ```ts<\/p><p> * const ctrl = new FormControl('some value');<\/p><p> * console.log(ctrl.value);     // 'some value'<\/p><p> * ```<\/p><p> *<\/p><p> * You can also initialize the control with a form state object on instantiation,<\/p><p> * which includes both the value and whether or not the control is disabled.<\/p><p> * You can't use the value key without the disabled key; both are required<\/p><p> * to use this way of initialization.<\/p><p> *<\/p><p> * ```ts<\/p><p> * const ctrl = new FormControl({value: 'n/a', disabled: true});<\/p><p> * console.log(ctrl.value);     // 'n/a'<\/p><p> * console.log(ctrl.status);   // 'DISABLED'<\/p><p> * ```<\/p><p> *<\/p><p> * To include a sync validator (or an array of sync validators) with the control,<\/p><p> * pass it in as the second argument. Async validators are also supported, but<\/p><p> * have to be passed in separately as the third arg.<\/p><p> *<\/p><p> * ```ts<\/p><p> * const ctrl = new FormControl('', Validators.required);<\/p><p> * console.log(ctrl.value);     // ''<\/p><p> * console.log(ctrl.status);   // 'INVALID'<\/p><p> * ```<\/p><p> *<\/p><p> * See its superclass, {\\@link AbstractControl}, for more properties and methods.<\/p><p> *<\/p><p> * * **npm package**: `\\@angular/forms`<\/p><p> *<\/p><p> * \\@stable<\/p><p> */<\/p><p>var FormControl = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](FormControl, _super);<\/p><p>    /**<\/p><p>     * @param {?=} formState<\/p><p>     * @param {?=} validator<\/p><p>     * @param {?=} asyncValidator<\/p><p>     */<\/p><p>    function FormControl(formState, validator, asyncValidator) {<\/p><p>        if (formState === void 0) { formState = null; }<\/p><p>        var _this = _super.call(this, coerceToValidator(validator), coerceToAsyncValidator(asyncValidator)) || this;<\/p><p>        /**<\/p><p>         * \\@internal<\/p><p>         */<\/p><p>        _this._onChange = [];<\/p><p>        _this._applyFormState(formState);<\/p><p>        _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });<\/p><p>        _this._initObservables();<\/p><p>        return _this;<\/p><p>    }<\/p><p>    /**<\/p><p>     * Set the value of the form control to `value`.<\/p><p>     *<\/p><p>     * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`<\/p><p>     * and not its parent component. This defaults to false.<\/p><p>     *<\/p><p>     * If `emitEvent` is `true`, this<\/p><p>     * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults<\/p><p>     * to true (as it falls through to `updateValueAndValidity`).<\/p><p>     *<\/p><p>     * If `emitModelToViewChange` is `true`, the view will be notified about the new value<\/p><p>     * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not<\/p><p>     * specified.<\/p><p>     *<\/p><p>     * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the<\/p><p>     * model.  This is the default behavior if `emitViewToModelChange` is not specified.<\/p><p>     * @param {?} value<\/p><p>     * @param {?=} options<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormControl.prototype.setValue = function (value, options) {<\/p><p>        var _this = this;<\/p><p>        if (options === void 0) { options = {}; }<\/p><p>        this._value = value;<\/p><p>        if (this._onChange.length && options.emitModelToViewChange !== false) {<\/p><p>            this._onChange.forEach(function (changeFn) { return changeFn(_this._value, options.emitViewToModelChange !== false); });<\/p><p>        }<\/p><p>        this.updateValueAndValidity(options);<\/p><p>    };<\/p><p>    /**<\/p><p>     * Patches the value of a control.<\/p><p>     *<\/p><p>     * This function is functionally the same as {\\@link FormControl#setValue} at this level.<\/p><p>     * It exists for symmetry with {\\@link FormGroup#patchValue} on `FormGroups` and `FormArrays`,<\/p><p>     * where it does behave differently.<\/p><p>     * @param {?} value<\/p><p>     * @param {?=} options<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormControl.prototype.patchValue = function (value, options) {<\/p><p>        if (options === void 0) { options = {}; }<\/p><p>        this.setValue(value, options);<\/p><p>    };<\/p><p>    /**<\/p><p>     * Resets the form control. This means by default:<\/p><p>     *<\/p><p>     * * it is marked as `pristine`<\/p><p>     * * it is marked as `untouched`<\/p><p>     * * value is set to null<\/p><p>     *<\/p><p>     * You can also reset to a specific form state by passing through a standalone<\/p><p>     * value or a form state object that contains both a value and a disabled state<\/p><p>     * (these are the only two properties that cannot be calculated).<\/p><p>     *<\/p><p>     * Ex:<\/p><p>     *<\/p><p>     * ```ts<\/p><p>     * this.control.reset('Nancy');<\/p><p>     *<\/p><p>     * console.log(this.control.value);  // 'Nancy'<\/p><p>     * ```<\/p><p>     *<\/p><p>     * OR<\/p><p>     *<\/p><p>     * ```<\/p><p>     * this.control.reset({value: 'Nancy', disabled: true});<\/p><p>     *<\/p><p>     * console.log(this.control.value);  // 'Nancy'<\/p><p>     * console.log(this.control.status);  // 'DISABLED'<\/p><p>     * ```<\/p><p>     * @param {?=} formState<\/p><p>     * @param {?=} options<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormControl.prototype.reset = function (formState, options) {<\/p><p>        if (formState === void 0) { formState = null; }<\/p><p>        if (options === void 0) { options = {}; }<\/p><p>        this._applyFormState(formState);<\/p><p>        this.markAsPristine(options);<\/p><p>        this.markAsUntouched(options);<\/p><p>        this.setValue(this._value, options);<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormControl.prototype._updateValue = function () { };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @param {?} condition<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormControl.prototype._anyControls = function (condition) { return false; };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormControl.prototype._allControlsDisabled = function () { return this.disabled; };<\/p><p>    /**<\/p><p>     * Register a listener for change events.<\/p><p>     * @param {?} fn<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormControl.prototype.registerOnChange = function (fn) { this._onChange.push(fn); };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormControl.prototype._clearChangeFns = function () {<\/p><p>        this._onChange = [];<\/p><p>        this._onDisabledChange = [];<\/p><p>        this._onCollectionChange = function () { };<\/p><p>    };<\/p><p>    /**<\/p><p>     * Register a listener for disabled events.<\/p><p>     * @param {?} fn<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormControl.prototype.registerOnDisabledChange = function (fn) {<\/p><p>        this._onDisabledChange.push(fn);<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @param {?} cb<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormControl.prototype._forEachChild = function (cb) { };<\/p><p>    /**<\/p><p>     * @param {?} formState<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormControl.prototype._applyFormState = function (formState) {<\/p><p>        if (this._isBoxedValue(formState)) {<\/p><p>            this._value = formState.value;<\/p><p>            formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :<\/p><p>                this.enable({ onlySelf: true, emitEvent: false });<\/p><p>        }<\/p><p>        else {<\/p><p>            this._value = formState;<\/p><p>        }<\/p><p>    };<\/p><p>    return FormControl;<\/p><p>}(AbstractControl));<\/p><p>/**<\/p><p> * \\@whatItDoes Tracks the value and validity state of a group of {\\@link FormControl}<\/p><p> * instances.<\/p><p> *<\/p><p> * A `FormGroup` aggregates the values of each child {\\@link FormControl} into one object,<\/p><p> * with each control name as the key.  It calculates its status by reducing the statuses<\/p><p> * of its children. For example, if one of the controls in a group is invalid, the entire<\/p><p> * group becomes invalid.<\/p><p> *<\/p><p> * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,<\/p><p> * along with {\\@link FormControl} and {\\@link FormArray}.<\/p><p> *<\/p><p> * \\@howToUse<\/p><p> *<\/p><p> * When instantiating a {\\@link FormGroup}, pass in a collection of child controls as the first<\/p><p> * argument. The key for each child will be the name under which it is registered.<\/p><p> *<\/p><p> * ### Example<\/p><p> *<\/p><p> * ```<\/p><p> * const form = new FormGroup({<\/p><p> *   first: new FormControl('Nancy', Validators.minLength(2)),<\/p><p> *   last: new FormControl('Drew'),<\/p><p> * });<\/p><p> *<\/p><p> * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}<\/p><p> * console.log(form.status);  // 'VALID'<\/p><p> * ```<\/p><p> *<\/p><p> * You can also include group-level validators as the second arg, or group-level async<\/p><p> * validators as the third arg. These come in handy when you want to perform validation<\/p><p> * that considers the value of more than one child control.<\/p><p> *<\/p><p> * ### Example<\/p><p> *<\/p><p> * ```<\/p><p> * const form = new FormGroup({<\/p><p> *   password: new FormControl('', Validators.minLength(2)),<\/p><p> *   passwordConfirm: new FormControl('', Validators.minLength(2)),<\/p><p> * }, passwordMatchValidator);<\/p><p> *<\/p><p> *<\/p><p> * function passwordMatchValidator(g: FormGroup) {<\/p><p> *    return g.get('password').value === g.get('passwordConfirm').value<\/p><p> *       ? null : {'mismatch': true};<\/p><p> * }<\/p><p> * ```<\/p><p> *<\/p><p> * * **npm package**: `\\@angular/forms`<\/p><p> *<\/p><p> * \\@stable<\/p><p> */<\/p><p>var FormGroup = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](FormGroup, _super);<\/p><p>    /**<\/p><p>     * @param {?} controls<\/p><p>     * @param {?=} validator<\/p><p>     * @param {?=} asyncValidator<\/p><p>     */<\/p><p>    function FormGroup(controls, validator, asyncValidator) {<\/p><p>        var _this = _super.call(this, validator || null, asyncValidator || null) || this;<\/p><p>        _this.controls = controls;<\/p><p>        _this._initObservables();<\/p><p>        _this._setUpControls();<\/p><p>        _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });<\/p><p>        return _this;<\/p><p>    }<\/p><p>    /**<\/p><p>     * Registers a control with the group's list of controls.<\/p><p>     *<\/p><p>     * This method does not update value or validity of the control, so for<\/p><p>     * most cases you'll want to use {\\@link FormGroup#addControl} instead.<\/p><p>     * @param {?} name<\/p><p>     * @param {?} control<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroup.prototype.registerControl = function (name, control) {<\/p><p>        if (this.controls[name])<\/p><p>            return this.controls[name];<\/p><p>        this.controls[name] = control;<\/p><p>        control.setParent(this);<\/p><p>        control._registerOnCollectionChange(this._onCollectionChange);<\/p><p>        return control;<\/p><p>    };<\/p><p>    /**<\/p><p>     * Add a control to this group.<\/p><p>     * @param {?} name<\/p><p>     * @param {?} control<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroup.prototype.addControl = function (name, control) {<\/p><p>        this.registerControl(name, control);<\/p><p>        this.updateValueAndValidity();<\/p><p>        this._onCollectionChange();<\/p><p>    };<\/p><p>    /**<\/p><p>     * Remove a control from this group.<\/p><p>     * @param {?} name<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroup.prototype.removeControl = function (name) {<\/p><p>        if (this.controls[name])<\/p><p>            this.controls[name]._registerOnCollectionChange(function () { });<\/p><p>        delete (this.controls[name]);<\/p><p>        this.updateValueAndValidity();<\/p><p>        this._onCollectionChange();<\/p><p>    };<\/p><p>    /**<\/p><p>     * Replace an existing control.<\/p><p>     * @param {?} name<\/p><p>     * @param {?} control<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroup.prototype.setControl = function (name, control) {<\/p><p>        if (this.controls[name])<\/p><p>            this.controls[name]._registerOnCollectionChange(function () { });<\/p><p>        delete (this.controls[name]);<\/p><p>        if (control)<\/p><p>            this.registerControl(name, control);<\/p><p>        this.updateValueAndValidity();<\/p><p>        this._onCollectionChange();<\/p><p>    };<\/p><p>    /**<\/p><p>     * Check whether there is an enabled control with the given name in the group.<\/p><p>     *<\/p><p>     * It will return false for disabled controls. If you'd like to check for<\/p><p>     * existence in the group only, use {\\@link AbstractControl#get} instead.<\/p><p>     * @param {?} controlName<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroup.prototype.contains = function (controlName) {<\/p><p>        return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;<\/p><p>    };<\/p><p>    /**<\/p><p>     *  Sets the value of the {\\@link FormGroup}. It accepts an object that matches<\/p><p>     *  the structure of the group, with control names as keys.<\/p><p>     *<\/p><p>     * This method performs strict checks, so it will throw an error if you try<\/p><p>     * to set the value of a control that doesn't exist or if you exclude the<\/p><p>     * value of a control.<\/p><p>     *<\/p><p>     *  ### Example<\/p><p>     *<\/p><p>     *  ```<\/p><p>     *  const form = new FormGroup({<\/p><p>     *     first: new FormControl(),<\/p><p>     *     last: new FormControl()<\/p><p>     *  });<\/p><p>     *  console.log(form.value);   // {first: null, last: null}<\/p><p>     *<\/p><p>     *  form.setValue({first: 'Nancy', last: 'Drew'});<\/p><p>     *  console.log(form.value);   // {first: 'Nancy', last: 'Drew'}<\/p><p>     *<\/p><p>     *  ```<\/p><p>     * @param {?} value<\/p><p>     * @param {?=} options<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroup.prototype.setValue = function (value, options) {<\/p><p>        var _this = this;<\/p><p>        if (options === void 0) { options = {}; }<\/p><p>        this._checkAllValuesPresent(value);<\/p><p>        Object.keys(value).forEach(function (name) {<\/p><p>            _this._throwIfControlMissing(name);<\/p><p>            _this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });<\/p><p>        });<\/p><p>        this.updateValueAndValidity(options);<\/p><p>    };<\/p><p>    /**<\/p><p>     *  Patches the value of the {\\@link FormGroup}. It accepts an object with control<\/p><p>     *  names as keys, and will do its best to match the values to the correct controls<\/p><p>     *  in the group.<\/p><p>     *<\/p><p>     *  It accepts both super-sets and sub-sets of the group without throwing an error.<\/p><p>     *<\/p><p>     *  ### Example<\/p><p>     *<\/p><p>     *  ```<\/p><p>     *  const form = new FormGroup({<\/p><p>     *     first: new FormControl(),<\/p><p>     *     last: new FormControl()<\/p><p>     *  });<\/p><p>     *  console.log(form.value);   // {first: null, last: null}<\/p><p>     *<\/p><p>     *  form.patchValue({first: 'Nancy'});<\/p><p>     *  console.log(form.value);   // {first: 'Nancy', last: null}<\/p><p>     *<\/p><p>     *  ```<\/p><p>     * @param {?} value<\/p><p>     * @param {?=} options<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroup.prototype.patchValue = function (value, options) {<\/p><p>        var _this = this;<\/p><p>        if (options === void 0) { options = {}; }<\/p><p>        Object.keys(value).forEach(function (name) {<\/p><p>            if (_this.controls[name]) {<\/p><p>                _this.controls[name].patchValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });<\/p><p>            }<\/p><p>        });<\/p><p>        this.updateValueAndValidity(options);<\/p><p>    };<\/p><p>    /**<\/p><p>     * Resets the {\\@link FormGroup}. This means by default:<\/p><p>     *<\/p><p>     * * The group and all descendants are marked `pristine`<\/p><p>     * * The group and all descendants are marked `untouched`<\/p><p>     * * The value of all descendants will be null or null maps<\/p><p>     *<\/p><p>     * You can also reset to a specific form state by passing in a map of states<\/p><p>     * that matches the structure of your form, with control names as keys. The state<\/p><p>     * can be a standalone value or a form state object with both a value and a disabled<\/p><p>     * status.<\/p><p>     *<\/p><p>     * ### Example<\/p><p>     *<\/p><p>     * ```ts<\/p><p>     * this.form.reset({first: 'name', last: 'last name'});<\/p><p>     *<\/p><p>     * console.log(this.form.value);  // {first: 'name', last: 'last name'}<\/p><p>     * ```<\/p><p>     *<\/p><p>     * - OR -<\/p><p>     *<\/p><p>     * ```<\/p><p>     * this.form.reset({<\/p><p>     *   first: {value: 'name', disabled: true},<\/p><p>     *   last: 'last'<\/p><p>     * });<\/p><p>     *<\/p><p>     * console.log(this.form.value);  // {first: 'name', last: 'last name'}<\/p><p>     * console.log(this.form.get('first').status);  // 'DISABLED'<\/p><p>     * ```<\/p><p>     * @param {?=} value<\/p><p>     * @param {?=} options<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroup.prototype.reset = function (value, options) {<\/p><p>        if (value === void 0) { value = {}; }<\/p><p>        if (options === void 0) { options = {}; }<\/p><p>        this._forEachChild(function (control, name) {<\/p><p>            control.reset(value[name], { onlySelf: true, emitEvent: options.emitEvent });<\/p><p>        });<\/p><p>        this.updateValueAndValidity(options);<\/p><p>        this._updatePristine(options);<\/p><p>        this._updateTouched(options);<\/p><p>    };<\/p><p>    /**<\/p><p>     * The aggregate value of the {\\@link FormGroup}, including any disabled controls.<\/p><p>     *<\/p><p>     * If you'd like to include all values regardless of disabled status, use this method.<\/p><p>     * Otherwise, the `value` property is the best way to get the value of the group.<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroup.prototype.getRawValue = function () {<\/p><p>        return this._reduceChildren({}, function (acc, control, name) {<\/p><p>            acc[name] = control instanceof FormControl ? control.value : ((control)).getRawValue();<\/p><p>            return acc;<\/p><p>        });<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @param {?} name<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroup.prototype._throwIfControlMissing = function (name) {<\/p><p>        if (!Object.keys(this.controls).length) {<\/p><p>            throw new Error(\"\\n        There are no form controls registered with this group yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");<\/p><p>        }<\/p><p>        if (!this.controls[name]) {<\/p><p>            throw new Error(\"Cannot find form control with name: \" + name + \".\");<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @param {?} cb<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroup.prototype._forEachChild = function (cb) {<\/p><p>        var _this = this;<\/p><p>        Object.keys(this.controls).forEach(function (k) { return cb(_this.controls[k], k); });<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroup.prototype._setUpControls = function () {<\/p><p>        var _this = this;<\/p><p>        this._forEachChild(function (control) {<\/p><p>            control.setParent(_this);<\/p><p>            control._registerOnCollectionChange(_this._onCollectionChange);<\/p><p>        });<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroup.prototype._updateValue = function () { this._value = this._reduceValue(); };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @param {?} condition<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroup.prototype._anyControls = function (condition) {<\/p><p>        var _this = this;<\/p><p>        var /** @type {?} */ res = false;<\/p><p>        this._forEachChild(function (control, name) {<\/p><p>            res = res || (_this.contains(name) && condition(control));<\/p><p>        });<\/p><p>        return res;<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroup.prototype._reduceValue = function () {<\/p><p>        var _this = this;<\/p><p>        return this._reduceChildren({}, function (acc, control, name) {<\/p><p>            if (control.enabled || _this.disabled) {<\/p><p>                acc[name] = control.value;<\/p><p>            }<\/p><p>            return acc;<\/p><p>        });<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @param {?} initValue<\/p><p>     * @param {?} fn<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroup.prototype._reduceChildren = function (initValue, fn) {<\/p><p>        var /** @type {?} */ res = initValue;<\/p><p>        this._forEachChild(function (control, name) { res = fn(res, control, name); });<\/p><p>        return res;<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroup.prototype._allControlsDisabled = function () {<\/p><p>        for (var _i = 0, _a = Object.keys(this.controls); _i < _a.length; _i++) {<\/p><p>            var controlName = _a[_i];<\/p><p>            if (this.controls[controlName].enabled) {<\/p><p>                return false;<\/p><p>            }<\/p><p>        }<\/p><p>        return Object.keys(this.controls).length > 0 || this.disabled;<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroup.prototype._checkAllValuesPresent = function (value) {<\/p><p>        this._forEachChild(function (control, name) {<\/p><p>            if (value[name] === undefined) {<\/p><p>                throw new Error(\"Must supply a value for form control with name: '\" + name + \"'.\");<\/p><p>            }<\/p><p>        });<\/p><p>    };<\/p><p>    return FormGroup;<\/p><p>}(AbstractControl));<\/p><p>/**<\/p><p> * \\@whatItDoes Tracks the value and validity state of an array of {\\@link FormControl},<\/p><p> * {\\@link FormGroup} or {\\@link FormArray} instances.<\/p><p> *<\/p><p> * A `FormArray` aggregates the values of each child {\\@link FormControl} into an array.<\/p><p> * It calculates its status by reducing the statuses of its children. For example, if one of<\/p><p> * the controls in a `FormArray` is invalid, the entire array becomes invalid.<\/p><p> *<\/p><p> * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,<\/p><p> * along with {\\@link FormControl} and {\\@link FormGroup}.<\/p><p> *<\/p><p> * \\@howToUse<\/p><p> *<\/p><p> * When instantiating a {\\@link FormArray}, pass in an array of child controls as the first<\/p><p> * argument.<\/p><p> *<\/p><p> * ### Example<\/p><p> *<\/p><p> * ```<\/p><p> * const arr = new FormArray([<\/p><p> *   new FormControl('Nancy', Validators.minLength(2)),<\/p><p> *   new FormControl('Drew'),<\/p><p> * ]);<\/p><p> *<\/p><p> * console.log(arr.value);   // ['Nancy', 'Drew']<\/p><p> * console.log(arr.status);  // 'VALID'<\/p><p> * ```<\/p><p> *<\/p><p> * You can also include array-level validators as the second arg, or array-level async<\/p><p> * validators as the third arg. These come in handy when you want to perform validation<\/p><p> * that considers the value of more than one child control.<\/p><p> *<\/p><p> * ### Adding or removing controls<\/p><p> *<\/p><p> * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods<\/p><p> * in `FormArray` itself. These methods ensure the controls are properly tracked in the<\/p><p> * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate<\/p><p> * the `FormArray` directly, as that will result in strange and unexpected behavior such<\/p><p> * as broken change detection.<\/p><p> *<\/p><p> * * **npm package**: `\\@angular/forms`<\/p><p> *<\/p><p> * \\@stable<\/p><p> */<\/p><p>var FormArray = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](FormArray, _super);<\/p><p>    /**<\/p><p>     * @param {?} controls<\/p><p>     * @param {?=} validator<\/p><p>     * @param {?=} asyncValidator<\/p><p>     */<\/p><p>    function FormArray(controls, validator, asyncValidator) {<\/p><p>        var _this = _super.call(this, validator || null, asyncValidator || null) || this;<\/p><p>        _this.controls = controls;<\/p><p>        _this._initObservables();<\/p><p>        _this._setUpControls();<\/p><p>        _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });<\/p><p>        return _this;<\/p><p>    }<\/p><p>    /**<\/p><p>     * Get the {\\@link AbstractControl} at the given `index` in the array.<\/p><p>     * @param {?} index<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormArray.prototype.at = function (index) { return this.controls[index]; };<\/p><p>    /**<\/p><p>     * Insert a new {\\@link AbstractControl} at the end of the array.<\/p><p>     * @param {?} control<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormArray.prototype.push = function (control) {<\/p><p>        this.controls.push(control);<\/p><p>        this._registerControl(control);<\/p><p>        this.updateValueAndValidity();<\/p><p>        this._onCollectionChange();<\/p><p>    };<\/p><p>    /**<\/p><p>     * Insert a new {\\@link AbstractControl} at the given `index` in the array.<\/p><p>     * @param {?} index<\/p><p>     * @param {?} control<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormArray.prototype.insert = function (index, control) {<\/p><p>        this.controls.splice(index, 0, control);<\/p><p>        this._registerControl(control);<\/p><p>        this.updateValueAndValidity();<\/p><p>        this._onCollectionChange();<\/p><p>    };<\/p><p>    /**<\/p><p>     * Remove the control at the given `index` in the array.<\/p><p>     * @param {?} index<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormArray.prototype.removeAt = function (index) {<\/p><p>        if (this.controls[index])<\/p><p>            this.controls[index]._registerOnCollectionChange(function () { });<\/p><p>        this.controls.splice(index, 1);<\/p><p>        this.updateValueAndValidity();<\/p><p>        this._onCollectionChange();<\/p><p>    };<\/p><p>    /**<\/p><p>     * Replace an existing control.<\/p><p>     * @param {?} index<\/p><p>     * @param {?} control<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormArray.prototype.setControl = function (index, control) {<\/p><p>        if (this.controls[index])<\/p><p>            this.controls[index]._registerOnCollectionChange(function () { });<\/p><p>        this.controls.splice(index, 1);<\/p><p>        if (control) {<\/p><p>            this.controls.splice(index, 0, control);<\/p><p>            this._registerControl(control);<\/p><p>        }<\/p><p>        this.updateValueAndValidity();<\/p><p>        this._onCollectionChange();<\/p><p>    };<\/p><p>    Object.defineProperty(FormArray.prototype, \"length\", {<\/p><p>        /**<\/p><p>         * Length of the control array.<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this.controls.length; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    /**<\/p><p>     *  Sets the value of the {\\@link FormArray}. It accepts an array that matches<\/p><p>     *  the structure of the control.<\/p><p>     *<\/p><p>     * This method performs strict checks, so it will throw an error if you try<\/p><p>     * to set the value of a control that doesn't exist or if you exclude the<\/p><p>     * value of a control.<\/p><p>     *<\/p><p>     *  ### Example<\/p><p>     *<\/p><p>     *  ```<\/p><p>     *  const arr = new FormArray([<\/p><p>     *     new FormControl(),<\/p><p>     *     new FormControl()<\/p><p>     *  ]);<\/p><p>     *  console.log(arr.value);   // [null, null]<\/p><p>     *<\/p><p>     *  arr.setValue(['Nancy', 'Drew']);<\/p><p>     *  console.log(arr.value);   // ['Nancy', 'Drew']<\/p><p>     *  ```<\/p><p>     * @param {?} value<\/p><p>     * @param {?=} options<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormArray.prototype.setValue = function (value, options) {<\/p><p>        var _this = this;<\/p><p>        if (options === void 0) { options = {}; }<\/p><p>        this._checkAllValuesPresent(value);<\/p><p>        value.forEach(function (newValue, index) {<\/p><p>            _this._throwIfControlMissing(index);<\/p><p>            _this.at(index).setValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });<\/p><p>        });<\/p><p>        this.updateValueAndValidity(options);<\/p><p>    };<\/p><p>    /**<\/p><p>     *  Patches the value of the {\\@link FormArray}. It accepts an array that matches the<\/p><p>     *  structure of the control, and will do its best to match the values to the correct<\/p><p>     *  controls in the group.<\/p><p>     *<\/p><p>     *  It accepts both super-sets and sub-sets of the array without throwing an error.<\/p><p>     *<\/p><p>     *  ### Example<\/p><p>     *<\/p><p>     *  ```<\/p><p>     *  const arr = new FormArray([<\/p><p>     *     new FormControl(),<\/p><p>     *     new FormControl()<\/p><p>     *  ]);<\/p><p>     *  console.log(arr.value);   // [null, null]<\/p><p>     *<\/p><p>     *  arr.patchValue(['Nancy']);<\/p><p>     *  console.log(arr.value);   // ['Nancy', null]<\/p><p>     *  ```<\/p><p>     * @param {?} value<\/p><p>     * @param {?=} options<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormArray.prototype.patchValue = function (value, options) {<\/p><p>        var _this = this;<\/p><p>        if (options === void 0) { options = {}; }<\/p><p>        value.forEach(function (newValue, index) {<\/p><p>            if (_this.at(index)) {<\/p><p>                _this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });<\/p><p>            }<\/p><p>        });<\/p><p>        this.updateValueAndValidity(options);<\/p><p>    };<\/p><p>    /**<\/p><p>     * Resets the {\\@link FormArray}. This means by default:<\/p><p>     *<\/p><p>     * * The array and all descendants are marked `pristine`<\/p><p>     * * The array and all descendants are marked `untouched`<\/p><p>     * * The value of all descendants will be null or null maps<\/p><p>     *<\/p><p>     * You can also reset to a specific form state by passing in an array of states<\/p><p>     * that matches the structure of the control. The state can be a standalone value<\/p><p>     * or a form state object with both a value and a disabled status.<\/p><p>     *<\/p><p>     * ### Example<\/p><p>     *<\/p><p>     * ```ts<\/p><p>     * this.arr.reset(['name', 'last name']);<\/p><p>     *<\/p><p>     * console.log(this.arr.value);  // ['name', 'last name']<\/p><p>     * ```<\/p><p>     *<\/p><p>     * - OR -<\/p><p>     *<\/p><p>     * ```<\/p><p>     * this.arr.reset([<\/p><p>     *   {value: 'name', disabled: true},<\/p><p>     *   'last'<\/p><p>     * ]);<\/p><p>     *<\/p><p>     * console.log(this.arr.value);  // ['name', 'last name']<\/p><p>     * console.log(this.arr.get(0).status);  // 'DISABLED'<\/p><p>     * ```<\/p><p>     * @param {?=} value<\/p><p>     * @param {?=} options<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormArray.prototype.reset = function (value, options) {<\/p><p>        if (value === void 0) { value = []; }<\/p><p>        if (options === void 0) { options = {}; }<\/p><p>        this._forEachChild(function (control, index) {<\/p><p>            control.reset(value[index], { onlySelf: true, emitEvent: options.emitEvent });<\/p><p>        });<\/p><p>        this.updateValueAndValidity(options);<\/p><p>        this._updatePristine(options);<\/p><p>        this._updateTouched(options);<\/p><p>    };<\/p><p>    /**<\/p><p>     * The aggregate value of the array, including any disabled controls.<\/p><p>     *<\/p><p>     * If you'd like to include all values regardless of disabled status, use this method.<\/p><p>     * Otherwise, the `value` property is the best way to get the value of the array.<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormArray.prototype.getRawValue = function () {<\/p><p>        return this.controls.map(function (control) {<\/p><p>            return control instanceof FormControl ? control.value : ((control)).getRawValue();<\/p><p>        });<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @param {?} index<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormArray.prototype._throwIfControlMissing = function (index) {<\/p><p>        if (!this.controls.length) {<\/p><p>            throw new Error(\"\\n        There are no form controls registered with this array yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");<\/p><p>        }<\/p><p>        if (!this.at(index)) {<\/p><p>            throw new Error(\"Cannot find form control at index \" + index);<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @param {?} cb<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormArray.prototype._forEachChild = function (cb) {<\/p><p>        this.controls.forEach(function (control, index) { cb(control, index); });<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormArray.prototype._updateValue = function () {<\/p><p>        var _this = this;<\/p><p>        this._value = this.controls.filter(function (control) { return control.enabled || _this.disabled; })<\/p><p>            .map(function (control) { return control.value; });<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @param {?} condition<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormArray.prototype._anyControls = function (condition) {<\/p><p>        return this.controls.some(function (control) { return control.enabled && condition(control); });<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormArray.prototype._setUpControls = function () {<\/p><p>        var _this = this;<\/p><p>        this._forEachChild(function (control) { return _this._registerControl(control); });<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormArray.prototype._checkAllValuesPresent = function (value) {<\/p><p>        this._forEachChild(function (control, i) {<\/p><p>            if (value[i] === undefined) {<\/p><p>                throw new Error(\"Must supply a value for form control at index: \" + i + \".\");<\/p><p>            }<\/p><p>        });<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormArray.prototype._allControlsDisabled = function () {<\/p><p>        for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {<\/p><p>            var control = _a[_i];<\/p><p>            if (control.enabled)<\/p><p>                return false;<\/p><p>        }<\/p><p>        return this.controls.length > 0 || this.disabled;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} control<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormArray.prototype._registerControl = function (control) {<\/p><p>        control.setParent(this);<\/p><p>        control._registerOnCollectionChange(this._onCollectionChange);<\/p><p>    };<\/p><p>    return FormArray;<\/p><p>}(AbstractControl));<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var formDirectiveProvider = {<\/p><p>    provide: ControlContainer,<\/p><p>    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return NgForm; })<\/p><p>};<\/p><p>var resolvedPromise = Promise.resolve(null);<\/p><p>/**<\/p><p> * \\@whatItDoes Creates a top-level {\\@link FormGroup} instance and binds it to a form<\/p><p> * to track aggregate form value and validation status.<\/p><p> *<\/p><p> * \\@howToUse<\/p><p> *<\/p><p> * As soon as you import the `FormsModule`, this directive becomes active by default on<\/p><p> * all `<form>` tags.  You don't need to add a special selector.<\/p><p> *<\/p><p> * You can export the directive into a local template variable using `ngForm` as the key<\/p><p> * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying<\/p><p> * {\\@link FormGroup} instance are duplicated on the directive itself, so a reference to it<\/p><p> * will give you access to the aggregate value and validity status of the form, as well as<\/p><p> * user interaction properties like `dirty` and `touched`.<\/p><p> *<\/p><p> * To register child controls with the form, you'll want to use {\\@link NgModel} with a<\/p><p> * `name` attribute.  You can also use {\\@link NgModelGroup} if you'd like to create<\/p><p> * sub-groups within the form.<\/p><p> *<\/p><p> * You can listen to the directive's `ngSubmit` event to be notified when the user has<\/p><p> * triggered a form submission. The `ngSubmit` event will be emitted with the original form<\/p><p> * submission event.<\/p><p> *<\/p><p> * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}<\/p><p> *<\/p><p> * * **npm package**: `\\@angular/forms`<\/p><p> *<\/p><p> * * **NgModule**: `FormsModule`<\/p><p> *<\/p><p> *  \\@stable<\/p><p> */<\/p><p>var NgForm = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](NgForm, _super);<\/p><p>    /**<\/p><p>     * @param {?} validators<\/p><p>     * @param {?} asyncValidators<\/p><p>     */<\/p><p>    function NgForm(validators, asyncValidators) {<\/p><p>        var _this = _super.call(this) || this;<\/p><p>        _this._submitted = false;<\/p><p>        _this.ngSubmit = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"EventEmitter\"]();<\/p><p>        _this.form =<\/p><p>            new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));<\/p><p>        return _this;<\/p><p>    }<\/p><p>    Object.defineProperty(NgForm.prototype, \"submitted\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._submitted; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(NgForm.prototype, \"formDirective\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(NgForm.prototype, \"control\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this.form; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(NgForm.prototype, \"path\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return []; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(NgForm.prototype, \"controls\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this.form.controls; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    /**<\/p><p>     * @param {?} dir<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    NgForm.prototype.addControl = function (dir) {<\/p><p>        var _this = this;<\/p><p>        resolvedPromise.then(function () {<\/p><p>            var /** @type {?} */ container = _this._findContainer(dir.path);<\/p><p>            dir._control = (container.registerControl(dir.name, dir.control));<\/p><p>            setUpControl(dir.control, dir);<\/p><p>            dir.control.updateValueAndValidity({ emitEvent: false });<\/p><p>        });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} dir<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    NgForm.prototype.getControl = function (dir) { return (this.form.get(dir.path)); };<\/p><p>    /**<\/p><p>     * @param {?} dir<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    NgForm.prototype.removeControl = function (dir) {<\/p><p>        var _this = this;<\/p><p>        resolvedPromise.then(function () {<\/p><p>            var /** @type {?} */ container = _this._findContainer(dir.path);<\/p><p>            if (container) {<\/p><p>                container.removeControl(dir.name);<\/p><p>            }<\/p><p>        });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} dir<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    NgForm.prototype.addFormGroup = function (dir) {<\/p><p>        var _this = this;<\/p><p>        resolvedPromise.then(function () {<\/p><p>            var /** @type {?} */ container = _this._findContainer(dir.path);<\/p><p>            var /** @type {?} */ group = new FormGroup({});<\/p><p>            setUpFormContainer(group, dir);<\/p><p>            container.registerControl(dir.name, group);<\/p><p>            group.updateValueAndValidity({ emitEvent: false });<\/p><p>        });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} dir<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    NgForm.prototype.removeFormGroup = function (dir) {<\/p><p>        var _this = this;<\/p><p>        resolvedPromise.then(function () {<\/p><p>            var /** @type {?} */ container = _this._findContainer(dir.path);<\/p><p>            if (container) {<\/p><p>                container.removeControl(dir.name);<\/p><p>            }<\/p><p>        });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} dir<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    NgForm.prototype.getFormGroup = function (dir) { return (this.form.get(dir.path)); };<\/p><p>    /**<\/p><p>     * @param {?} dir<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    NgForm.prototype.updateModel = function (dir, value) {<\/p><p>        var _this = this;<\/p><p>        resolvedPromise.then(function () {<\/p><p>            var /** @type {?} */ ctrl = (_this.form.get(/** @type {?} */ ((dir.path))));<\/p><p>            ctrl.setValue(value);<\/p><p>        });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    NgForm.prototype.setValue = function (value) { this.control.setValue(value); };<\/p><p>    /**<\/p><p>     * @param {?} $event<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    NgForm.prototype.onSubmit = function ($event) {<\/p><p>        this._submitted = true;<\/p><p>        this.ngSubmit.emit($event);<\/p><p>        return false;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    NgForm.prototype.onReset = function () { this.resetForm(); };<\/p><p>    /**<\/p><p>     * @param {?=} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    NgForm.prototype.resetForm = function (value) {<\/p><p>        if (value === void 0) { value = undefined; }<\/p><p>        this.form.reset(value);<\/p><p>        this._submitted = false;<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @param {?} path<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    NgForm.prototype._findContainer = function (path) {<\/p><p>        path.pop();<\/p><p>        return path.length ? (this.form.get(path)) : this.form;<\/p><p>    };<\/p><p>    return NgForm;<\/p><p>}(ControlContainer));<\/p><p>NgForm.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{<\/p><p>                selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',<\/p><p>                providers: [formDirectiveProvider],<\/p><p>                host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },<\/p><p>                outputs: ['ngSubmit'],<\/p><p>                exportAs: 'ngForm'<\/p><p>            },] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>NgForm.ctorParameters = function () { return [<\/p><p>    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_VALIDATORS,] },] },<\/p><p>    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },<\/p><p>]; };<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var FormErrorExamples = {<\/p><p>    formControlName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <input formControlName=\\\"firstName\\\">\\n    <\/div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       firstName: new FormControl()\\n    });\",<\/p><p>    formGroupName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <div formGroupName=\\\"person\\\">\\n          <input formControlName=\\\"firstName\\\">\\n       <\/div>\\n    <\/div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       person: new FormGroup({ firstName: new FormControl() })\\n    });\",<\/p><p>    formArrayName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <div formArrayName=\\\"cities\\\">\\n        <div *ngFor=\\\"let city of cityArray.controls; index as i\\\">\\n          <input [formControlName]=\\\"i\\\">\\n        <\/div>\\n      <\/div>\\n    <\/div>\\n\\n    In your class:\\n\\n    this.cityArray = new FormArray([new FormControl('SF')]);\\n    this.myGroup = new FormGroup({\\n      cities: this.cityArray\\n    });\",<\/p><p>    ngModelGroup: \"\\n    <form>\\n       <div ngModelGroup=\\\"person\\\">\\n          <input [(ngModel)]=\\\"person.name\\\" name=\\\"firstName\\\">\\n       <\/div>\\n    <\/form>\",<\/p><p>    ngModelWithFormGroup: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <input formControlName=\\\"firstName\\\">\\n       <input [(ngModel)]=\\\"showMoreControls\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n    <\/div>\\n  \"<\/p><p>};<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var TemplateDrivenErrors = (function () {<\/p><p>    function TemplateDrivenErrors() {<\/p><p>    }<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    TemplateDrivenErrors.modelParentException = function () {<\/p><p>        throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\\n      formGroup's partner directive \\\"formControlName\\\" instead.  Example:\\n\\n      \" + FormErrorExamples.formControlName + \"\\n\\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\\n\\n      Example:\\n\\n      \" + FormErrorExamples.ngModelWithFormGroup);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    TemplateDrivenErrors.formGroupNameException = function () {<\/p><p>        throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\\n\\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\\n\\n      \" + FormErrorExamples.formGroupName + \"\\n\\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\\n\\n      \" + FormErrorExamples.ngModelGroup);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    TemplateDrivenErrors.missingNameException = function () {<\/p><p>        throw new Error(\"If ngModel is used within a form tag, either the name attribute must be set or the form\\n      control must be defined as 'standalone' in ngModelOptions.\\n\\n      Example 1: <input [(ngModel)]=\\\"person.firstName\\\" name=\\\"first\\\">\\n      Example 2: <input [(ngModel)]=\\\"person.firstName\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\");<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    TemplateDrivenErrors.modelGroupParentException = function () {<\/p><p>        throw new Error(\"\\n      ngModelGroup cannot be used with a parent formGroup directive.\\n\\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\\n\\n      \" + FormErrorExamples.formGroupName + \"\\n\\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\\n\\n      \" + FormErrorExamples.ngModelGroup);<\/p><p>    };<\/p><p>    return TemplateDrivenErrors;<\/p><p>}());<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var modelGroupProvider = {<\/p><p>    provide: ControlContainer,<\/p><p>    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return NgModelGroup; })<\/p><p>};<\/p><p>/**<\/p><p> * \\@whatItDoes Creates and binds a {\\@link FormGroup} instance to a DOM element.<\/p><p> *<\/p><p> * \\@howToUse<\/p><p> *<\/p><p> * This directive can only be used as a child of {\\@link NgForm} (or in other words,<\/p><p> * within `<form>` tags).<\/p><p> *<\/p><p> * Use this directive if you'd like to create a sub-group within a form. This can<\/p><p> * come in handy if you want to validate a sub-group of your form separately from<\/p><p> * the rest of your form, or if some values in your domain model make more sense to<\/p><p> * consume together in a nested object.<\/p><p> *<\/p><p> * Pass in the name you'd like this sub-group to have and it will become the key<\/p><p> * for the sub-group in the form's full value. You can also export the directive into<\/p><p> * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).<\/p><p> *<\/p><p> * {\\@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}<\/p><p> *<\/p><p> * * **npm package**: `\\@angular/forms`<\/p><p> *<\/p><p> * * **NgModule**: `FormsModule`<\/p><p> *<\/p><p> * \\@stable<\/p><p> */<\/p><p>var NgModelGroup = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](NgModelGroup, _super);<\/p><p>    /**<\/p><p>     * @param {?} parent<\/p><p>     * @param {?} validators<\/p><p>     * @param {?} asyncValidators<\/p><p>     */<\/p><p>    function NgModelGroup(parent, validators, asyncValidators) {<\/p><p>        var _this = _super.call(this) || this;<\/p><p>        _this._parent = parent;<\/p><p>        _this._validators = validators;<\/p><p>        _this._asyncValidators = asyncValidators;<\/p><p>        return _this;<\/p><p>    }<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    NgModelGroup.prototype._checkParentType = function () {<\/p><p>        if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {<\/p><p>            TemplateDrivenErrors.modelGroupParentException();<\/p><p>        }<\/p><p>    };<\/p><p>    return NgModelGroup;<\/p><p>}(AbstractFormGroupDirective));<\/p><p>NgModelGroup.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' },] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>NgModelGroup.ctorParameters = function () { return [<\/p><p>    { type: ControlContainer, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Host\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"SkipSelf\"] },] },<\/p><p>    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_VALIDATORS,] },] },<\/p><p>    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },<\/p><p>]; };<\/p><p>NgModelGroup.propDecorators = {<\/p><p>    'name': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['ngModelGroup',] },],<\/p><p>};<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var formControlBinding = {<\/p><p>    provide: NgControl,<\/p><p>    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return NgModel; })<\/p><p>};<\/p><p>/**<\/p><p> * `ngModel` forces an additional change detection run when its inputs change:<\/p><p> * E.g.:<\/p><p> * ```<\/p><p> * <div>{{myModel.valid}}<\/div><\/p><p> * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\"><\/p><p> * ```<\/p><p> * I.e. `ngModel` can export itself on the element and then be used in the template.<\/p><p> * Normally, this would result in expressions before the `input` that use the exported directive<\/p><p> * to have and old value as they have been<\/p><p> * dirty checked before. As this is a very common case for `ngModel`, we added this second change<\/p><p> * detection run.<\/p><p> *<\/p><p> * Notes:<\/p><p> * - this is just one extra run no matter how many `ngModel` have been changed.<\/p><p> * - this is a general problem when using `exportAs` for directives!<\/p><p> */<\/p><p>var resolvedPromise$1 = Promise.resolve(null);<\/p><p>/**<\/p><p> * \\@whatItDoes Creates a {\\@link FormControl} instance from a domain model and binds it<\/p><p> * to a form control element.<\/p><p> *<\/p><p> * The {\\@link FormControl} instance will track the value, user interaction, and<\/p><p> * validation status of the control and keep the view synced with the model. If used<\/p><p> * within a parent form, the directive will also register itself with the form as a child<\/p><p> * control.<\/p><p> *<\/p><p> * \\@howToUse<\/p><p> *<\/p><p> * This directive can be used by itself or as part of a larger form. All you need is the<\/p><p> * `ngModel` selector to activate it.<\/p><p> *<\/p><p> * It accepts a domain model as an optional {\\@link Input}. If you have a one-way binding<\/p><p> * to `ngModel` with `[]` syntax, changing the value of the domain model in the component<\/p><p> * class will set the value in the view. If you have a two-way binding with `[()]` syntax<\/p><p> * (also known as 'banana-box syntax'), the value in the UI will always be synced back to<\/p><p> * the domain model in your class as well.<\/p><p> *<\/p><p> * If you wish to inspect the properties of the associated {\\@link FormControl} (like<\/p><p> * validity state), you can also export the directive into a local template variable using<\/p><p> * `ngModel` as the key (ex: `#myVar=\"ngModel\"`). You can then access the control using the<\/p><p> * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)<\/p><p> * will fall through to the control anyway, so you can access them directly. You can see a<\/p><p> * full list of properties directly available in {\\@link AbstractControlDirective}.<\/p><p> *<\/p><p> * The following is an example of a simple standalone control using `ngModel`:<\/p><p> *<\/p><p> * {\\@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}<\/p><p> *<\/p><p> * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute<\/p><p> * so that the control can be registered with the parent form under that name.<\/p><p> *<\/p><p> * It's worth noting that in the context of a parent form, you often can skip one-way or<\/p><p> * two-way binding because the parent form will sync the value for you. You can access<\/p><p> * its properties by exporting it into a local template variable using `ngForm` (ex:<\/p><p> * `#f=\"ngForm\"`). Then you can pass it where it needs to go on submit.<\/p><p> *<\/p><p> * If you do need to populate initial values into your form, using a one-way binding for<\/p><p> * `ngModel` tends to be sufficient as long as you use the exported form's value rather<\/p><p> * than the domain model's value on submit.<\/p><p> *<\/p><p> * Take a look at an example of using `ngModel` within a form:<\/p><p> *<\/p><p> * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}<\/p><p> *<\/p><p> * To see `ngModel` examples with different form control types, see:<\/p><p> *<\/p><p> * * Radio buttons: {\\@link RadioControlValueAccessor}<\/p><p> * * Selects: {\\@link SelectControlValueAccessor}<\/p><p> *<\/p><p> * **npm package**: `\\@angular/forms`<\/p><p> *<\/p><p> * **NgModule**: `FormsModule`<\/p><p> *<\/p><p> *  \\@stable<\/p><p> */<\/p><p>var NgModel = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](NgModel, _super);<\/p><p>    /**<\/p><p>     * @param {?} parent<\/p><p>     * @param {?} validators<\/p><p>     * @param {?} asyncValidators<\/p><p>     * @param {?} valueAccessors<\/p><p>     */<\/p><p>    function NgModel(parent, validators, asyncValidators, valueAccessors) {<\/p><p>        var _this = _super.call(this) || this;<\/p><p>        /**<\/p><p>         * \\@internal<\/p><p>         */<\/p><p>        _this._control = new FormControl();<\/p><p>        /**<\/p><p>         * \\@internal<\/p><p>         */<\/p><p>        _this._registered = false;<\/p><p>        _this.update = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"EventEmitter\"]();<\/p><p>        _this._parent = parent;<\/p><p>        _this._rawValidators = validators || [];<\/p><p>        _this._rawAsyncValidators = asyncValidators || [];<\/p><p>        _this.valueAccessor = selectValueAccessor(_this, valueAccessors);<\/p><p>        return _this;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} changes<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    NgModel.prototype.ngOnChanges = function (changes) {<\/p><p>        this._checkForErrors();<\/p><p>        if (!this._registered)<\/p><p>            this._setUpControl();<\/p><p>        if ('isDisabled' in changes) {<\/p><p>            this._updateDisabled(changes);<\/p><p>        }<\/p><p>        if (isPropertyUpdated(changes, this.viewModel)) {<\/p><p>            this._updateValue(this.model);<\/p><p>            this.viewModel = this.model;<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    NgModel.prototype.ngOnDestroy = function () { this.formDirective && this.formDirective.removeControl(this); };<\/p><p>    Object.defineProperty(NgModel.prototype, \"control\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._control; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(NgModel.prototype, \"path\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () {<\/p><p>            return this._parent ? controlPath(this.name, this._parent) : [this.name];<\/p><p>        },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(NgModel.prototype, \"formDirective\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._parent ? this._parent.formDirective : null; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(NgModel.prototype, \"validator\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return composeValidators(this._rawValidators); },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(NgModel.prototype, \"asyncValidator\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () {<\/p><p>            return composeAsyncValidators(this._rawAsyncValidators);<\/p><p>        },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    /**<\/p><p>     * @param {?} newValue<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    NgModel.prototype.viewToModelUpdate = function (newValue) {<\/p><p>        this.viewModel = newValue;<\/p><p>        this.update.emit(newValue);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    NgModel.prototype._setUpControl = function () {<\/p><p>        this._isStandalone() ? this._setUpStandalone() :<\/p><p>            this.formDirective.addControl(this);<\/p><p>        this._registered = true;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    NgModel.prototype._isStandalone = function () {<\/p><p>        return !this._parent || !!(this.options && this.options.standalone);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    NgModel.prototype._setUpStandalone = function () {<\/p><p>        setUpControl(this._control, this);<\/p><p>        this._control.updateValueAndValidity({ emitEvent: false });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    NgModel.prototype._checkForErrors = function () {<\/p><p>        if (!this._isStandalone()) {<\/p><p>            this._checkParentType();<\/p><p>        }<\/p><p>        this._checkName();<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    NgModel.prototype._checkParentType = function () {<\/p><p>        if (!(this._parent instanceof NgModelGroup) &&<\/p><p>            this._parent instanceof AbstractFormGroupDirective) {<\/p><p>            TemplateDrivenErrors.formGroupNameException();<\/p><p>        }<\/p><p>        else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {<\/p><p>            TemplateDrivenErrors.modelParentException();<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    NgModel.prototype._checkName = function () {<\/p><p>        if (this.options && this.options.name)<\/p><p>            this.name = this.options.name;<\/p><p>        if (!this._isStandalone() && !this.name) {<\/p><p>            TemplateDrivenErrors.missingNameException();<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    NgModel.prototype._updateValue = function (value) {<\/p><p>        var _this = this;<\/p><p>        resolvedPromise$1.then(function () { _this.control.setValue(value, { emitViewToModelChange: false }); });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} changes<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    NgModel.prototype._updateDisabled = function (changes) {<\/p><p>        var _this = this;<\/p><p>        var /** @type {?} */ disabledValue = changes['isDisabled'].currentValue;<\/p><p>        var /** @type {?} */ isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');<\/p><p>        resolvedPromise$1.then(function () {<\/p><p>            if (isDisabled && !_this.control.disabled) {<\/p><p>                _this.control.disable();<\/p><p>            }<\/p><p>            else if (!isDisabled && _this.control.disabled) {<\/p><p>                _this.control.enable();<\/p><p>            }<\/p><p>        });<\/p><p>    };<\/p><p>    return NgModel;<\/p><p>}(NgControl));<\/p><p>NgModel.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{<\/p><p>                selector: '[ngModel]:not([formControlName]):not([formControl])',<\/p><p>                providers: [formControlBinding],<\/p><p>                exportAs: 'ngModel'<\/p><p>            },] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>NgModel.ctorParameters = function () { return [<\/p><p>    { type: ControlContainer, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Host\"] },] },<\/p><p>    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_VALIDATORS,] },] },<\/p><p>    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },<\/p><p>    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_VALUE_ACCESSOR,] },] },<\/p><p>]; };<\/p><p>NgModel.propDecorators = {<\/p><p>    'name': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],<\/p><p>    'isDisabled': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['disabled',] },],<\/p><p>    'model': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['ngModel',] },],<\/p><p>    'options': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['ngModelOptions',] },],<\/p><p>    'update': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Output\"], args: ['ngModelChange',] },],<\/p><p>};<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var ReactiveErrors = (function () {<\/p><p>    function ReactiveErrors() {<\/p><p>    }<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ReactiveErrors.controlParentException = function () {<\/p><p>        throw new Error(\"formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + FormErrorExamples.formControlName);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ReactiveErrors.ngModelGroupException = function () {<\/p><p>        throw new Error(\"formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\\n       that also have a \\\"form\\\" prefix: formGroupName, formArrayName, or formGroup.\\n\\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\\n\\n        \" + FormErrorExamples.formGroupName + \"\\n\\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\\n\\n        \" + FormErrorExamples.ngModelGroup);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ReactiveErrors.missingFormException = function () {<\/p><p>        throw new Error(\"formGroup expects a FormGroup instance. Please pass one in.\\n\\n       Example:\\n\\n       \" + FormErrorExamples.formControlName);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ReactiveErrors.groupParentException = function () {<\/p><p>        throw new Error(\"formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n      directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + FormErrorExamples.formGroupName);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ReactiveErrors.arrayParentException = function () {<\/p><p>        throw new Error(\"formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n        Example:\\n\\n        \" + FormErrorExamples.formArrayName);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ReactiveErrors.disabledAttrWarning = function () {<\/p><p>        console.warn(\"\\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\\n      you. We recommend using this approach to avoid 'changed after checked' errors.\\n       \\n      Example: \\n      form = new FormGroup({\\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\\n        last: new FormControl('Drew', Validators.required)\\n      });\\n    \");<\/p><p>    };<\/p><p>    return ReactiveErrors;<\/p><p>}());<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var formControlBinding$1 = {<\/p><p>    provide: NgControl,<\/p><p>    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return FormControlDirective; })<\/p><p>};<\/p><p>/**<\/p><p> * \\@whatItDoes Syncs a standalone {\\@link FormControl} instance to a form control element.<\/p><p> *<\/p><p> * In other words, this directive ensures that any values written to the {\\@link FormControl}<\/p><p> * instance programmatically will be written to the DOM element (model -> view). Conversely,<\/p><p> * any values written to the DOM element through user input will be reflected in the<\/p><p> * {\\@link FormControl} instance (view -> model).<\/p><p> *<\/p><p> * \\@howToUse<\/p><p> *<\/p><p> * Use this directive if you'd like to create and manage a {\\@link FormControl} instance directly.<\/p><p> * Simply create a {\\@link FormControl}, save it to your component class, and pass it into the<\/p><p> * {\\@link FormControlDirective}.<\/p><p> *<\/p><p> * This directive is designed to be used as a standalone control.  Unlike {\\@link FormControlName},<\/p><p> * it does not require that your {\\@link FormControl} instance be part of any parent<\/p><p> * {\\@link FormGroup}, and it won't be registered to any {\\@link FormGroupDirective} that<\/p><p> * exists above it.<\/p><p> *<\/p><p> * **Get the value**: the `value` property is always synced and available on the<\/p><p> * {\\@link FormControl} instance. See a full list of available properties in<\/p><p> * {\\@link AbstractControl}.<\/p><p> *<\/p><p> * **Set the value**: You can pass in an initial value when instantiating the {\\@link FormControl},<\/p><p> * or you can set it programmatically later using {\\@link AbstractControl#setValue} or<\/p><p> * {\\@link AbstractControl#patchValue}.<\/p><p> *<\/p><p> * **Listen to value**: If you want to listen to changes in the value of the control, you can<\/p><p> * subscribe to the {\\@link AbstractControl#valueChanges} event.  You can also listen to<\/p><p> * {\\@link AbstractControl#statusChanges} to be notified when the validation status is<\/p><p> * re-calculated.<\/p><p> *<\/p><p> * ### Example<\/p><p> *<\/p><p> * {\\@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}<\/p><p> *<\/p><p> * * **npm package**: `\\@angular/forms`<\/p><p> *<\/p><p> * * **NgModule**: `ReactiveFormsModule`<\/p><p> *<\/p><p> *  \\@stable<\/p><p> */<\/p><p>var FormControlDirective = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](FormControlDirective, _super);<\/p><p>    /**<\/p><p>     * @param {?} validators<\/p><p>     * @param {?} asyncValidators<\/p><p>     * @param {?} valueAccessors<\/p><p>     */<\/p><p>    function FormControlDirective(validators, asyncValidators, valueAccessors) {<\/p><p>        var _this = _super.call(this) || this;<\/p><p>        _this.update = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"EventEmitter\"]();<\/p><p>        _this._rawValidators = validators || [];<\/p><p>        _this._rawAsyncValidators = asyncValidators || [];<\/p><p>        _this.valueAccessor = selectValueAccessor(_this, valueAccessors);<\/p><p>        return _this;<\/p><p>    }<\/p><p>    Object.defineProperty(FormControlDirective.prototype, \"isDisabled\", {<\/p><p>        /**<\/p><p>         * @param {?} isDisabled<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    /**<\/p><p>     * @param {?} changes<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormControlDirective.prototype.ngOnChanges = function (changes) {<\/p><p>        if (this._isControlChanged(changes)) {<\/p><p>            setUpControl(this.form, this);<\/p><p>            if (this.control.disabled && ((this.valueAccessor)).setDisabledState) {<\/p><p>                ((((this.valueAccessor)).setDisabledState))(true);<\/p><p>            }<\/p><p>            this.form.updateValueAndValidity({ emitEvent: false });<\/p><p>        }<\/p><p>        if (isPropertyUpdated(changes, this.viewModel)) {<\/p><p>            this.form.setValue(this.model);<\/p><p>            this.viewModel = this.model;<\/p><p>        }<\/p><p>    };<\/p><p>    Object.defineProperty(FormControlDirective.prototype, \"path\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return []; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(FormControlDirective.prototype, \"validator\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return composeValidators(this._rawValidators); },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(FormControlDirective.prototype, \"asyncValidator\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () {<\/p><p>            return composeAsyncValidators(this._rawAsyncValidators);<\/p><p>        },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(FormControlDirective.prototype, \"control\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this.form; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    /**<\/p><p>     * @param {?} newValue<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormControlDirective.prototype.viewToModelUpdate = function (newValue) {<\/p><p>        this.viewModel = newValue;<\/p><p>        this.update.emit(newValue);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} changes<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormControlDirective.prototype._isControlChanged = function (changes) {<\/p><p>        return changes.hasOwnProperty('form');<\/p><p>    };<\/p><p>    return FormControlDirective;<\/p><p>}(NgControl));<\/p><p>FormControlDirective.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' },] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>FormControlDirective.ctorParameters = function () { return [<\/p><p>    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_VALIDATORS,] },] },<\/p><p>    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },<\/p><p>    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_VALUE_ACCESSOR,] },] },<\/p><p>]; };<\/p><p>FormControlDirective.propDecorators = {<\/p><p>    'form': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['formControl',] },],<\/p><p>    'model': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['ngModel',] },],<\/p><p>    'update': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Output\"], args: ['ngModelChange',] },],<\/p><p>    'isDisabled': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['disabled',] },],<\/p><p>};<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var formDirectiveProvider$1 = {<\/p><p>    provide: ControlContainer,<\/p><p>    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return FormGroupDirective; })<\/p><p>};<\/p><p>/**<\/p><p> * \\@whatItDoes Binds an existing {\\@link FormGroup} to a DOM element.<\/p><p> *<\/p><p> * \\@howToUse<\/p><p> *<\/p><p> * This directive accepts an existing {\\@link FormGroup} instance. It will then use this<\/p><p> * {\\@link FormGroup} instance to match any child {\\@link FormControl}, {\\@link FormGroup},<\/p><p> * and {\\@link FormArray} instances to child {\\@link FormControlName}, {\\@link FormGroupName},<\/p><p> * and {\\@link FormArrayName} directives.<\/p><p> *<\/p><p> * **Set value**: You can set the form's initial value when instantiating the<\/p><p> * {\\@link FormGroup}, or you can set it programmatically later using the {\\@link FormGroup}'s<\/p><p> * {\\@link AbstractControl#setValue} or {\\@link AbstractControl#patchValue} methods.<\/p><p> *<\/p><p> * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe<\/p><p> * to the {\\@link FormGroup}'s {\\@link AbstractControl#valueChanges} event.  You can also listen to<\/p><p> * its {\\@link AbstractControl#statusChanges} event to be notified when the validation status is<\/p><p> * re-calculated.<\/p><p> *<\/p><p> * Furthermore, you can listen to the directive's `ngSubmit` event to be notified when the user has<\/p><p> * triggered a form submission. The `ngSubmit` event will be emitted with the original form<\/p><p> * submission event.<\/p><p> *<\/p><p> * ### Example<\/p><p> *<\/p><p> * In this example, we create form controls for first name and last name.<\/p><p> *<\/p><p> * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}<\/p><p> *<\/p><p> * **npm package**: `\\@angular/forms`<\/p><p> *<\/p><p> * **NgModule**: {\\@link ReactiveFormsModule}<\/p><p> *<\/p><p> *  \\@stable<\/p><p> */<\/p><p>var FormGroupDirective = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](FormGroupDirective, _super);<\/p><p>    /**<\/p><p>     * @param {?} _validators<\/p><p>     * @param {?} _asyncValidators<\/p><p>     */<\/p><p>    function FormGroupDirective(_validators, _asyncValidators) {<\/p><p>        var _this = _super.call(this) || this;<\/p><p>        _this._validators = _validators;<\/p><p>        _this._asyncValidators = _asyncValidators;<\/p><p>        _this._submitted = false;<\/p><p>        _this.directives = [];<\/p><p>        _this.form = ((null));<\/p><p>        _this.ngSubmit = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"EventEmitter\"]();<\/p><p>        return _this;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} changes<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroupDirective.prototype.ngOnChanges = function (changes) {<\/p><p>        this._checkFormPresent();<\/p><p>        if (changes.hasOwnProperty('form')) {<\/p><p>            this._updateValidators();<\/p><p>            this._updateDomValue();<\/p><p>            this._updateRegistrations();<\/p><p>        }<\/p><p>    };<\/p><p>    Object.defineProperty(FormGroupDirective.prototype, \"submitted\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._submitted; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(FormGroupDirective.prototype, \"formDirective\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(FormGroupDirective.prototype, \"control\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this.form; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(FormGroupDirective.prototype, \"path\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return []; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    /**<\/p><p>     * @param {?} dir<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroupDirective.prototype.addControl = function (dir) {<\/p><p>        var /** @type {?} */ ctrl = this.form.get(dir.path);<\/p><p>        setUpControl(ctrl, dir);<\/p><p>        ctrl.updateValueAndValidity({ emitEvent: false });<\/p><p>        this.directives.push(dir);<\/p><p>        return ctrl;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} dir<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroupDirective.prototype.getControl = function (dir) { return (this.form.get(dir.path)); };<\/p><p>    /**<\/p><p>     * @param {?} dir<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroupDirective.prototype.removeControl = function (dir) { remove(this.directives, dir); };<\/p><p>    /**<\/p><p>     * @param {?} dir<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroupDirective.prototype.addFormGroup = function (dir) {<\/p><p>        var /** @type {?} */ ctrl = this.form.get(dir.path);<\/p><p>        setUpFormContainer(ctrl, dir);<\/p><p>        ctrl.updateValueAndValidity({ emitEvent: false });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} dir<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroupDirective.prototype.removeFormGroup = function (dir) { };<\/p><p>    /**<\/p><p>     * @param {?} dir<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroupDirective.prototype.getFormGroup = function (dir) { return (this.form.get(dir.path)); };<\/p><p>    /**<\/p><p>     * @param {?} dir<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroupDirective.prototype.addFormArray = function (dir) {<\/p><p>        var /** @type {?} */ ctrl = this.form.get(dir.path);<\/p><p>        setUpFormContainer(ctrl, dir);<\/p><p>        ctrl.updateValueAndValidity({ emitEvent: false });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} dir<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroupDirective.prototype.removeFormArray = function (dir) { };<\/p><p>    /**<\/p><p>     * @param {?} dir<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroupDirective.prototype.getFormArray = function (dir) { return (this.form.get(dir.path)); };<\/p><p>    /**<\/p><p>     * @param {?} dir<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroupDirective.prototype.updateModel = function (dir, value) {<\/p><p>        var /** @type {?} */ ctrl = (this.form.get(dir.path));<\/p><p>        ctrl.setValue(value);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} $event<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroupDirective.prototype.onSubmit = function ($event) {<\/p><p>        this._submitted = true;<\/p><p>        this.ngSubmit.emit($event);<\/p><p>        return false;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroupDirective.prototype.onReset = function () { this.resetForm(); };<\/p><p>    /**<\/p><p>     * @param {?=} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroupDirective.prototype.resetForm = function (value) {<\/p><p>        if (value === void 0) { value = undefined; }<\/p><p>        this.form.reset(value);<\/p><p>        this._submitted = false;<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroupDirective.prototype._updateDomValue = function () {<\/p><p>        var _this = this;<\/p><p>        this.directives.forEach(function (dir) {<\/p><p>            var /** @type {?} */ newCtrl = _this.form.get(dir.path);<\/p><p>            if (dir._control !== newCtrl) {<\/p><p>                cleanUpControl(dir._control, dir);<\/p><p>                if (newCtrl)<\/p><p>                    setUpControl(newCtrl, dir);<\/p><p>                dir._control = newCtrl;<\/p><p>            }<\/p><p>        });<\/p><p>        this.form._updateTreeValidity({ emitEvent: false });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroupDirective.prototype._updateRegistrations = function () {<\/p><p>        var _this = this;<\/p><p>        this.form._registerOnCollectionChange(function () { return _this._updateDomValue(); });<\/p><p>        if (this._oldForm)<\/p><p>            this._oldForm._registerOnCollectionChange(function () { });<\/p><p>        this._oldForm = this.form;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroupDirective.prototype._updateValidators = function () {<\/p><p>        var /** @type {?} */ sync = composeValidators(this._validators);<\/p><p>        this.form.validator = Validators.compose([/** @type {?} */ ((this.form.validator)), /** @type {?} */ ((sync))]);<\/p><p>        var /** @type {?} */ async = composeAsyncValidators(this._asyncValidators);<\/p><p>        this.form.asyncValidator = Validators.composeAsync([/** @type {?} */ ((this.form.asyncValidator)), /** @type {?} */ ((async))]);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroupDirective.prototype._checkFormPresent = function () {<\/p><p>        if (!this.form) {<\/p><p>            ReactiveErrors.missingFormException();<\/p><p>        }<\/p><p>    };<\/p><p>    return FormGroupDirective;<\/p><p>}(ControlContainer));<\/p><p>FormGroupDirective.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{<\/p><p>                selector: '[formGroup]',<\/p><p>                providers: [formDirectiveProvider$1],<\/p><p>                host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },<\/p><p>                exportAs: 'ngForm'<\/p><p>            },] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>FormGroupDirective.ctorParameters = function () { return [<\/p><p>    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_VALIDATORS,] },] },<\/p><p>    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },<\/p><p>]; };<\/p><p>FormGroupDirective.propDecorators = {<\/p><p>    'form': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['formGroup',] },],<\/p><p>    'ngSubmit': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Output\"] },],<\/p><p>};<\/p><p>/**<\/p><p> * @template T<\/p><p> * @param {?} list<\/p><p> * @param {?} el<\/p><p> * @return {?}<\/p><p> */<\/p><p>function remove(list, el) {<\/p><p>    var /** @type {?} */ index = list.indexOf(el);<\/p><p>    if (index > -1) {<\/p><p>        list.splice(index, 1);<\/p><p>    }<\/p><p>}<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var formGroupNameProvider = {<\/p><p>    provide: ControlContainer,<\/p><p>    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return FormGroupName; })<\/p><p>};<\/p><p>/**<\/p><p> * \\@whatItDoes Syncs a nested {\\@link FormGroup} to a DOM element.<\/p><p> *<\/p><p> * \\@howToUse<\/p><p> *<\/p><p> * This directive can only be used with a parent {\\@link FormGroupDirective} (selector:<\/p><p> * `[formGroup]`).<\/p><p> *<\/p><p> * It accepts the string name of the nested {\\@link FormGroup} you want to link, and<\/p><p> * will look for a {\\@link FormGroup} registered with that name in the parent<\/p><p> * {\\@link FormGroup} instance you passed into {\\@link FormGroupDirective}.<\/p><p> *<\/p><p> * Nested form groups can come in handy when you want to validate a sub-group of a<\/p><p> * form separately from the rest or when you'd like to group the values of certain<\/p><p> * controls into their own nested object.<\/p><p> *<\/p><p> * **Access the group**: You can access the associated {\\@link FormGroup} using the<\/p><p> * {\\@link AbstractControl#get} method. Ex: `this.form.get('name')`.<\/p><p> *<\/p><p> * You can also access individual controls within the group using dot syntax.<\/p><p> * Ex: `this.form.get('name.first')`<\/p><p> *<\/p><p> * **Get the value**: the `value` property is always synced and available on the<\/p><p> * {\\@link FormGroup}. See a full list of available properties in {\\@link AbstractControl}.<\/p><p> *<\/p><p> * **Set the value**: You can set an initial value for each child control when instantiating<\/p><p> * the {\\@link FormGroup}, or you can set it programmatically later using<\/p><p> * {\\@link AbstractControl#setValue} or {\\@link AbstractControl#patchValue}.<\/p><p> *<\/p><p> * **Listen to value**: If you want to listen to changes in the value of the group, you can<\/p><p> * subscribe to the {\\@link AbstractControl#valueChanges} event.  You can also listen to<\/p><p> * {\\@link AbstractControl#statusChanges} to be notified when the validation status is<\/p><p> * re-calculated.<\/p><p> *<\/p><p> * ### Example<\/p><p> *<\/p><p> * {\\@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}<\/p><p> *<\/p><p> * * **npm package**: `\\@angular/forms`<\/p><p> *<\/p><p> * * **NgModule**: `ReactiveFormsModule`<\/p><p> *<\/p><p> * \\@stable<\/p><p> */<\/p><p>var FormGroupName = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](FormGroupName, _super);<\/p><p>    /**<\/p><p>     * @param {?} parent<\/p><p>     * @param {?} validators<\/p><p>     * @param {?} asyncValidators<\/p><p>     */<\/p><p>    function FormGroupName(parent, validators, asyncValidators) {<\/p><p>        var _this = _super.call(this) || this;<\/p><p>        _this._parent = parent;<\/p><p>        _this._validators = validators;<\/p><p>        _this._asyncValidators = asyncValidators;<\/p><p>        return _this;<\/p><p>    }<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormGroupName.prototype._checkParentType = function () {<\/p><p>        if (_hasInvalidParent(this._parent)) {<\/p><p>            ReactiveErrors.groupParentException();<\/p><p>        }<\/p><p>    };<\/p><p>    return FormGroupName;<\/p><p>}(AbstractFormGroupDirective));<\/p><p>FormGroupName.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] },] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>FormGroupName.ctorParameters = function () { return [<\/p><p>    { type: ControlContainer, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Host\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"SkipSelf\"] },] },<\/p><p>    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_VALIDATORS,] },] },<\/p><p>    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },<\/p><p>]; };<\/p><p>FormGroupName.propDecorators = {<\/p><p>    'name': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['formGroupName',] },],<\/p><p>};<\/p><p>var formArrayNameProvider = {<\/p><p>    provide: ControlContainer,<\/p><p>    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return FormArrayName; })<\/p><p>};<\/p><p>/**<\/p><p> * \\@whatItDoes Syncs a nested {\\@link FormArray} to a DOM element.<\/p><p> *<\/p><p> * \\@howToUse<\/p><p> *<\/p><p> * This directive is designed to be used with a parent {\\@link FormGroupDirective} (selector:<\/p><p> * `[formGroup]`).<\/p><p> *<\/p><p> * It accepts the string name of the nested {\\@link FormArray} you want to link, and<\/p><p> * will look for a {\\@link FormArray} registered with that name in the parent<\/p><p> * {\\@link FormGroup} instance you passed into {\\@link FormGroupDirective}.<\/p><p> *<\/p><p> * Nested form arrays can come in handy when you have a group of form controls but<\/p><p> * you're not sure how many there will be. Form arrays allow you to create new<\/p><p> * form controls dynamically.<\/p><p> *<\/p><p> * **Access the array**: You can access the associated {\\@link FormArray} using the<\/p><p> * {\\@link AbstractControl#get} method on the parent {\\@link FormGroup}.<\/p><p> * Ex: `this.form.get('cities')`.<\/p><p> *<\/p><p> * **Get the value**: the `value` property is always synced and available on the<\/p><p> * {\\@link FormArray}. See a full list of available properties in {\\@link AbstractControl}.<\/p><p> *<\/p><p> * **Set the value**: You can set an initial value for each child control when instantiating<\/p><p> * the {\\@link FormArray}, or you can set the value programmatically later using the<\/p><p> * {\\@link FormArray}'s {\\@link AbstractControl#setValue} or {\\@link AbstractControl#patchValue}<\/p><p> * methods.<\/p><p> *<\/p><p> * **Listen to value**: If you want to listen to changes in the value of the array, you can<\/p><p> * subscribe to the {\\@link FormArray}'s {\\@link AbstractControl#valueChanges} event.  You can also<\/p><p> * listen to its {\\@link AbstractControl#statusChanges} event to be notified when the validation<\/p><p> * status is re-calculated.<\/p><p> *<\/p><p> * **Add new controls**: You can add new controls to the {\\@link FormArray} dynamically by<\/p><p> * calling its {\\@link FormArray#push} method.<\/p><p> *  Ex: `this.form.get('cities').push(new FormControl());`<\/p><p> *<\/p><p> * ### Example<\/p><p> *<\/p><p> * {\\@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}<\/p><p> *<\/p><p> * * **npm package**: `\\@angular/forms`<\/p><p> *<\/p><p> * * **NgModule**: `ReactiveFormsModule`<\/p><p> *<\/p><p> * \\@stable<\/p><p> */<\/p><p>var FormArrayName = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](FormArrayName, _super);<\/p><p>    /**<\/p><p>     * @param {?} parent<\/p><p>     * @param {?} validators<\/p><p>     * @param {?} asyncValidators<\/p><p>     */<\/p><p>    function FormArrayName(parent, validators, asyncValidators) {<\/p><p>        var _this = _super.call(this) || this;<\/p><p>        _this._parent = parent;<\/p><p>        _this._validators = validators;<\/p><p>        _this._asyncValidators = asyncValidators;<\/p><p>        return _this;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormArrayName.prototype.ngOnInit = function () {<\/p><p>        this._checkParentType(); /** @type {?} */<\/p><p>        ((this.formDirective)).addFormArray(this);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormArrayName.prototype.ngOnDestroy = function () {<\/p><p>        if (this.formDirective) {<\/p><p>            this.formDirective.removeFormArray(this);<\/p><p>        }<\/p><p>    };<\/p><p>    Object.defineProperty(FormArrayName.prototype, \"control\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return ((this.formDirective)).getFormArray(this); },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(FormArrayName.prototype, \"formDirective\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () {<\/p><p>            return this._parent ? (this._parent.formDirective) : null;<\/p><p>        },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(FormArrayName.prototype, \"path\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return controlPath(this.name, this._parent); },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(FormArrayName.prototype, \"validator\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return composeValidators(this._validators); },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(FormArrayName.prototype, \"asyncValidator\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () {<\/p><p>            return composeAsyncValidators(this._asyncValidators);<\/p><p>        },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormArrayName.prototype._checkParentType = function () {<\/p><p>        if (_hasInvalidParent(this._parent)) {<\/p><p>            ReactiveErrors.arrayParentException();<\/p><p>        }<\/p><p>    };<\/p><p>    return FormArrayName;<\/p><p>}(ControlContainer));<\/p><p>FormArrayName.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] },] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>FormArrayName.ctorParameters = function () { return [<\/p><p>    { type: ControlContainer, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Host\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"SkipSelf\"] },] },<\/p><p>    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_VALIDATORS,] },] },<\/p><p>    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },<\/p><p>]; };<\/p><p>FormArrayName.propDecorators = {<\/p><p>    'name': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['formArrayName',] },],<\/p><p>};<\/p><p>/**<\/p><p> * @param {?} parent<\/p><p> * @return {?}<\/p><p> */<\/p><p>function _hasInvalidParent(parent) {<\/p><p>    return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&<\/p><p>        !(parent instanceof FormArrayName);<\/p><p>}<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var controlNameBinding = {<\/p><p>    provide: NgControl,<\/p><p>    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return FormControlName; })<\/p><p>};<\/p><p>/**<\/p><p> * \\@whatItDoes Syncs a {\\@link FormControl} in an existing {\\@link FormGroup} to a form control<\/p><p> * element by name.<\/p><p> *<\/p><p> * In other words, this directive ensures that any values written to the {\\@link FormControl}<\/p><p> * instance programmatically will be written to the DOM element (model -> view). Conversely,<\/p><p> * any values written to the DOM element through user input will be reflected in the<\/p><p> * {\\@link FormControl} instance (view -> model).<\/p><p> *<\/p><p> * \\@howToUse<\/p><p> *<\/p><p> * This directive is designed to be used with a parent {\\@link FormGroupDirective} (selector:<\/p><p> * `[formGroup]`).<\/p><p> *<\/p><p> * It accepts the string name of the {\\@link FormControl} instance you want to<\/p><p> * link, and will look for a {\\@link FormControl} registered with that name in the<\/p><p> * closest {\\@link FormGroup} or {\\@link FormArray} above it.<\/p><p> *<\/p><p> * **Access the control**: You can access the {\\@link FormControl} associated with<\/p><p> * this directive by using the {\\@link AbstractControl#get} method.<\/p><p> * Ex: `this.form.get('first');`<\/p><p> *<\/p><p> * **Get value**: the `value` property is always synced and available on the {\\@link FormControl}.<\/p><p> * See a full list of available properties in {\\@link AbstractControl}.<\/p><p> *<\/p><p> *  **Set value**: You can set an initial value for the control when instantiating the<\/p><p> *  {\\@link FormControl}, or you can set it programmatically later using<\/p><p> *  {\\@link AbstractControl#setValue} or {\\@link AbstractControl#patchValue}.<\/p><p> *<\/p><p> * **Listen to value**: If you want to listen to changes in the value of the control, you can<\/p><p> * subscribe to the {\\@link AbstractControl#valueChanges} event.  You can also listen to<\/p><p> * {\\@link AbstractControl#statusChanges} to be notified when the validation status is<\/p><p> * re-calculated.<\/p><p> *<\/p><p> * ### Example<\/p><p> *<\/p><p> * In this example, we create form controls for first name and last name.<\/p><p> *<\/p><p> * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}<\/p><p> *<\/p><p> * To see `formControlName` examples with different form control types, see:<\/p><p> *<\/p><p> * * Radio buttons: {\\@link RadioControlValueAccessor}<\/p><p> * * Selects: {\\@link SelectControlValueAccessor}<\/p><p> *<\/p><p> * **npm package**: `\\@angular/forms`<\/p><p> *<\/p><p> * **NgModule**: {\\@link ReactiveFormsModule}<\/p><p> *<\/p><p> *  \\@stable<\/p><p> */<\/p><p>var FormControlName = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](FormControlName, _super);<\/p><p>    /**<\/p><p>     * @param {?} parent<\/p><p>     * @param {?} validators<\/p><p>     * @param {?} asyncValidators<\/p><p>     * @param {?} valueAccessors<\/p><p>     */<\/p><p>    function FormControlName(parent, validators, asyncValidators, valueAccessors) {<\/p><p>        var _this = _super.call(this) || this;<\/p><p>        _this._added = false;<\/p><p>        _this.update = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"EventEmitter\"]();<\/p><p>        _this._parent = parent;<\/p><p>        _this._rawValidators = validators || [];<\/p><p>        _this._rawAsyncValidators = asyncValidators || [];<\/p><p>        _this.valueAccessor = selectValueAccessor(_this, valueAccessors);<\/p><p>        return _this;<\/p><p>    }<\/p><p>    Object.defineProperty(FormControlName.prototype, \"isDisabled\", {<\/p><p>        /**<\/p><p>         * @param {?} isDisabled<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    /**<\/p><p>     * @param {?} changes<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormControlName.prototype.ngOnChanges = function (changes) {<\/p><p>        if (!this._added)<\/p><p>            this._setUpControl();<\/p><p>        if (isPropertyUpdated(changes, this.viewModel)) {<\/p><p>            this.viewModel = this.model;<\/p><p>            this.formDirective.updateModel(this, this.model);<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormControlName.prototype.ngOnDestroy = function () {<\/p><p>        if (this.formDirective) {<\/p><p>            this.formDirective.removeControl(this);<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} newValue<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormControlName.prototype.viewToModelUpdate = function (newValue) {<\/p><p>        this.viewModel = newValue;<\/p><p>        this.update.emit(newValue);<\/p><p>    };<\/p><p>    Object.defineProperty(FormControlName.prototype, \"path\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return controlPath(this.name, /** @type {?} */ ((this._parent))); },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(FormControlName.prototype, \"formDirective\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._parent ? this._parent.formDirective : null; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(FormControlName.prototype, \"validator\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return composeValidators(this._rawValidators); },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(FormControlName.prototype, \"asyncValidator\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () {<\/p><p>            return ((composeAsyncValidators(this._rawAsyncValidators)));<\/p><p>        },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(FormControlName.prototype, \"control\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._control; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormControlName.prototype._checkParentType = function () {<\/p><p>        if (!(this._parent instanceof FormGroupName) &&<\/p><p>            this._parent instanceof AbstractFormGroupDirective) {<\/p><p>            ReactiveErrors.ngModelGroupException();<\/p><p>        }<\/p><p>        else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&<\/p><p>            !(this._parent instanceof FormArrayName)) {<\/p><p>            ReactiveErrors.controlParentException();<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormControlName.prototype._setUpControl = function () {<\/p><p>        this._checkParentType();<\/p><p>        this._control = this.formDirective.addControl(this);<\/p><p>        if (this.control.disabled && ((this.valueAccessor)).setDisabledState) {<\/p><p>            ((((this.valueAccessor)).setDisabledState))(true);<\/p><p>        }<\/p><p>        this._added = true;<\/p><p>    };<\/p><p>    return FormControlName;<\/p><p>}(NgControl));<\/p><p>FormControlName.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{ selector: '[formControlName]', providers: [controlNameBinding] },] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>FormControlName.ctorParameters = function () { return [<\/p><p>    { type: ControlContainer, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Host\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"SkipSelf\"] },] },<\/p><p>    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_VALIDATORS,] },] },<\/p><p>    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },<\/p><p>    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_VALUE_ACCESSOR,] },] },<\/p><p>]; };<\/p><p>FormControlName.propDecorators = {<\/p><p>    'name': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['formControlName',] },],<\/p><p>    'model': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['ngModel',] },],<\/p><p>    'update': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Output\"], args: ['ngModelChange',] },],<\/p><p>    'isDisabled': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['disabled',] },],<\/p><p>};<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var REQUIRED_VALIDATOR = {<\/p><p>    provide: NG_VALIDATORS,<\/p><p>    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return RequiredValidator; }),<\/p><p>    multi: true<\/p><p>};<\/p><p>var CHECKBOX_REQUIRED_VALIDATOR = {<\/p><p>    provide: NG_VALIDATORS,<\/p><p>    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return CheckboxRequiredValidator; }),<\/p><p>    multi: true<\/p><p>};<\/p><p>/**<\/p><p> * A Directive that adds the `required` validator to any controls marked with the<\/p><p> * `required` attribute, via the {\\@link NG_VALIDATORS} binding.<\/p><p> *<\/p><p> * ### Example<\/p><p> *<\/p><p> * ```<\/p><p> * <input name=\"fullName\" ngModel required><\/p><p> * ```<\/p><p> *<\/p><p> * \\@stable<\/p><p> */<\/p><p>var RequiredValidator = (function () {<\/p><p>    function RequiredValidator() {<\/p><p>    }<\/p><p>    Object.defineProperty(RequiredValidator.prototype, \"required\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._required; },<\/p><p>        /**<\/p><p>         * @param {?} value<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        set: function (value) {<\/p><p>            this._required = value != null && value !== false && \"\" + value !== 'false';<\/p><p>            if (this._onChange)<\/p><p>                this._onChange();<\/p><p>        },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    /**<\/p><p>     * @param {?} c<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RequiredValidator.prototype.validate = function (c) {<\/p><p>        return this.required ? Validators.required(c) : null;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} fn<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RequiredValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };<\/p><p>    return RequiredValidator;<\/p><p>}());<\/p><p>RequiredValidator.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{<\/p><p>                selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',<\/p><p>                providers: [REQUIRED_VALIDATOR],<\/p><p>                host: { '[attr.required]': 'required ? \"\" : null' }<\/p><p>            },] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>RequiredValidator.ctorParameters = function () { return []; };<\/p><p>RequiredValidator.propDecorators = {<\/p><p>    'required': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],<\/p><p>};<\/p><p>/**<\/p><p> * A Directive that adds the `required` validator to checkbox controls marked with the<\/p><p> * `required` attribute, via the {\\@link NG_VALIDATORS} binding.<\/p><p> *<\/p><p> * ### Example<\/p><p> *<\/p><p> * ```<\/p><p> * <input type=\"checkbox\" name=\"active\" ngModel required><\/p><p> * ```<\/p><p> *<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var CheckboxRequiredValidator = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](CheckboxRequiredValidator, _super);<\/p><p>    function CheckboxRequiredValidator() {<\/p><p>        return _super !== null && _super.apply(this, arguments) || this;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} c<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    CheckboxRequiredValidator.prototype.validate = function (c) {<\/p><p>        return this.required ? Validators.requiredTrue(c) : null;<\/p><p>    };<\/p><p>    return CheckboxRequiredValidator;<\/p><p>}(RequiredValidator));<\/p><p>CheckboxRequiredValidator.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{<\/p><p>                selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',<\/p><p>                providers: [CHECKBOX_REQUIRED_VALIDATOR],<\/p><p>                host: { '[attr.required]': 'required ? \"\" : null' }<\/p><p>            },] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>CheckboxRequiredValidator.ctorParameters = function () { return []; };<\/p><p>/**<\/p><p> * Provider which adds {\\@link EmailValidator} to {\\@link NG_VALIDATORS}.<\/p><p> */<\/p><p>var EMAIL_VALIDATOR = {<\/p><p>    provide: NG_VALIDATORS,<\/p><p>    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return EmailValidator; }),<\/p><p>    multi: true<\/p><p>};<\/p><p>/**<\/p><p> * A Directive that adds the `email` validator to controls marked with the<\/p><p> * `email` attribute, via the {\\@link NG_VALIDATORS} binding.<\/p><p> *<\/p><p> * ### Example<\/p><p> *<\/p><p> * ```<\/p><p> * <input type=\"email\" name=\"email\" ngModel email><\/p><p> * <input type=\"email\" name=\"email\" ngModel email=\"true\"><\/p><p> * <input type=\"email\" name=\"email\" ngModel [email]=\"true\"><\/p><p> * ```<\/p><p> *<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var EmailValidator = (function () {<\/p><p>    function EmailValidator() {<\/p><p>    }<\/p><p>    Object.defineProperty(EmailValidator.prototype, \"email\", {<\/p><p>        /**<\/p><p>         * @param {?} value<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        set: function (value) {<\/p><p>            this._enabled = value === '' || value === true || value === 'true';<\/p><p>            if (this._onChange)<\/p><p>                this._onChange();<\/p><p>        },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    /**<\/p><p>     * @param {?} c<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    EmailValidator.prototype.validate = function (c) {<\/p><p>        return this._enabled ? Validators.email(c) : null;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} fn<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    EmailValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };<\/p><p>    return EmailValidator;<\/p><p>}());<\/p><p>EmailValidator.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{<\/p><p>                selector: '[email][formControlName],[email][formControl],[email][ngModel]',<\/p><p>                providers: [EMAIL_VALIDATOR]<\/p><p>            },] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>EmailValidator.ctorParameters = function () { return []; };<\/p><p>EmailValidator.propDecorators = {<\/p><p>    'email': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],<\/p><p>};<\/p><p>/**<\/p><p> * Provider which adds {\\@link MinLengthValidator} to {\\@link NG_VALIDATORS}.<\/p><p> *<\/p><p> * ## Example:<\/p><p> *<\/p><p> * {\\@example common/forms/ts/validators/validators.ts region='min'}<\/p><p> */<\/p><p>var MIN_LENGTH_VALIDATOR = {<\/p><p>    provide: NG_VALIDATORS,<\/p><p>    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return MinLengthValidator; }),<\/p><p>    multi: true<\/p><p>};<\/p><p>/**<\/p><p> * A directive which installs the {\\@link MinLengthValidator} for any `formControlName`,<\/p><p> * `formControl`, or control with `ngModel` that also has a `minlength` attribute.<\/p><p> *<\/p><p> * \\@stable<\/p><p> */<\/p><p>var MinLengthValidator = (function () {<\/p><p>    function MinLengthValidator() {<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} changes<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    MinLengthValidator.prototype.ngOnChanges = function (changes) {<\/p><p>        if ('minlength' in changes) {<\/p><p>            this._createValidator();<\/p><p>            if (this._onChange)<\/p><p>                this._onChange();<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} c<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    MinLengthValidator.prototype.validate = function (c) {<\/p><p>        return this.minlength == null ? null : this._validator(c);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} fn<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    MinLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    MinLengthValidator.prototype._createValidator = function () {<\/p><p>        this._validator = Validators.minLength(parseInt(this.minlength, 10));<\/p><p>    };<\/p><p>    return MinLengthValidator;<\/p><p>}());<\/p><p>MinLengthValidator.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{<\/p><p>                selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',<\/p><p>                providers: [MIN_LENGTH_VALIDATOR],<\/p><p>                host: { '[attr.minlength]': 'minlength ? minlength : null' }<\/p><p>            },] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>MinLengthValidator.ctorParameters = function () { return []; };<\/p><p>MinLengthValidator.propDecorators = {<\/p><p>    'minlength': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],<\/p><p>};<\/p><p>/**<\/p><p> * Provider which adds {\\@link MaxLengthValidator} to {\\@link NG_VALIDATORS}.<\/p><p> *<\/p><p> * ## Example:<\/p><p> *<\/p><p> * {\\@example common/forms/ts/validators/validators.ts region='max'}<\/p><p> */<\/p><p>var MAX_LENGTH_VALIDATOR = {<\/p><p>    provide: NG_VALIDATORS,<\/p><p>    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return MaxLengthValidator; }),<\/p><p>    multi: true<\/p><p>};<\/p><p>/**<\/p><p> * A directive which installs the {\\@link MaxLengthValidator} for any `formControlName,<\/p><p> * `formControl`,<\/p><p> * or control with `ngModel` that also has a `maxlength` attribute.<\/p><p> *<\/p><p> * \\@stable<\/p><p> */<\/p><p>var MaxLengthValidator = (function () {<\/p><p>    function MaxLengthValidator() {<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} changes<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    MaxLengthValidator.prototype.ngOnChanges = function (changes) {<\/p><p>        if ('maxlength' in changes) {<\/p><p>            this._createValidator();<\/p><p>            if (this._onChange)<\/p><p>                this._onChange();<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} c<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    MaxLengthValidator.prototype.validate = function (c) {<\/p><p>        return this.maxlength != null ? this._validator(c) : null;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} fn<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    MaxLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    MaxLengthValidator.prototype._createValidator = function () {<\/p><p>        this._validator = Validators.maxLength(parseInt(this.maxlength, 10));<\/p><p>    };<\/p><p>    return MaxLengthValidator;<\/p><p>}());<\/p><p>MaxLengthValidator.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{<\/p><p>                selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',<\/p><p>                providers: [MAX_LENGTH_VALIDATOR],<\/p><p>                host: { '[attr.maxlength]': 'maxlength ? maxlength : null' }<\/p><p>            },] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>MaxLengthValidator.ctorParameters = function () { return []; };<\/p><p>MaxLengthValidator.propDecorators = {<\/p><p>    'maxlength': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],<\/p><p>};<\/p><p>var PATTERN_VALIDATOR = {<\/p><p>    provide: NG_VALIDATORS,<\/p><p>    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return PatternValidator; }),<\/p><p>    multi: true<\/p><p>};<\/p><p>/**<\/p><p> * A Directive that adds the `pattern` validator to any controls marked with the<\/p><p> * `pattern` attribute, via the {\\@link NG_VALIDATORS} binding. Uses attribute value<\/p><p> * as the regex to validate Control value against.  Follows pattern attribute<\/p><p> * semantics; i.e. regex must match entire Control value.<\/p><p> *<\/p><p> * ### Example<\/p><p> *<\/p><p> * ```<\/p><p> * <input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel><\/p><p> * ```<\/p><p> * \\@stable<\/p><p> */<\/p><p>var PatternValidator = (function () {<\/p><p>    function PatternValidator() {<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} changes<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    PatternValidator.prototype.ngOnChanges = function (changes) {<\/p><p>        if ('pattern' in changes) {<\/p><p>            this._createValidator();<\/p><p>            if (this._onChange)<\/p><p>                this._onChange();<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} c<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    PatternValidator.prototype.validate = function (c) { return this._validator(c); };<\/p><p>    /**<\/p><p>     * @param {?} fn<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    PatternValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    PatternValidator.prototype._createValidator = function () { this._validator = Validators.pattern(this.pattern); };<\/p><p>    return PatternValidator;<\/p><p>}());<\/p><p>PatternValidator.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{<\/p><p>                selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',<\/p><p>                providers: [PATTERN_VALIDATOR],<\/p><p>                host: { '[attr.pattern]': 'pattern ? pattern : null' }<\/p><p>            },] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>PatternValidator.ctorParameters = function () { return []; };<\/p><p>PatternValidator.propDecorators = {<\/p><p>    'pattern': [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],<\/p><p>};<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * \\@whatItDoes Creates an {\\@link AbstractControl} from a user-specified configuration.<\/p><p> *<\/p><p> * It is essentially syntactic sugar that shortens the `new FormGroup()`,<\/p><p> * `new FormControl()`, and `new FormArray()` boilerplate that can build up in larger<\/p><p> * forms.<\/p><p> *<\/p><p> * \\@howToUse<\/p><p> *<\/p><p> * To use, inject `FormBuilder` into your component class. You can then call its methods<\/p><p> * directly.<\/p><p> *<\/p><p> * {\\@example forms/ts/formBuilder/form_builder_example.ts region='Component'}<\/p><p> *<\/p><p> *  * **npm package**: `\\@angular/forms`<\/p><p> *<\/p><p> *  * **NgModule**: {\\@link ReactiveFormsModule}<\/p><p> *<\/p><p> * \\@stable<\/p><p> */<\/p><p>var FormBuilder = (function () {<\/p><p>    function FormBuilder() {<\/p><p>    }<\/p><p>    /**<\/p><p>     * Construct a new {\\@link FormGroup} with the given map of configuration.<\/p><p>     * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.<\/p><p>     *<\/p><p>     * See the {\\@link FormGroup} constructor for more details.<\/p><p>     * @param {?} controlsConfig<\/p><p>     * @param {?=} extra<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormBuilder.prototype.group = function (controlsConfig, extra) {<\/p><p>        if (extra === void 0) { extra = null; }<\/p><p>        var /** @type {?} */ controls = this._reduceControls(controlsConfig);<\/p><p>        var /** @type {?} */ validator = extra != null ? extra['validator'] : null;<\/p><p>        var /** @type {?} */ asyncValidator = extra != null ? extra['asyncValidator'] : null;<\/p><p>        return new FormGroup(controls, validator, asyncValidator);<\/p><p>    };<\/p><p>    /**<\/p><p>     * Construct a new {\\@link FormControl} with the given `formState`,`validator`, and<\/p><p>     * `asyncValidator`.<\/p><p>     *<\/p><p>     * `formState` can either be a standalone value for the form control or an object<\/p><p>     * that contains both a value and a disabled status.<\/p><p>     *<\/p><p>     * @param {?} formState<\/p><p>     * @param {?=} validator<\/p><p>     * @param {?=} asyncValidator<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormBuilder.prototype.control = function (formState, validator, asyncValidator) {<\/p><p>        return new FormControl(formState, validator, asyncValidator);<\/p><p>    };<\/p><p>    /**<\/p><p>     * Construct a {\\@link FormArray} from the given `controlsConfig` array of<\/p><p>     * configuration, with the given optional `validator` and `asyncValidator`.<\/p><p>     * @param {?} controlsConfig<\/p><p>     * @param {?=} validator<\/p><p>     * @param {?=} asyncValidator<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormBuilder.prototype.array = function (controlsConfig, validator, asyncValidator) {<\/p><p>        var _this = this;<\/p><p>        var /** @type {?} */ controls = controlsConfig.map(function (c) { return _this._createControl(c); });<\/p><p>        return new FormArray(controls, validator, asyncValidator);<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @param {?} controlsConfig<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormBuilder.prototype._reduceControls = function (controlsConfig) {<\/p><p>        var _this = this;<\/p><p>        var /** @type {?} */ controls = {};<\/p><p>        Object.keys(controlsConfig).forEach(function (controlName) {<\/p><p>            controls[controlName] = _this._createControl(controlsConfig[controlName]);<\/p><p>        });<\/p><p>        return controls;<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @param {?} controlConfig<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    FormBuilder.prototype._createControl = function (controlConfig) {<\/p><p>        if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||<\/p><p>            controlConfig instanceof FormArray) {<\/p><p>            return controlConfig;<\/p><p>        }<\/p><p>        else if (Array.isArray(controlConfig)) {<\/p><p>            var /** @type {?} */ value = controlConfig[0];<\/p><p>            var /** @type {?} */ validator = controlConfig.length > 1 ? controlConfig[1] : null;<\/p><p>            var /** @type {?} */ asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;<\/p><p>            return this.control(value, validator, asyncValidator);<\/p><p>        }<\/p><p>        else {<\/p><p>            return this.control(controlConfig);<\/p><p>        }<\/p><p>    };<\/p><p>    return FormBuilder;<\/p><p>}());<\/p><p>FormBuilder.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Injectable\"] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>FormBuilder.ctorParameters = function () { return []; };<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * @module<\/p><p> * @description<\/p><p> * Entry point for all public APIs of the common package.<\/p><p> */<\/p><p>/**<\/p><p> * \\@stable<\/p><p> */<\/p><p>var VERSION = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Version\"]('4.3.5');<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * \\@whatItDoes Adds `novalidate` attribute to all forms by default.<\/p><p> *<\/p><p> * `novalidate` is used to disable browser's native form validation.<\/p><p> *<\/p><p> * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:<\/p><p> *<\/p><p> * ```<\/p><p> * <form ngNativeValidate><\/form><\/p><p> * ```<\/p><p> *<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var NgNoValidate = (function () {<\/p><p>    function NgNoValidate() {<\/p><p>    }<\/p><p>    return NgNoValidate;<\/p><p>}());<\/p><p>NgNoValidate.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{<\/p><p>                selector: 'form:not([ngNoForm]):not([ngNativeValidate])',<\/p><p>                host: { 'novalidate': '' },<\/p><p>            },] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>NgNoValidate.ctorParameters = function () { return []; };<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var SHARED_FORM_DIRECTIVES = [<\/p><p>    NgNoValidate,<\/p><p>    NgSelectOption,<\/p><p>    NgSelectMultipleOption,<\/p><p>    DefaultValueAccessor,<\/p><p>    NumberValueAccessor,<\/p><p>    RangeValueAccessor,<\/p><p>    CheckboxControlValueAccessor,<\/p><p>    SelectControlValueAccessor,<\/p><p>    SelectMultipleControlValueAccessor,<\/p><p>    RadioControlValueAccessor,<\/p><p>    NgControlStatus,<\/p><p>    NgControlStatusGroup,<\/p><p>    RequiredValidator,<\/p><p>    MinLengthValidator,<\/p><p>    MaxLengthValidator,<\/p><p>    PatternValidator,<\/p><p>    CheckboxRequiredValidator,<\/p><p>    EmailValidator,<\/p><p>];<\/p><p>var TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];<\/p><p>var REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];<\/p><p>/**<\/p><p> * Internal module used for sharing directives between FormsModule and ReactiveFormsModule<\/p><p> */<\/p><p>var InternalFormsSharedModule = (function () {<\/p><p>    function InternalFormsSharedModule() {<\/p><p>    }<\/p><p>    return InternalFormsSharedModule;<\/p><p>}());<\/p><p>InternalFormsSharedModule.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"NgModule\"], args: [{<\/p><p>                declarations: SHARED_FORM_DIRECTIVES,<\/p><p>                exports: SHARED_FORM_DIRECTIVES,<\/p><p>            },] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>InternalFormsSharedModule.ctorParameters = function () { return []; };<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * The ng module for forms.<\/p><p> * \\@stable<\/p><p> */<\/p><p>var FormsModule = (function () {<\/p><p>    function FormsModule() {<\/p><p>    }<\/p><p>    return FormsModule;<\/p><p>}());<\/p><p>FormsModule.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"NgModule\"], args: [{<\/p><p>                declarations: TEMPLATE_DRIVEN_DIRECTIVES,<\/p><p>                providers: [RadioControlRegistry],<\/p><p>                exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]<\/p><p>            },] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>FormsModule.ctorParameters = function () { return []; };<\/p><p>/**<\/p><p> * The ng module for reactive forms.<\/p><p> * \\@stable<\/p><p> */<\/p><p>var ReactiveFormsModule = (function () {<\/p><p>    function ReactiveFormsModule() {<\/p><p>    }<\/p><p>    return ReactiveFormsModule;<\/p><p>}());<\/p><p>ReactiveFormsModule.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"NgModule\"], args: [{<\/p><p>                declarations: [REACTIVE_DRIVEN_DIRECTIVES],<\/p><p>                providers: [FormBuilder, RadioControlRegistry],<\/p><p>                exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]<\/p><p>            },] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>ReactiveFormsModule.ctorParameters = function () { return []; };<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * @module<\/p><p> * @description<\/p><p> * This module is used for handling user input, by defining and building a {@link FormGroup} that<\/p><p> * consists of {@link FormControl} objects, and mapping them onto the DOM. {@link FormControl}<\/p><p> * objects can then be used to read information from the form DOM elements.<\/p><p> *<\/p><p> * Forms providers are not included in default providers; you must import these providers<\/p><p> * explicitly.<\/p><p> */<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * @module<\/p><p> * @description<\/p><p> * Entry point for all public APIs of the forms package.<\/p><p> */<\/p><p>// This file only reexports content of the `src` folder. Keep it that way.<\/p><p>/**<\/p><p> * Generated bundle index. Do not edit.<\/p><p> */<\/p><p><\/p><p>//# sourceMappingURL=forms.es5.js.map<\/p><p><\/p><p><\/p><p>/***/ }),<\/p><p><\/p><p>/***/ \"../../../http/@angular/http.es5.js\":<\/p><p>/***/ (function(module, __webpack_exports__, __webpack_require__) {<\/p><p><\/p><p>\"use strict\";<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return BrowserXhr; });<\/p><p>/* unused harmony export JSONPBackend */<\/p><p>/* unused harmony export JSONPConnection */<\/p><p>/* unused harmony export CookieXSRFStrategy */<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return XHRBackend; });<\/p><p>/* unused harmony export XHRConnection */<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return BaseRequestOptions; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return RequestOptions; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return BaseResponseOptions; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return ResponseOptions; });<\/p><p>/* unused harmony export ReadyState */<\/p><p>/* unused harmony export RequestMethod */<\/p><p>/* unused harmony export ResponseContentType */<\/p><p>/* unused harmony export ResponseType */<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return Headers; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return Http; });<\/p><p>/* unused harmony export Jsonp */<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return HttpModule; });<\/p><p>/* unused harmony export JsonpModule */<\/p><p>/* unused harmony export Connection */<\/p><p>/* unused harmony export ConnectionBackend */<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return XSRFStrategy; });<\/p><p>/* unused harmony export Request */<\/p><p>/* unused harmony export Response */<\/p><p>/* unused harmony export QueryEncoder */<\/p><p>/* unused harmony export URLSearchParams */<\/p><p>/* unused harmony export VERSION */<\/p><p>/* unused harmony export ɵg */<\/p><p>/* unused harmony export ɵa */<\/p><p>/* unused harmony export ɵf */<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"k\", function() { return _createDefaultCookieXSRFStrategy; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"l\", function() { return httpFactory; });<\/p><p>/* unused harmony export ɵd */<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(\"../../../../tslib/tslib.es6.js\");<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_core__ = __webpack_require__(\"../../../core/@angular/core.es5.js\");<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__ = __webpack_require__(\"../../../../rxjs/Observable.js\");<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__);<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_platform_browser__ = __webpack_require__(\"../../../platform-browser/@angular/platform-browser.es5.js\");<\/p><p><\/p><p>/**<\/p><p> * @license Angular v4.3.5<\/p><p> * (c) 2010-2017 Google, Inc. https://angular.io/<\/p><p> * License: MIT<\/p><p> */<\/p><p><\/p><p><\/p><p><\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * A backend for http that uses the `XMLHttpRequest` browser API.<\/p><p> *<\/p><p> * Take care not to evaluate this in non-browser contexts.<\/p><p> *<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var BrowserXhr = (function () {<\/p><p>    function BrowserXhr() {<\/p><p>    }<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserXhr.prototype.build = function () { return ((new XMLHttpRequest())); };<\/p><p>    return BrowserXhr;<\/p><p>}());<\/p><p>BrowserXhr.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Injectable\"] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>BrowserXhr.ctorParameters = function () { return []; };<\/p><p>var RequestMethod = {};<\/p><p>RequestMethod.Get = 0;<\/p><p>RequestMethod.Post = 1;<\/p><p>RequestMethod.Put = 2;<\/p><p>RequestMethod.Delete = 3;<\/p><p>RequestMethod.Options = 4;<\/p><p>RequestMethod.Head = 5;<\/p><p>RequestMethod.Patch = 6;<\/p><p>RequestMethod[RequestMethod.Get] = \"Get\";<\/p><p>RequestMethod[RequestMethod.Post] = \"Post\";<\/p><p>RequestMethod[RequestMethod.Put] = \"Put\";<\/p><p>RequestMethod[RequestMethod.Delete] = \"Delete\";<\/p><p>RequestMethod[RequestMethod.Options] = \"Options\";<\/p><p>RequestMethod[RequestMethod.Head] = \"Head\";<\/p><p>RequestMethod[RequestMethod.Patch] = \"Patch\";<\/p><p>var ReadyState = {};<\/p><p>ReadyState.Unsent = 0;<\/p><p>ReadyState.Open = 1;<\/p><p>ReadyState.HeadersReceived = 2;<\/p><p>ReadyState.Loading = 3;<\/p><p>ReadyState.Done = 4;<\/p><p>ReadyState.Cancelled = 5;<\/p><p>ReadyState[ReadyState.Unsent] = \"Unsent\";<\/p><p>ReadyState[ReadyState.Open] = \"Open\";<\/p><p>ReadyState[ReadyState.HeadersReceived] = \"HeadersReceived\";<\/p><p>ReadyState[ReadyState.Loading] = \"Loading\";<\/p><p>ReadyState[ReadyState.Done] = \"Done\";<\/p><p>ReadyState[ReadyState.Cancelled] = \"Cancelled\";<\/p><p>var ResponseType = {};<\/p><p>ResponseType.Basic = 0;<\/p><p>ResponseType.Cors = 1;<\/p><p>ResponseType.Default = 2;<\/p><p>ResponseType.Error = 3;<\/p><p>ResponseType.Opaque = 4;<\/p><p>ResponseType[ResponseType.Basic] = \"Basic\";<\/p><p>ResponseType[ResponseType.Cors] = \"Cors\";<\/p><p>ResponseType[ResponseType.Default] = \"Default\";<\/p><p>ResponseType[ResponseType.Error] = \"Error\";<\/p><p>ResponseType[ResponseType.Opaque] = \"Opaque\";<\/p><p>var ContentType = {};<\/p><p>ContentType.NONE = 0;<\/p><p>ContentType.JSON = 1;<\/p><p>ContentType.FORM = 2;<\/p><p>ContentType.FORM_DATA = 3;<\/p><p>ContentType.TEXT = 4;<\/p><p>ContentType.BLOB = 5;<\/p><p>ContentType.ARRAY_BUFFER = 6;<\/p><p>ContentType[ContentType.NONE] = \"NONE\";<\/p><p>ContentType[ContentType.JSON] = \"JSON\";<\/p><p>ContentType[ContentType.FORM] = \"FORM\";<\/p><p>ContentType[ContentType.FORM_DATA] = \"FORM_DATA\";<\/p><p>ContentType[ContentType.TEXT] = \"TEXT\";<\/p><p>ContentType[ContentType.BLOB] = \"BLOB\";<\/p><p>ContentType[ContentType.ARRAY_BUFFER] = \"ARRAY_BUFFER\";<\/p><p>var ResponseContentType = {};<\/p><p>ResponseContentType.Text = 0;<\/p><p>ResponseContentType.Json = 1;<\/p><p>ResponseContentType.ArrayBuffer = 2;<\/p><p>ResponseContentType.Blob = 3;<\/p><p>ResponseContentType[ResponseContentType.Text] = \"Text\";<\/p><p>ResponseContentType[ResponseContentType.Json] = \"Json\";<\/p><p>ResponseContentType[ResponseContentType.ArrayBuffer] = \"ArrayBuffer\";<\/p><p>ResponseContentType[ResponseContentType.Blob] = \"Blob\";<\/p><p>/**<\/p><p> * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as<\/p><p> * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).<\/p><p> *<\/p><p> * The only known difference between this `Headers` implementation and the spec is the<\/p><p> * lack of an `entries` method.<\/p><p> *<\/p><p> * ### Example<\/p><p> *<\/p><p> * ```<\/p><p> * import {Headers} from '\\@angular/http';<\/p><p> *<\/p><p> * var firstHeaders = new Headers();<\/p><p> * firstHeaders.append('Content-Type', 'image/jpeg');<\/p><p> * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'<\/p><p> *<\/p><p> * // Create headers from Plain Old JavaScript Object<\/p><p> * var secondHeaders = new Headers({<\/p><p> *   'X-My-Custom-Header': 'Angular'<\/p><p> * });<\/p><p> * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'<\/p><p> *<\/p><p> * var thirdHeaders = new Headers(secondHeaders);<\/p><p> * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'<\/p><p> * ```<\/p><p> *<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var Headers = (function () {<\/p><p>    /**<\/p><p>     * @param {?=} headers<\/p><p>     */<\/p><p>    function Headers(headers) {<\/p><p>        var _this = this;<\/p><p>        /**<\/p><p>         * \\@internal header names are lower case<\/p><p>         */<\/p><p>        this._headers = new Map();<\/p><p>        /**<\/p><p>         * \\@internal map lower case names to actual names<\/p><p>         */<\/p><p>        this._normalizedNames = new Map();<\/p><p>        if (!headers) {<\/p><p>            return;<\/p><p>        }<\/p><p>        if (headers instanceof Headers) {<\/p><p>            headers.forEach(function (values, name) {<\/p><p>                values.forEach(function (value) { return _this.append(name, value); });<\/p><p>            });<\/p><p>            return;<\/p><p>        }<\/p><p>        Object.keys(headers).forEach(function (name) {<\/p><p>            var values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];<\/p><p>            _this.delete(name);<\/p><p>            values.forEach(function (value) { return _this.append(name, value); });<\/p><p>        });<\/p><p>    }<\/p><p>    /**<\/p><p>     * Returns a new Headers instance from the given DOMString of Response Headers<\/p><p>     * @param {?} headersString<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Headers.fromResponseHeaderString = function (headersString) {<\/p><p>        var /** @type {?} */ headers = new Headers();<\/p><p>        headersString.split('\\n').forEach(function (line) {<\/p><p>            var /** @type {?} */ index = line.indexOf(':');<\/p><p>            if (index > 0) {<\/p><p>                var /** @type {?} */ name = line.slice(0, index);<\/p><p>                var /** @type {?} */ value = line.slice(index + 1).trim();<\/p><p>                headers.set(name, value);<\/p><p>            }<\/p><p>        });<\/p><p>        return headers;<\/p><p>    };<\/p><p>    /**<\/p><p>     * Appends a header to existing list of header values for a given header name.<\/p><p>     * @param {?} name<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Headers.prototype.append = function (name, value) {<\/p><p>        var /** @type {?} */ values = this.getAll(name);<\/p><p>        if (values === null) {<\/p><p>            this.set(name, value);<\/p><p>        }<\/p><p>        else {<\/p><p>            values.push(value);<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * Deletes all header values for the given name.<\/p><p>     * @param {?} name<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Headers.prototype.delete = function (name) {<\/p><p>        var /** @type {?} */ lcName = name.toLowerCase();<\/p><p>        this._normalizedNames.delete(lcName);<\/p><p>        this._headers.delete(lcName);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} fn<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Headers.prototype.forEach = function (fn) {<\/p><p>        var _this = this;<\/p><p>        this._headers.forEach(function (values, lcName) { return fn(values, _this._normalizedNames.get(lcName), _this._headers); });<\/p><p>    };<\/p><p>    /**<\/p><p>     * Returns first header that matches given name.<\/p><p>     * @param {?} name<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Headers.prototype.get = function (name) {<\/p><p>        var /** @type {?} */ values = this.getAll(name);<\/p><p>        if (values === null) {<\/p><p>            return null;<\/p><p>        }<\/p><p>        return values.length > 0 ? values[0] : null;<\/p><p>    };<\/p><p>    /**<\/p><p>     * Checks for existence of header by given name.<\/p><p>     * @param {?} name<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Headers.prototype.has = function (name) { return this._headers.has(name.toLowerCase()); };<\/p><p>    /**<\/p><p>     * Returns the names of the headers<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Headers.prototype.keys = function () { return Array.from(this._normalizedNames.values()); };<\/p><p>    /**<\/p><p>     * Sets or overrides header value for given name.<\/p><p>     * @param {?} name<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Headers.prototype.set = function (name, value) {<\/p><p>        if (Array.isArray(value)) {<\/p><p>            if (value.length) {<\/p><p>                this._headers.set(name.toLowerCase(), [value.join(',')]);<\/p><p>            }<\/p><p>        }<\/p><p>        else {<\/p><p>            this._headers.set(name.toLowerCase(), [value]);<\/p><p>        }<\/p><p>        this.mayBeSetNormalizedName(name);<\/p><p>    };<\/p><p>    /**<\/p><p>     * Returns values of all headers.<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Headers.prototype.values = function () { return Array.from(this._headers.values()); };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Headers.prototype.toJSON = function () {<\/p><p>        var _this = this;<\/p><p>        var /** @type {?} */ serialized = {};<\/p><p>        this._headers.forEach(function (values, name) {<\/p><p>            var /** @type {?} */ split = [];<\/p><p>            values.forEach(function (v) { return split.push.apply(split, v.split(',')); });<\/p><p>            serialized[((_this._normalizedNames.get(name)))] = split;<\/p><p>        });<\/p><p>        return serialized;<\/p><p>    };<\/p><p>    /**<\/p><p>     * Returns list of header values for a given name.<\/p><p>     * @param {?} name<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Headers.prototype.getAll = function (name) {<\/p><p>        return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;<\/p><p>    };<\/p><p>    /**<\/p><p>     * This method is not implemented.<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Headers.prototype.entries = function () { throw new Error('\"entries\" method is not implemented on Headers class'); };<\/p><p>    /**<\/p><p>     * @param {?} name<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Headers.prototype.mayBeSetNormalizedName = function (name) {<\/p><p>        var /** @type {?} */ lcName = name.toLowerCase();<\/p><p>        if (!this._normalizedNames.has(lcName)) {<\/p><p>            this._normalizedNames.set(lcName, name);<\/p><p>        }<\/p><p>    };<\/p><p>    return Headers;<\/p><p>}());<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * Creates a response options object to be optionally provided when instantiating a<\/p><p> * {\\@link Response}.<\/p><p> *<\/p><p> * This class is based on the `ResponseInit` description in the [Fetch<\/p><p> * Spec](https://fetch.spec.whatwg.org/#responseinit).<\/p><p> *<\/p><p> * All values are null by default. Typical defaults can be found in the<\/p><p> * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.<\/p><p> *<\/p><p> * This class may be used in tests to build {\\@link Response Responses} for<\/p><p> * mock responses (see {\\@link MockBackend}).<\/p><p> *<\/p><p> * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))<\/p><p> *<\/p><p> * ```typescript<\/p><p> * import {ResponseOptions, Response} from '\\@angular/http';<\/p><p> *<\/p><p> * var options = new ResponseOptions({<\/p><p> *   body: '{\"name\":\"Jeff\"}'<\/p><p> * });<\/p><p> * var res = new Response(options);<\/p><p> *<\/p><p> * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}<\/p><p> * ```<\/p><p> *<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var ResponseOptions = (function () {<\/p><p>    /**<\/p><p>     * @param {?=} opts<\/p><p>     */<\/p><p>    function ResponseOptions(opts) {<\/p><p>        if (opts === void 0) { opts = {}; }<\/p><p>        var body = opts.body, status = opts.status, headers = opts.headers, statusText = opts.statusText, type = opts.type, url = opts.url;<\/p><p>        this.body = body != null ? body : null;<\/p><p>        this.status = status != null ? status : null;<\/p><p>        this.headers = headers != null ? headers : null;<\/p><p>        this.statusText = statusText != null ? statusText : null;<\/p><p>        this.type = type != null ? type : null;<\/p><p>        this.url = url != null ? url : null;<\/p><p>    }<\/p><p>    /**<\/p><p>     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to<\/p><p>     * override<\/p><p>     * existing values. This method will not change the values of the instance on which it is being<\/p><p>     * called.<\/p><p>     *<\/p><p>     * This may be useful when sharing a base `ResponseOptions` object inside tests,<\/p><p>     * where certain properties may change from test to test.<\/p><p>     *<\/p><p>     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))<\/p><p>     *<\/p><p>     * ```typescript<\/p><p>     * import {ResponseOptions, Response} from '\\@angular/http';<\/p><p>     *<\/p><p>     * var options = new ResponseOptions({<\/p><p>     *   body: {name: 'Jeff'}<\/p><p>     * });<\/p><p>     * var res = new Response(options.merge({<\/p><p>     *   url: 'https://google.com'<\/p><p>     * }));<\/p><p>     * console.log('options.url:', options.url); // null<\/p><p>     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}<\/p><p>     * console.log('res.url:', res.url); // https://google.com<\/p><p>     * ```<\/p><p>     * @param {?=} options<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ResponseOptions.prototype.merge = function (options) {<\/p><p>        return new ResponseOptions({<\/p><p>            body: options && options.body != null ? options.body : this.body,<\/p><p>            status: options && options.status != null ? options.status : this.status,<\/p><p>            headers: options && options.headers != null ? options.headers : this.headers,<\/p><p>            statusText: options && options.statusText != null ? options.statusText : this.statusText,<\/p><p>            type: options && options.type != null ? options.type : this.type,<\/p><p>            url: options && options.url != null ? options.url : this.url,<\/p><p>        });<\/p><p>    };<\/p><p>    return ResponseOptions;<\/p><p>}());<\/p><p>/**<\/p><p> * Subclass of {\\@link ResponseOptions}, with default values.<\/p><p> *<\/p><p> * Default values:<\/p><p> *  * status: 200<\/p><p> *  * headers: empty {\\@link Headers} object<\/p><p> *<\/p><p> * This class could be extended and bound to the {\\@link ResponseOptions} class<\/p><p> * when configuring an {\\@link Injector}, in order to override the default options<\/p><p> * used by {\\@link Http} to create {\\@link Response Responses}.<\/p><p> *<\/p><p> * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))<\/p><p> *<\/p><p> * ```typescript<\/p><p> * import {provide} from '\\@angular/core';<\/p><p> * import {bootstrap} from '\\@angular/platform-browser/browser';<\/p><p> * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from<\/p><p> * '\\@angular/http';<\/p><p> * import {App} from './myapp';<\/p><p> *<\/p><p> * class MyOptions extends BaseResponseOptions {<\/p><p> *   headers:Headers = new Headers({network: 'github'});<\/p><p> * }<\/p><p> *<\/p><p> * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);<\/p><p> * ```<\/p><p> *<\/p><p> * The options could also be extended when manually creating a {\\@link Response}<\/p><p> * object.<\/p><p> *<\/p><p> * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))<\/p><p> *<\/p><p> * ```<\/p><p> * import {BaseResponseOptions, Response} from '\\@angular/http';<\/p><p> *<\/p><p> * var options = new BaseResponseOptions();<\/p><p> * var res = new Response(options.merge({<\/p><p> *   body: 'Angular',<\/p><p> *   headers: new Headers({framework: 'angular'})<\/p><p> * }));<\/p><p> * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular<\/p><p> * console.log('res.text():', res.text()); // Angular;<\/p><p> * ```<\/p><p> *<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var BaseResponseOptions = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](BaseResponseOptions, _super);<\/p><p>    function BaseResponseOptions() {<\/p><p>        return _super.call(this, { status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers() }) || this;<\/p><p>    }<\/p><p>    return BaseResponseOptions;<\/p><p>}(ResponseOptions));<\/p><p>BaseResponseOptions.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Injectable\"] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>BaseResponseOptions.ctorParameters = function () { return []; };<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * Abstract class from which real backends are derived.<\/p><p> *<\/p><p> * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given<\/p><p> * {\\@link Request}.<\/p><p> *<\/p><p> * \\@experimental<\/p><p> * @abstract<\/p><p> */<\/p><p>var ConnectionBackend = (function () {<\/p><p>    function ConnectionBackend() {<\/p><p>    }<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} request<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ConnectionBackend.prototype.createConnection = function (request) { };<\/p><p>    return ConnectionBackend;<\/p><p>}());<\/p><p>/**<\/p><p> * Abstract class from which real connections are derived.<\/p><p> *<\/p><p> * \\@experimental<\/p><p> * @abstract<\/p><p> */<\/p><p>var Connection = (function () {<\/p><p>    function Connection() {<\/p><p>    }<\/p><p>    return Connection;<\/p><p>}());<\/p><p>/**<\/p><p> * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.<\/p><p> *<\/p><p> * \\@experimental<\/p><p> * @abstract<\/p><p> */<\/p><p>var XSRFStrategy = (function () {<\/p><p>    function XSRFStrategy() {<\/p><p>    }<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} req<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    XSRFStrategy.prototype.configureRequest = function (req) { };<\/p><p>    return XSRFStrategy;<\/p><p>}());<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * @param {?} method<\/p><p> * @return {?}<\/p><p> */<\/p><p>function normalizeMethodName(method) {<\/p><p>    if (typeof method !== 'string')<\/p><p>        return method;<\/p><p>    switch (method.toUpperCase()) {<\/p><p>        case 'GET':<\/p><p>            return RequestMethod.Get;<\/p><p>        case 'POST':<\/p><p>            return RequestMethod.Post;<\/p><p>        case 'PUT':<\/p><p>            return RequestMethod.Put;<\/p><p>        case 'DELETE':<\/p><p>            return RequestMethod.Delete;<\/p><p>        case 'OPTIONS':<\/p><p>            return RequestMethod.Options;<\/p><p>        case 'HEAD':<\/p><p>            return RequestMethod.Head;<\/p><p>        case 'PATCH':<\/p><p>            return RequestMethod.Patch;<\/p><p>    }<\/p><p>    throw new Error(\"Invalid request method. The method \\\"\" + method + \"\\\" is not supported.\");<\/p><p>}<\/p><p>var isSuccess = function (status) { return (status >= 200 && status < 300); };<\/p><p>/**<\/p><p> * @param {?} xhr<\/p><p> * @return {?}<\/p><p> */<\/p><p>function getResponseURL(xhr) {<\/p><p>    if ('responseURL' in xhr) {<\/p><p>        return xhr.responseURL;<\/p><p>    }<\/p><p>    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {<\/p><p>        return xhr.getResponseHeader('X-Request-URL');<\/p><p>    }<\/p><p>    return null;<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} input<\/p><p> * @return {?}<\/p><p> */<\/p><p>/**<\/p><p> * @param {?} input<\/p><p> * @return {?}<\/p><p> */<\/p><p>function stringToArrayBuffer(input) {<\/p><p>    var /** @type {?} */ view = new Uint16Array(input.length);<\/p><p>    for (var /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {<\/p><p>        view[i] = input.charCodeAt(i);<\/p><p>    }<\/p><p>    return view.buffer;<\/p><p>}<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> * @param {?=} rawParams<\/p><p> * @return {?}<\/p><p> */<\/p><p>function paramParser(rawParams) {<\/p><p>    if (rawParams === void 0) { rawParams = ''; }<\/p><p>    var /** @type {?} */ map = new Map();<\/p><p>    if (rawParams.length > 0) {<\/p><p>        var /** @type {?} */ params = rawParams.split('&');<\/p><p>        params.forEach(function (param) {<\/p><p>            var /** @type {?} */ eqIdx = param.indexOf('=');<\/p><p>            var _a = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)], key = _a[0], val = _a[1];<\/p><p>            var /** @type {?} */ list = map.get(key) || [];<\/p><p>            list.push(val);<\/p><p>            map.set(key, list);<\/p><p>        });<\/p><p>    }<\/p><p>    return map;<\/p><p>}<\/p><p>/**<\/p><p> * \\@experimental<\/p><p> *<\/p><p> */<\/p><p>var QueryEncoder = (function () {<\/p><p>    function QueryEncoder() {<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} k<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    QueryEncoder.prototype.encodeKey = function (k) { return standardEncoding(k); };<\/p><p>    /**<\/p><p>     * @param {?} v<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    QueryEncoder.prototype.encodeValue = function (v) { return standardEncoding(v); };<\/p><p>    return QueryEncoder;<\/p><p>}());<\/p><p>/**<\/p><p> * @param {?} v<\/p><p> * @return {?}<\/p><p> */<\/p><p>function standardEncoding(v) {<\/p><p>    return encodeURIComponent(v)<\/p><p>        .replace(/%40/gi, '@')<\/p><p>        .replace(/%3A/gi, ':')<\/p><p>        .replace(/%24/gi, '$')<\/p><p>        .replace(/%2C/gi, ',')<\/p><p>        .replace(/%3B/gi, ';')<\/p><p>        .replace(/%2B/gi, '+')<\/p><p>        .replace(/%3D/gi, '=')<\/p><p>        .replace(/%3F/gi, '?')<\/p><p>        .replace(/%2F/gi, '/');<\/p><p>}<\/p><p>/**<\/p><p> * Map-like representation of url search parameters, based on<\/p><p> * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,<\/p><p> * with several extensions for merging URLSearchParams objects:<\/p><p> *   - setAll()<\/p><p> *   - appendAll()<\/p><p> *   - replaceAll()<\/p><p> *<\/p><p> * This class accepts an optional second parameter of ${\\@link QueryEncoder},<\/p><p> * which is used to serialize parameters before making a request. By default,<\/p><p> * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,<\/p><p> * and then un-encodes certain characters that are allowed to be part of the query<\/p><p> * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.<\/p><p> *<\/p><p> * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`<\/p><p> *<\/p><p> * If the set of allowed query characters is not acceptable for a particular backend,<\/p><p> * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.<\/p><p> *<\/p><p> * ```<\/p><p> * import {URLSearchParams, QueryEncoder} from '\\@angular/http';<\/p><p> * class MyQueryEncoder extends QueryEncoder {<\/p><p> *   encodeKey(k: string): string {<\/p><p> *     return myEncodingFunction(k);<\/p><p> *   }<\/p><p> *<\/p><p> *   encodeValue(v: string): string {<\/p><p> *     return myEncodingFunction(v);<\/p><p> *   }<\/p><p> * }<\/p><p> *<\/p><p> * let params = new URLSearchParams('', new MyQueryEncoder());<\/p><p> * ```<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var URLSearchParams = (function () {<\/p><p>    /**<\/p><p>     * @param {?=} rawParams<\/p><p>     * @param {?=} queryEncoder<\/p><p>     */<\/p><p>    function URLSearchParams(rawParams, queryEncoder) {<\/p><p>        if (rawParams === void 0) { rawParams = ''; }<\/p><p>        if (queryEncoder === void 0) { queryEncoder = new QueryEncoder(); }<\/p><p>        this.rawParams = rawParams;<\/p><p>        this.queryEncoder = queryEncoder;<\/p><p>        this.paramsMap = paramParser(rawParams);<\/p><p>    }<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    URLSearchParams.prototype.clone = function () {<\/p><p>        var /** @type {?} */ clone = new URLSearchParams('', this.queryEncoder);<\/p><p>        clone.appendAll(this);<\/p><p>        return clone;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} param<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    URLSearchParams.prototype.has = function (param) { return this.paramsMap.has(param); };<\/p><p>    /**<\/p><p>     * @param {?} param<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    URLSearchParams.prototype.get = function (param) {<\/p><p>        var /** @type {?} */ storedParam = this.paramsMap.get(param);<\/p><p>        return Array.isArray(storedParam) ? storedParam[0] : null;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} param<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    URLSearchParams.prototype.getAll = function (param) { return this.paramsMap.get(param) || []; };<\/p><p>    /**<\/p><p>     * @param {?} param<\/p><p>     * @param {?} val<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    URLSearchParams.prototype.set = function (param, val) {<\/p><p>        if (val === void 0 || val === null) {<\/p><p>            this.delete(param);<\/p><p>            return;<\/p><p>        }<\/p><p>        var /** @type {?} */ list = this.paramsMap.get(param) || [];<\/p><p>        list.length = 0;<\/p><p>        list.push(val);<\/p><p>        this.paramsMap.set(param, list);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} searchParams<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    URLSearchParams.prototype.setAll = function (searchParams) {<\/p><p>        var _this = this;<\/p><p>        searchParams.paramsMap.forEach(function (value, param) {<\/p><p>            var /** @type {?} */ list = _this.paramsMap.get(param) || [];<\/p><p>            list.length = 0;<\/p><p>            list.push(value[0]);<\/p><p>            _this.paramsMap.set(param, list);<\/p><p>        });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} param<\/p><p>     * @param {?} val<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    URLSearchParams.prototype.append = function (param, val) {<\/p><p>        if (val === void 0 || val === null)<\/p><p>            return;<\/p><p>        var /** @type {?} */ list = this.paramsMap.get(param) || [];<\/p><p>        list.push(val);<\/p><p>        this.paramsMap.set(param, list);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} searchParams<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    URLSearchParams.prototype.appendAll = function (searchParams) {<\/p><p>        var _this = this;<\/p><p>        searchParams.paramsMap.forEach(function (value, param) {<\/p><p>            var /** @type {?} */ list = _this.paramsMap.get(param) || [];<\/p><p>            for (var /** @type {?} */ i = 0; i < value.length; ++i) {<\/p><p>                list.push(value[i]);<\/p><p>            }<\/p><p>            _this.paramsMap.set(param, list);<\/p><p>        });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} searchParams<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    URLSearchParams.prototype.replaceAll = function (searchParams) {<\/p><p>        var _this = this;<\/p><p>        searchParams.paramsMap.forEach(function (value, param) {<\/p><p>            var /** @type {?} */ list = _this.paramsMap.get(param) || [];<\/p><p>            list.length = 0;<\/p><p>            for (var /** @type {?} */ i = 0; i < value.length; ++i) {<\/p><p>                list.push(value[i]);<\/p><p>            }<\/p><p>            _this.paramsMap.set(param, list);<\/p><p>        });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    URLSearchParams.prototype.toString = function () {<\/p><p>        var _this = this;<\/p><p>        var /** @type {?} */ paramsList = [];<\/p><p>        this.paramsMap.forEach(function (values, k) {<\/p><p>            values.forEach(function (v) { return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v)); });<\/p><p>        });<\/p><p>        return paramsList.join('&');<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} param<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    URLSearchParams.prototype.delete = function (param) { this.paramsMap.delete(param); };<\/p><p>    return URLSearchParams;<\/p><p>}());<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * HTTP request body used by both {\\@link Request} and {\\@link Response}<\/p><p> * https://fetch.spec.whatwg.org/#body<\/p><p> * @abstract<\/p><p> */<\/p><p>var Body = (function () {<\/p><p>    function Body() {<\/p><p>    }<\/p><p>    /**<\/p><p>     * Attempts to return body as parsed `JSON` object, or raises an exception.<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Body.prototype.json = function () {<\/p><p>        if (typeof this._body === 'string') {<\/p><p>            return JSON.parse(/** @type {?} */ (this._body));<\/p><p>        }<\/p><p>        if (this._body instanceof ArrayBuffer) {<\/p><p>            return JSON.parse(this.text());<\/p><p>        }<\/p><p>        return this._body;<\/p><p>    };<\/p><p>    /**<\/p><p>     * Returns the body as a string, presuming `toString()` can be called on the response body.<\/p><p>     *<\/p><p>     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the<\/p><p>     * bytes in the buffer will be interpreted. Valid values are:<\/p><p>     *<\/p><p>     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters<\/p><p>     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.<\/p><p>     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken<\/p><p>     *   into consideration. This is the default behavior to avoid breaking apps, but should be<\/p><p>     *   considered deprecated.<\/p><p>     *<\/p><p>     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).<\/p><p>     * @param {?=} encodingHint<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Body.prototype.text = function (encodingHint) {<\/p><p>        if (encodingHint === void 0) { encodingHint = 'legacy'; }<\/p><p>        if (this._body instanceof URLSearchParams) {<\/p><p>            return this._body.toString();<\/p><p>        }<\/p><p>        if (this._body instanceof ArrayBuffer) {<\/p><p>            switch (encodingHint) {<\/p><p>                case 'legacy':<\/p><p>                    return String.fromCharCode.apply(null, new Uint16Array(/** @type {?} */ (this._body)));<\/p><p>                case 'iso-8859':<\/p><p>                    return String.fromCharCode.apply(null, new Uint8Array(/** @type {?} */ (this._body)));<\/p><p>                default:<\/p><p>                    throw new Error(\"Invalid value for encodingHint: \" + encodingHint);<\/p><p>            }<\/p><p>        }<\/p><p>        if (this._body == null) {<\/p><p>            return '';<\/p><p>        }<\/p><p>        if (typeof this._body === 'object') {<\/p><p>            return JSON.stringify(this._body, null, 2);<\/p><p>        }<\/p><p>        return this._body.toString();<\/p><p>    };<\/p><p>    /**<\/p><p>     * Return the body as an ArrayBuffer<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Body.prototype.arrayBuffer = function () {<\/p><p>        if (this._body instanceof ArrayBuffer) {<\/p><p>            return (this._body);<\/p><p>        }<\/p><p>        return stringToArrayBuffer(this.text());<\/p><p>    };<\/p><p>    /**<\/p><p>     * Returns the request's body as a Blob, assuming that body exists.<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Body.prototype.blob = function () {<\/p><p>        if (this._body instanceof Blob) {<\/p><p>            return (this._body);<\/p><p>        }<\/p><p>        if (this._body instanceof ArrayBuffer) {<\/p><p>            return new Blob([this._body]);<\/p><p>        }<\/p><p>        throw new Error('The request body isn\\'t either a blob or an array buffer');<\/p><p>    };<\/p><p>    return Body;<\/p><p>}());<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * Creates `Response` instances from provided values.<\/p><p> *<\/p><p> * Though this object isn't<\/p><p> * usually instantiated by end-users, it is the primary object interacted with when it comes time to<\/p><p> * add data to a view.<\/p><p> *<\/p><p> * ### Example<\/p><p> *<\/p><p> * ```<\/p><p> * http.request('my-friends.txt').subscribe(response => this.friends = response.text());<\/p><p> * ```<\/p><p> *<\/p><p> * The Response's interface is inspired by the Response constructor defined in the [Fetch<\/p><p> * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body<\/p><p> * can be accessed many times. There are other differences in the implementation, but this is the<\/p><p> * most significant.<\/p><p> *<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var Response = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](Response, _super);<\/p><p>    /**<\/p><p>     * @param {?} responseOptions<\/p><p>     */<\/p><p>    function Response(responseOptions) {<\/p><p>        var _this = _super.call(this) || this;<\/p><p>        _this._body = responseOptions.body;<\/p><p>        _this.status = responseOptions.status;<\/p><p>        _this.ok = (_this.status >= 200 && _this.status <= 299);<\/p><p>        _this.statusText = responseOptions.statusText;<\/p><p>        _this.headers = responseOptions.headers;<\/p><p>        _this.type = responseOptions.type;<\/p><p>        _this.url = responseOptions.url;<\/p><p>        return _this;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Response.prototype.toString = function () {<\/p><p>        return \"Response with status: \" + this.status + \" \" + this.statusText + \" for URL: \" + this.url;<\/p><p>    };<\/p><p>    return Response;<\/p><p>}(Body));<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var _nextRequestId = 0;<\/p><p>var JSONP_HOME = '__ng_jsonp__';<\/p><p>var _jsonpConnections = null;<\/p><p>/**<\/p><p> * @return {?}<\/p><p> */<\/p><p>function _getJsonpConnections() {<\/p><p>    var /** @type {?} */ w = typeof window == 'object' ? window : {};<\/p><p>    if (_jsonpConnections === null) {<\/p><p>        _jsonpConnections = w[JSONP_HOME] = {};<\/p><p>    }<\/p><p>    return _jsonpConnections;<\/p><p>}<\/p><p>var BrowserJsonp = (function () {<\/p><p>    function BrowserJsonp() {<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} url<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserJsonp.prototype.build = function (url) {<\/p><p>        var /** @type {?} */ node = document.createElement('script');<\/p><p>        node.src = url;<\/p><p>        return node;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserJsonp.prototype.nextRequestID = function () { return \"__req\" + _nextRequestId++; };<\/p><p>    /**<\/p><p>     * @param {?} id<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserJsonp.prototype.requestCallback = function (id) { return JSONP_HOME + \".\" + id + \".finished\"; };<\/p><p>    /**<\/p><p>     * @param {?} id<\/p><p>     * @param {?} connection<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserJsonp.prototype.exposeConnection = function (id, connection) {<\/p><p>        var /** @type {?} */ connections = _getJsonpConnections();<\/p><p>        connections[id] = connection;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} id<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserJsonp.prototype.removeConnection = function (id) {<\/p><p>        var /** @type {?} */ connections = _getJsonpConnections();<\/p><p>        connections[id] = null;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserJsonp.prototype.send = function (node) { document.body.appendChild(/** @type {?} */ ((node))); };<\/p><p>    /**<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserJsonp.prototype.cleanup = function (node) {<\/p><p>        if (node.parentNode) {<\/p><p>            node.parentNode.removeChild(/** @type {?} */ ((node)));<\/p><p>        }<\/p><p>    };<\/p><p>    return BrowserJsonp;<\/p><p>}());<\/p><p>BrowserJsonp.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Injectable\"] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>BrowserJsonp.ctorParameters = function () { return []; };<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';<\/p><p>var JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';<\/p><p>/**<\/p><p> * Abstract base class for an in-flight JSONP request.<\/p><p> *<\/p><p> * \\@experimental<\/p><p> * @abstract<\/p><p> */<\/p><p>var JSONPConnection = (function () {<\/p><p>    function JSONPConnection() {<\/p><p>    }<\/p><p>    /**<\/p><p>     * Callback called when the JSONP request completes, to notify the application<\/p><p>     * of the new data.<\/p><p>     * @abstract<\/p><p>     * @param {?=} data<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    JSONPConnection.prototype.finished = function (data) { };<\/p><p>    return JSONPConnection;<\/p><p>}());<\/p><p>var JSONPConnection_ = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](JSONPConnection_, _super);<\/p><p>    /**<\/p><p>     * @param {?} req<\/p><p>     * @param {?} _dom<\/p><p>     * @param {?=} baseResponseOptions<\/p><p>     */<\/p><p>    function JSONPConnection_(req, _dom, baseResponseOptions) {<\/p><p>        var _this = _super.call(this) || this;<\/p><p>        _this._dom = _dom;<\/p><p>        _this.baseResponseOptions = baseResponseOptions;<\/p><p>        _this._finished = false;<\/p><p>        if (req.method !== RequestMethod.Get) {<\/p><p>            throw new TypeError(JSONP_ERR_WRONG_METHOD);<\/p><p>        }<\/p><p>        _this.request = req;<\/p><p>        _this.response = new __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__[\"Observable\"](function (responseObserver) {<\/p><p>            _this.readyState = ReadyState.Loading;<\/p><p>            var id = _this._id = _dom.nextRequestID();<\/p><p>            _dom.exposeConnection(id, _this);<\/p><p>            // Workaround Dart<\/p><p>            // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);<\/p><p>            var callback = _dom.requestCallback(_this._id);<\/p><p>            var url = req.url;<\/p><p>            if (url.indexOf('=JSONP_CALLBACK&') > -1) {<\/p><p>                url = url.replace('=JSONP_CALLBACK&', \"=\" + callback + \"&\");<\/p><p>            }<\/p><p>            else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {<\/p><p>                url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + (\"=\" + callback);<\/p><p>            }<\/p><p>            var script = _this._script = _dom.build(url);<\/p><p>            var onLoad = function (event) {<\/p><p>                if (_this.readyState === ReadyState.Cancelled)<\/p><p>                    return;<\/p><p>                _this.readyState = ReadyState.Done;<\/p><p>                _dom.cleanup(script);<\/p><p>                if (!_this._finished) {<\/p><p>                    var responseOptions_1 = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url: url });<\/p><p>                    if (baseResponseOptions) {<\/p><p>                        responseOptions_1 = baseResponseOptions.merge(responseOptions_1);<\/p><p>                    }<\/p><p>                    responseObserver.error(new Response(responseOptions_1));<\/p><p>                    return;<\/p><p>                }<\/p><p>                var responseOptions = new ResponseOptions({ body: _this._responseData, url: url });<\/p><p>                if (_this.baseResponseOptions) {<\/p><p>                    responseOptions = _this.baseResponseOptions.merge(responseOptions);<\/p><p>                }<\/p><p>                responseObserver.next(new Response(responseOptions));<\/p><p>                responseObserver.complete();<\/p><p>            };<\/p><p>            var onError = function (error) {<\/p><p>                if (_this.readyState === ReadyState.Cancelled)<\/p><p>                    return;<\/p><p>                _this.readyState = ReadyState.Done;<\/p><p>                _dom.cleanup(script);<\/p><p>                var responseOptions = new ResponseOptions({ body: error.message, type: ResponseType.Error });<\/p><p>                if (baseResponseOptions) {<\/p><p>                    responseOptions = baseResponseOptions.merge(responseOptions);<\/p><p>                }<\/p><p>                responseObserver.error(new Response(responseOptions));<\/p><p>            };<\/p><p>            script.addEventListener('load', onLoad);<\/p><p>            script.addEventListener('error', onError);<\/p><p>            _dom.send(script);<\/p><p>            return function () {<\/p><p>                _this.readyState = ReadyState.Cancelled;<\/p><p>                script.removeEventListener('load', onLoad);<\/p><p>                script.removeEventListener('error', onError);<\/p><p>                _this._dom.cleanup(script);<\/p><p>            };<\/p><p>        });<\/p><p>        return _this;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?=} data<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    JSONPConnection_.prototype.finished = function (data) {<\/p><p>        // Don't leak connections<\/p><p>        this._finished = true;<\/p><p>        this._dom.removeConnection(this._id);<\/p><p>        if (this.readyState === ReadyState.Cancelled)<\/p><p>            return;<\/p><p>        this._responseData = data;<\/p><p>    };<\/p><p>    return JSONPConnection_;<\/p><p>}(JSONPConnection));<\/p><p>/**<\/p><p> * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.<\/p><p> *<\/p><p> * \\@experimental<\/p><p> * @abstract<\/p><p> */<\/p><p>var JSONPBackend = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](JSONPBackend, _super);<\/p><p>    function JSONPBackend() {<\/p><p>        return _super !== null && _super.apply(this, arguments) || this;<\/p><p>    }<\/p><p>    return JSONPBackend;<\/p><p>}(ConnectionBackend));<\/p><p>var JSONPBackend_ = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](JSONPBackend_, _super);<\/p><p>    /**<\/p><p>     * @param {?} _browserJSONP<\/p><p>     * @param {?} _baseResponseOptions<\/p><p>     */<\/p><p>    function JSONPBackend_(_browserJSONP, _baseResponseOptions) {<\/p><p>        var _this = _super.call(this) || this;<\/p><p>        _this._browserJSONP = _browserJSONP;<\/p><p>        _this._baseResponseOptions = _baseResponseOptions;<\/p><p>        return _this;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} request<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    JSONPBackend_.prototype.createConnection = function (request) {<\/p><p>        return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);<\/p><p>    };<\/p><p>    return JSONPBackend_;<\/p><p>}(JSONPBackend));<\/p><p>JSONPBackend_.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Injectable\"] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>JSONPBackend_.ctorParameters = function () { return [<\/p><p>    { type: BrowserJsonp, },<\/p><p>    { type: ResponseOptions, },<\/p><p>]; };<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var XSSI_PREFIX = /^\\)\\]\\}',?\\n/;<\/p><p>/**<\/p><p> * Creates connections using `XMLHttpRequest`. Given a fully-qualified<\/p><p> * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the<\/p><p> * request.<\/p><p> *<\/p><p> * This class would typically not be created or interacted with directly inside applications, though<\/p><p> * the {\\@link MockConnection} may be interacted with in tests.<\/p><p> *<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var XHRConnection = (function () {<\/p><p>    /**<\/p><p>     * @param {?} req<\/p><p>     * @param {?} browserXHR<\/p><p>     * @param {?=} baseResponseOptions<\/p><p>     */<\/p><p>    function XHRConnection(req, browserXHR, baseResponseOptions) {<\/p><p>        var _this = this;<\/p><p>        this.request = req;<\/p><p>        this.response = new __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__[\"Observable\"](function (responseObserver) {<\/p><p>            var _xhr = browserXHR.build();<\/p><p>            _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);<\/p><p>            if (req.withCredentials != null) {<\/p><p>                _xhr.withCredentials = req.withCredentials;<\/p><p>            }<\/p><p>            // load event handler<\/p><p>            var onLoad = function () {<\/p><p>                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)<\/p><p>                var status = _xhr.status === 1223 ? 204 : _xhr.status;<\/p><p>                var body = null;<\/p><p>                // HTTP 204 means no content<\/p><p>                if (status !== 204) {<\/p><p>                    // responseText is the old-school way of retrieving response (supported by IE8 & 9)<\/p><p>                    // response/responseType properties were introduced in ResourceLoader Level2 spec<\/p><p>                    // (supported by IE10)<\/p><p>                    body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;<\/p><p>                    // Implicitly strip a potential XSSI prefix.<\/p><p>                    if (typeof body === 'string') {<\/p><p>                        body = body.replace(XSSI_PREFIX, '');<\/p><p>                    }<\/p><p>                }<\/p><p>                // fix status code when it is 0 (0 status is undocumented).<\/p><p>                // Occurs when accessing file resources or on Android 4.1 stock browser<\/p><p>                // while retrieving files from application cache.<\/p><p>                if (status === 0) {<\/p><p>                    status = body ? 200 : 0;<\/p><p>                }<\/p><p>                var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());<\/p><p>                // IE 9 does not provide the way to get URL of response<\/p><p>                var url = getResponseURL(_xhr) || req.url;<\/p><p>                var statusText = _xhr.statusText || 'OK';<\/p><p>                var responseOptions = new ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url });<\/p><p>                if (baseResponseOptions != null) {<\/p><p>                    responseOptions = baseResponseOptions.merge(responseOptions);<\/p><p>                }<\/p><p>                var response = new Response(responseOptions);<\/p><p>                response.ok = isSuccess(status);<\/p><p>                if (response.ok) {<\/p><p>                    responseObserver.next(response);<\/p><p>                    // TODO(gdi2290): defer complete if array buffer until done<\/p><p>                    responseObserver.complete();<\/p><p>                    return;<\/p><p>                }<\/p><p>                responseObserver.error(response);<\/p><p>            };<\/p><p>            // error event handler<\/p><p>            var onError = function (err) {<\/p><p>                var responseOptions = new ResponseOptions({<\/p><p>                    body: err,<\/p><p>                    type: ResponseType.Error,<\/p><p>                    status: _xhr.status,<\/p><p>                    statusText: _xhr.statusText,<\/p><p>                });<\/p><p>                if (baseResponseOptions != null) {<\/p><p>                    responseOptions = baseResponseOptions.merge(responseOptions);<\/p><p>                }<\/p><p>                responseObserver.error(new Response(responseOptions));<\/p><p>            };<\/p><p>            _this.setDetectedContentType(req, _xhr);<\/p><p>            if (req.headers == null) {<\/p><p>                req.headers = new Headers();<\/p><p>            }<\/p><p>            if (!req.headers.has('Accept')) {<\/p><p>                req.headers.append('Accept', 'application/json, text/plain, */*');<\/p><p>            }<\/p><p>            req.headers.forEach(function (values, name) { return _xhr.setRequestHeader(name, values.join(',')); });<\/p><p>            // Select the correct buffer type to store the response<\/p><p>            if (req.responseType != null && _xhr.responseType != null) {<\/p><p>                switch (req.responseType) {<\/p><p>                    case ResponseContentType.ArrayBuffer:<\/p><p>                        _xhr.responseType = 'arraybuffer';<\/p><p>                        break;<\/p><p>                    case ResponseContentType.Json:<\/p><p>                        _xhr.responseType = 'json';<\/p><p>                        break;<\/p><p>                    case ResponseContentType.Text:<\/p><p>                        _xhr.responseType = 'text';<\/p><p>                        break;<\/p><p>                    case ResponseContentType.Blob:<\/p><p>                        _xhr.responseType = 'blob';<\/p><p>                        break;<\/p><p>                    default:<\/p><p>                        throw new Error('The selected responseType is not supported');<\/p><p>                }<\/p><p>            }<\/p><p>            _xhr.addEventListener('load', onLoad);<\/p><p>            _xhr.addEventListener('error', onError);<\/p><p>            _xhr.send(_this.request.getBody());<\/p><p>            return function () {<\/p><p>                _xhr.removeEventListener('load', onLoad);<\/p><p>                _xhr.removeEventListener('error', onError);<\/p><p>                _xhr.abort();<\/p><p>            };<\/p><p>        });<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} req<\/p><p>     * @param {?} _xhr<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    XHRConnection.prototype.setDetectedContentType = function (req /** TODO Request */, _xhr /** XMLHttpRequest */) {<\/p><p>        // Skip if a custom Content-Type header is provided<\/p><p>        if (req.headers != null && req.headers.get('Content-Type') != null) {<\/p><p>            return;<\/p><p>        }<\/p><p>        // Set the detected content type<\/p><p>        switch (req.contentType) {<\/p><p>            case ContentType.NONE:<\/p><p>                break;<\/p><p>            case ContentType.JSON:<\/p><p>                _xhr.setRequestHeader('content-type', 'application/json');<\/p><p>                break;<\/p><p>            case ContentType.FORM:<\/p><p>                _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');<\/p><p>                break;<\/p><p>            case ContentType.TEXT:<\/p><p>                _xhr.setRequestHeader('content-type', 'text/plain');<\/p><p>                break;<\/p><p>            case ContentType.BLOB:<\/p><p>                var /** @type {?} */ blob = req.blob();<\/p><p>                if (blob.type) {<\/p><p>                    _xhr.setRequestHeader('content-type', blob.type);<\/p><p>                }<\/p><p>                break;<\/p><p>        }<\/p><p>    };<\/p><p>    return XHRConnection;<\/p><p>}());<\/p><p>/**<\/p><p> * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application<\/p><p> * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)<\/p><p> * for more information on XSRF.<\/p><p> *<\/p><p> * Applications can configure custom cookie and header names by binding an instance of this class<\/p><p> * with different `cookieName` and `headerName` values. See the main HTTP documentation for more<\/p><p> * details.<\/p><p> *<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var CookieXSRFStrategy = (function () {<\/p><p>    /**<\/p><p>     * @param {?=} _cookieName<\/p><p>     * @param {?=} _headerName<\/p><p>     */<\/p><p>    function CookieXSRFStrategy(_cookieName, _headerName) {<\/p><p>        if (_cookieName === void 0) { _cookieName = 'XSRF-TOKEN'; }<\/p><p>        if (_headerName === void 0) { _headerName = 'X-XSRF-TOKEN'; }<\/p><p>        this._cookieName = _cookieName;<\/p><p>        this._headerName = _headerName;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} req<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    CookieXSRFStrategy.prototype.configureRequest = function (req) {<\/p><p>        var /** @type {?} */ xsrfToken = Object(__WEBPACK_IMPORTED_MODULE_3__angular_platform_browser__[\"ɵgetDOM\"])().getCookie(this._cookieName);<\/p><p>        if (xsrfToken) {<\/p><p>            req.headers.set(this._headerName, xsrfToken);<\/p><p>        }<\/p><p>    };<\/p><p>    return CookieXSRFStrategy;<\/p><p>}());<\/p><p>/**<\/p><p> * Creates {\\@link XHRConnection} instances.<\/p><p> *<\/p><p> * This class would typically not be used by end users, but could be<\/p><p> * overridden if a different backend implementation should be used,<\/p><p> * such as in a node backend.<\/p><p> *<\/p><p> * ### Example<\/p><p> *<\/p><p> * ```<\/p><p> * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';<\/p><p> * \\@Component({<\/p><p> *   viewProviders: [<\/p><p> *     HTTP_PROVIDERS,<\/p><p> *     {provide: Http, useFactory: (backend, options) => {<\/p><p> *       return new Http(backend, options);<\/p><p> *     }, deps: [MyNodeBackend, BaseRequestOptions]}]<\/p><p> * })<\/p><p> * class MyComponent {<\/p><p> *   constructor(http:Http) {<\/p><p> *     http.request('people.json').subscribe(res => this.people = res.json());<\/p><p> *   }<\/p><p> * }<\/p><p> * ```<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var XHRBackend = (function () {<\/p><p>    /**<\/p><p>     * @param {?} _browserXHR<\/p><p>     * @param {?} _baseResponseOptions<\/p><p>     * @param {?} _xsrfStrategy<\/p><p>     */<\/p><p>    function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {<\/p><p>        this._browserXHR = _browserXHR;<\/p><p>        this._baseResponseOptions = _baseResponseOptions;<\/p><p>        this._xsrfStrategy = _xsrfStrategy;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} request<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    XHRBackend.prototype.createConnection = function (request) {<\/p><p>        this._xsrfStrategy.configureRequest(request);<\/p><p>        return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);<\/p><p>    };<\/p><p>    return XHRBackend;<\/p><p>}());<\/p><p>XHRBackend.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Injectable\"] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>XHRBackend.ctorParameters = function () { return [<\/p><p>    { type: BrowserXhr, },<\/p><p>    { type: ResponseOptions, },<\/p><p>    { type: XSRFStrategy, },<\/p><p>]; };<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * Creates a request options object to be optionally provided when instantiating a<\/p><p> * {\\@link Request}.<\/p><p> *<\/p><p> * This class is based on the `RequestInit` description in the [Fetch<\/p><p> * Spec](https://fetch.spec.whatwg.org/#requestinit).<\/p><p> *<\/p><p> * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}<\/p><p> * class, which sub-classes `RequestOptions`.<\/p><p> *<\/p><p> * ```typescript<\/p><p> * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';<\/p><p> *<\/p><p> * const options = new RequestOptions({<\/p><p> *   method: RequestMethod.Post,<\/p><p> *   url: 'https://google.com'<\/p><p> * });<\/p><p> * const req = new Request(options);<\/p><p> * console.log('req.method:', RequestMethod[req.method]); // Post<\/p><p> * console.log('options.url:', options.url); // https://google.com<\/p><p> * ```<\/p><p> *<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var RequestOptions = (function () {<\/p><p>    /**<\/p><p>     * @param {?=} opts<\/p><p>     */<\/p><p>    function RequestOptions(opts) {<\/p><p>        if (opts === void 0) { opts = {}; }<\/p><p>        var method = opts.method, headers = opts.headers, body = opts.body, url = opts.url, search = opts.search, params = opts.params, withCredentials = opts.withCredentials, responseType = opts.responseType;<\/p><p>        this.method = method != null ? normalizeMethodName(method) : null;<\/p><p>        this.headers = headers != null ? headers : null;<\/p><p>        this.body = body != null ? body : null;<\/p><p>        this.url = url != null ? url : null;<\/p><p>        this.params = this._mergeSearchParams(params || search);<\/p><p>        this.withCredentials = withCredentials != null ? withCredentials : null;<\/p><p>        this.responseType = responseType != null ? responseType : null;<\/p><p>    }<\/p><p>    Object.defineProperty(RequestOptions.prototype, \"search\", {<\/p><p>        /**<\/p><p>         * @deprecated from 4.0.0. Use params instead.<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this.params; },<\/p><p>        /**<\/p><p>         * @deprecated from 4.0.0. Use params instead.<\/p><p>         * @param {?} params<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        set: function (params) { this.params = params; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    /**<\/p><p>     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override<\/p><p>     * existing values. This method will not change the values of the instance on which it is being<\/p><p>     * called.<\/p><p>     *<\/p><p>     * Note that `headers` and `search` will override existing values completely if present in<\/p><p>     * the `options` object. If these values should be merged, it should be done prior to calling<\/p><p>     * `merge` on the `RequestOptions` instance.<\/p><p>     *<\/p><p>     * ```typescript<\/p><p>     * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';<\/p><p>     *<\/p><p>     * const options = new RequestOptions({<\/p><p>     *   method: RequestMethod.Post<\/p><p>     * });<\/p><p>     * const req = new Request(options.merge({<\/p><p>     *   url: 'https://google.com'<\/p><p>     * }));<\/p><p>     * console.log('req.method:', RequestMethod[req.method]); // Post<\/p><p>     * console.log('options.url:', options.url); // null<\/p><p>     * console.log('req.url:', req.url); // https://google.com<\/p><p>     * ```<\/p><p>     * @param {?=} options<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RequestOptions.prototype.merge = function (options) {<\/p><p>        return new RequestOptions({<\/p><p>            method: options && options.method != null ? options.method : this.method,<\/p><p>            headers: options && options.headers != null ? options.headers : new Headers(this.headers),<\/p><p>            body: options && options.body != null ? options.body : this.body,<\/p><p>            url: options && options.url != null ? options.url : this.url,<\/p><p>            params: options && this._mergeSearchParams(options.params || options.search),<\/p><p>            withCredentials: options && options.withCredentials != null ? options.withCredentials :<\/p><p>                this.withCredentials,<\/p><p>            responseType: options && options.responseType != null ? options.responseType :<\/p><p>                this.responseType<\/p><p>        });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?=} params<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RequestOptions.prototype._mergeSearchParams = function (params) {<\/p><p>        if (!params)<\/p><p>            return this.params;<\/p><p>        if (params instanceof URLSearchParams) {<\/p><p>            return params.clone();<\/p><p>        }<\/p><p>        if (typeof params === 'string') {<\/p><p>            return new URLSearchParams(params);<\/p><p>        }<\/p><p>        return this._parseParams(params);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?=} objParams<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RequestOptions.prototype._parseParams = function (objParams) {<\/p><p>        var _this = this;<\/p><p>        if (objParams === void 0) { objParams = {}; }<\/p><p>        var /** @type {?} */ params = new URLSearchParams();<\/p><p>        Object.keys(objParams).forEach(function (key) {<\/p><p>            var /** @type {?} */ value = objParams[key];<\/p><p>            if (Array.isArray(value)) {<\/p><p>                value.forEach(function (item) { return _this._appendParam(key, item, params); });<\/p><p>            }<\/p><p>            else {<\/p><p>                _this._appendParam(key, value, params);<\/p><p>            }<\/p><p>        });<\/p><p>        return params;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} key<\/p><p>     * @param {?} value<\/p><p>     * @param {?} params<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RequestOptions.prototype._appendParam = function (key, value, params) {<\/p><p>        if (typeof value !== 'string') {<\/p><p>            value = JSON.stringify(value);<\/p><p>        }<\/p><p>        params.append(key, value);<\/p><p>    };<\/p><p>    return RequestOptions;<\/p><p>}());<\/p><p>/**<\/p><p> * Subclass of {\\@link RequestOptions}, with default values.<\/p><p> *<\/p><p> * Default values:<\/p><p> *  * method: {\\@link RequestMethod RequestMethod.Get}<\/p><p> *  * headers: empty {\\@link Headers} object<\/p><p> *<\/p><p> * This class could be extended and bound to the {\\@link RequestOptions} class<\/p><p> * when configuring an {\\@link Injector}, in order to override the default options<\/p><p> * used by {\\@link Http} to create and send {\\@link Request Requests}.<\/p><p> *<\/p><p> * ```typescript<\/p><p> * import {BaseRequestOptions, RequestOptions} from '\\@angular/http';<\/p><p> *<\/p><p> * class MyOptions extends BaseRequestOptions {<\/p><p> *   search: string = 'coreTeam=true';<\/p><p> * }<\/p><p> *<\/p><p> * {provide: RequestOptions, useClass: MyOptions};<\/p><p> * ```<\/p><p> *<\/p><p> * The options could also be extended when manually creating a {\\@link Request}<\/p><p> * object.<\/p><p> *<\/p><p> * ```<\/p><p> * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';<\/p><p> *<\/p><p> * const options = new BaseRequestOptions();<\/p><p> * const req = new Request(options.merge({<\/p><p> *   method: RequestMethod.Post,<\/p><p> *   url: 'https://google.com'<\/p><p> * }));<\/p><p> * console.log('req.method:', RequestMethod[req.method]); // Post<\/p><p> * console.log('options.url:', options.url); // null<\/p><p> * console.log('req.url:', req.url); // https://google.com<\/p><p> * ```<\/p><p> *<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var BaseRequestOptions = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](BaseRequestOptions, _super);<\/p><p>    function BaseRequestOptions() {<\/p><p>        return _super.call(this, { method: RequestMethod.Get, headers: new Headers() }) || this;<\/p><p>    }<\/p><p>    return BaseRequestOptions;<\/p><p>}(RequestOptions));<\/p><p>BaseRequestOptions.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Injectable\"] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>BaseRequestOptions.ctorParameters = function () { return []; };<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * Creates `Request` instances from provided values.<\/p><p> *<\/p><p> * The Request's interface is inspired by the Request constructor defined in the [Fetch<\/p><p> * Spec](https://fetch.spec.whatwg.org/#request-class),<\/p><p> * but is considered a static value whose body can be accessed many times. There are other<\/p><p> * differences in the implementation, but this is the most significant.<\/p><p> *<\/p><p> * `Request` instances are typically created by higher-level classes, like {\\@link Http} and<\/p><p> * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.<\/p><p> * One such example is when creating services that wrap higher-level services, like {\\@link Http},<\/p><p> * where it may be useful to generate a `Request` with arbitrary headers and search params.<\/p><p> *<\/p><p> * ```typescript<\/p><p> * import {Injectable, Injector} from '\\@angular/core';<\/p><p> * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';<\/p><p> *<\/p><p> * \\@Injectable()<\/p><p> * class AutoAuthenticator {<\/p><p> *   constructor(public http:Http) {}<\/p><p> *   request(url:string) {<\/p><p> *     return this.http.request(new Request({<\/p><p> *       method: RequestMethod.Get,<\/p><p> *       url: url,<\/p><p> *       search: 'password=123'<\/p><p> *     }));<\/p><p> *   }<\/p><p> * }<\/p><p> *<\/p><p> * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);<\/p><p> * var authenticator = injector.get(AutoAuthenticator);<\/p><p> * authenticator.request('people.json').subscribe(res => {<\/p><p> *   //URL should have included '?password=123'<\/p><p> *   console.log('people', res.json());<\/p><p> * });<\/p><p> * ```<\/p><p> *<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var Request = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](Request, _super);<\/p><p>    /**<\/p><p>     * @param {?} requestOptions<\/p><p>     */<\/p><p>    function Request(requestOptions) {<\/p><p>        var _this = _super.call(this) || this;<\/p><p>        // TODO: assert that url is present<\/p><p>        var url = requestOptions.url;<\/p><p>        _this.url = requestOptions.url;<\/p><p>        var paramsArg = requestOptions.params || requestOptions.search;<\/p><p>        if (paramsArg) {<\/p><p>            var params = void 0;<\/p><p>            if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {<\/p><p>                params = urlEncodeParams(paramsArg).toString();<\/p><p>            }<\/p><p>            else {<\/p><p>                params = paramsArg.toString();<\/p><p>            }<\/p><p>            if (params.length > 0) {<\/p><p>                var prefix = '?';<\/p><p>                if (_this.url.indexOf('?') != -1) {<\/p><p>                    prefix = (_this.url[_this.url.length - 1] == '&') ? '' : '&';<\/p><p>                }<\/p><p>                // TODO: just delete search-query-looking string in url?<\/p><p>                _this.url = url + prefix + params;<\/p><p>            }<\/p><p>        }<\/p><p>        _this._body = requestOptions.body;<\/p><p>        _this.method = normalizeMethodName(requestOptions.method);<\/p><p>        // TODO(jeffbcross): implement behavior<\/p><p>        // Defaults to 'omit', consistent with browser<\/p><p>        _this.headers = new Headers(requestOptions.headers);<\/p><p>        _this.contentType = _this.detectContentType();<\/p><p>        _this.withCredentials = requestOptions.withCredentials;<\/p><p>        _this.responseType = requestOptions.responseType;<\/p><p>        return _this;<\/p><p>    }<\/p><p>    /**<\/p><p>     * Returns the content type enum based on header options.<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Request.prototype.detectContentType = function () {<\/p><p>        switch (this.headers.get('content-type')) {<\/p><p>            case 'application/json':<\/p><p>                return ContentType.JSON;<\/p><p>            case 'application/x-www-form-urlencoded':<\/p><p>                return ContentType.FORM;<\/p><p>            case 'multipart/form-data':<\/p><p>                return ContentType.FORM_DATA;<\/p><p>            case 'text/plain':<\/p><p>            case 'text/html':<\/p><p>                return ContentType.TEXT;<\/p><p>            case 'application/octet-stream':<\/p><p>                return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;<\/p><p>            default:<\/p><p>                return this.detectContentTypeFromBody();<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * Returns the content type of request's body based on its type.<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Request.prototype.detectContentTypeFromBody = function () {<\/p><p>        if (this._body == null) {<\/p><p>            return ContentType.NONE;<\/p><p>        }<\/p><p>        else if (this._body instanceof URLSearchParams) {<\/p><p>            return ContentType.FORM;<\/p><p>        }<\/p><p>        else if (this._body instanceof FormData) {<\/p><p>            return ContentType.FORM_DATA;<\/p><p>        }<\/p><p>        else if (this._body instanceof Blob$1) {<\/p><p>            return ContentType.BLOB;<\/p><p>        }<\/p><p>        else if (this._body instanceof ArrayBuffer$1) {<\/p><p>            return ContentType.ARRAY_BUFFER;<\/p><p>        }<\/p><p>        else if (this._body && typeof this._body === 'object') {<\/p><p>            return ContentType.JSON;<\/p><p>        }<\/p><p>        else {<\/p><p>            return ContentType.TEXT;<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * Returns the request's body according to its type. If body is undefined, return<\/p><p>     * null.<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Request.prototype.getBody = function () {<\/p><p>        switch (this.contentType) {<\/p><p>            case ContentType.JSON:<\/p><p>                return this.text();<\/p><p>            case ContentType.FORM:<\/p><p>                return this.text();<\/p><p>            case ContentType.FORM_DATA:<\/p><p>                return this._body;<\/p><p>            case ContentType.TEXT:<\/p><p>                return this.text();<\/p><p>            case ContentType.BLOB:<\/p><p>                return this.blob();<\/p><p>            case ContentType.ARRAY_BUFFER:<\/p><p>                return this.arrayBuffer();<\/p><p>            default:<\/p><p>                return null;<\/p><p>        }<\/p><p>    };<\/p><p>    return Request;<\/p><p>}(Body));<\/p><p>/**<\/p><p> * @param {?} params<\/p><p> * @return {?}<\/p><p> */<\/p><p>function urlEncodeParams(params) {<\/p><p>    var /** @type {?} */ searchParams = new URLSearchParams();<\/p><p>    Object.keys(params).forEach(function (key) {<\/p><p>        var /** @type {?} */ value = params[key];<\/p><p>        if (value && Array.isArray(value)) {<\/p><p>            value.forEach(function (element) { return searchParams.append(key, element.toString()); });<\/p><p>        }<\/p><p>        else {<\/p><p>            searchParams.append(key, value.toString());<\/p><p>        }<\/p><p>    });<\/p><p>    return searchParams;<\/p><p>}<\/p><p>var noop = function () { };<\/p><p>var w = typeof window == 'object' ? window : noop;<\/p><p>var FormData = ((w) /** TODO #9100 */)['FormData'] || noop;<\/p><p>var Blob$1 = ((w) /** TODO #9100 */)['Blob'] || noop;<\/p><p>var ArrayBuffer$1 = ((w) /** TODO #9100 */)['ArrayBuffer'] || noop;<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * @param {?} backend<\/p><p> * @param {?} request<\/p><p> * @return {?}<\/p><p> */<\/p><p>function httpRequest(backend, request) {<\/p><p>    return backend.createConnection(request).response;<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} defaultOpts<\/p><p> * @param {?} providedOpts<\/p><p> * @param {?} method<\/p><p> * @param {?} url<\/p><p> * @return {?}<\/p><p> */<\/p><p>function mergeOptions(defaultOpts, providedOpts, method, url) {<\/p><p>    var /** @type {?} */ newOptions = defaultOpts;<\/p><p>    if (providedOpts) {<\/p><p>        // Hack so Dart can used named parameters<\/p><p>        return (newOptions.merge(new RequestOptions({<\/p><p>            method: providedOpts.method || method,<\/p><p>            url: providedOpts.url || url,<\/p><p>            search: providedOpts.search,<\/p><p>            params: providedOpts.params,<\/p><p>            headers: providedOpts.headers,<\/p><p>            body: providedOpts.body,<\/p><p>            withCredentials: providedOpts.withCredentials,<\/p><p>            responseType: providedOpts.responseType<\/p><p>        })));<\/p><p>    }<\/p><p>    return (newOptions.merge(new RequestOptions({ method: method, url: url })));<\/p><p>}<\/p><p>/**<\/p><p> * Performs http requests using `XMLHttpRequest` as the default backend.<\/p><p> *<\/p><p> * `Http` is available as an injectable class, with methods to perform http requests. Calling<\/p><p> * `request` returns an `Observable` which will emit a single {\\@link Response} when a<\/p><p> * response is received.<\/p><p> *<\/p><p> * ### Example<\/p><p> *<\/p><p> * ```typescript<\/p><p> * import {Http, HTTP_PROVIDERS} from '\\@angular/http';<\/p><p> * import 'rxjs/add/operator/map'<\/p><p> * \\@Component({<\/p><p> *   selector: 'http-app',<\/p><p> *   viewProviders: [HTTP_PROVIDERS],<\/p><p> *   templateUrl: 'people.html'<\/p><p> * })<\/p><p> * class PeopleComponent {<\/p><p> *   constructor(http: Http) {<\/p><p> *     http.get('people.json')<\/p><p> *       // Call map on the response observable to get the parsed people object<\/p><p> *       .map(res => res.json())<\/p><p> *       // Subscribe to the observable to get the parsed people object and attach it to the<\/p><p> *       // component<\/p><p> *       .subscribe(people => this.people = people);<\/p><p> *   }<\/p><p> * }<\/p><p> * ```<\/p><p> *<\/p><p> *<\/p><p> * ### Example<\/p><p> *<\/p><p> * ```<\/p><p> * http.get('people.json').subscribe((res:Response) => this.people = res.json());<\/p><p> * ```<\/p><p> *<\/p><p> * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (<\/p><p> * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing<\/p><p> * the {\\@link XHRBackend} provider, as in the following example:<\/p><p> *<\/p><p> * ### Example<\/p><p> *<\/p><p> * ```typescript<\/p><p> * import {BaseRequestOptions, Http} from '\\@angular/http';<\/p><p> * import {MockBackend} from '\\@angular/http/testing';<\/p><p> * var injector = Injector.resolveAndCreate([<\/p><p> *   BaseRequestOptions,<\/p><p> *   MockBackend,<\/p><p> *   {provide: Http, useFactory:<\/p><p> *       function(backend, defaultOptions) {<\/p><p> *         return new Http(backend, defaultOptions);<\/p><p> *       },<\/p><p> *       deps: [MockBackend, BaseRequestOptions]}<\/p><p> * ]);<\/p><p> * var http = injector.get(Http);<\/p><p> * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));<\/p><p> * ```<\/p><p> *<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var Http = (function () {<\/p><p>    /**<\/p><p>     * @param {?} _backend<\/p><p>     * @param {?} _defaultOptions<\/p><p>     */<\/p><p>    function Http(_backend, _defaultOptions) {<\/p><p>        this._backend = _backend;<\/p><p>        this._defaultOptions = _defaultOptions;<\/p><p>    }<\/p><p>    /**<\/p><p>     * Performs any type of http request. First argument is required, and can either be a url or<\/p><p>     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}<\/p><p>     * object can be provided as the 2nd argument. The options object will be merged with the values<\/p><p>     * of {\\@link BaseRequestOptions} before performing the request.<\/p><p>     * @param {?} url<\/p><p>     * @param {?=} options<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Http.prototype.request = function (url, options) {<\/p><p>        var /** @type {?} */ responseObservable;<\/p><p>        if (typeof url === 'string') {<\/p><p>            responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url))));<\/p><p>        }<\/p><p>        else if (url instanceof Request) {<\/p><p>            responseObservable = httpRequest(this._backend, url);<\/p><p>        }<\/p><p>        else {<\/p><p>            throw new Error('First argument must be a url string or Request instance.');<\/p><p>        }<\/p><p>        return responseObservable;<\/p><p>    };<\/p><p>    /**<\/p><p>     * Performs a request with `get` http method.<\/p><p>     * @param {?} url<\/p><p>     * @param {?=} options<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Http.prototype.get = function (url, options) {<\/p><p>        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));<\/p><p>    };<\/p><p>    /**<\/p><p>     * Performs a request with `post` http method.<\/p><p>     * @param {?} url<\/p><p>     * @param {?} body<\/p><p>     * @param {?=} options<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Http.prototype.post = function (url, body, options) {<\/p><p>        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Post, url)));<\/p><p>    };<\/p><p>    /**<\/p><p>     * Performs a request with `put` http method.<\/p><p>     * @param {?} url<\/p><p>     * @param {?} body<\/p><p>     * @param {?=} options<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Http.prototype.put = function (url, body, options) {<\/p><p>        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Put, url)));<\/p><p>    };<\/p><p>    /**<\/p><p>     * Performs a request with `delete` http method.<\/p><p>     * @param {?} url<\/p><p>     * @param {?=} options<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Http.prototype.delete = function (url, options) {<\/p><p>        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));<\/p><p>    };<\/p><p>    /**<\/p><p>     * Performs a request with `patch` http method.<\/p><p>     * @param {?} url<\/p><p>     * @param {?} body<\/p><p>     * @param {?=} options<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Http.prototype.patch = function (url, body, options) {<\/p><p>        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Patch, url)));<\/p><p>    };<\/p><p>    /**<\/p><p>     * Performs a request with `head` http method.<\/p><p>     * @param {?} url<\/p><p>     * @param {?=} options<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Http.prototype.head = function (url, options) {<\/p><p>        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));<\/p><p>    };<\/p><p>    /**<\/p><p>     * Performs a request with `options` http method.<\/p><p>     * @param {?} url<\/p><p>     * @param {?=} options<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Http.prototype.options = function (url, options) {<\/p><p>        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));<\/p><p>    };<\/p><p>    return Http;<\/p><p>}());<\/p><p>Http.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Injectable\"] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>Http.ctorParameters = function () { return [<\/p><p>    { type: ConnectionBackend, },<\/p><p>    { type: RequestOptions, },<\/p><p>]; };<\/p><p>/**<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var Jsonp = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](Jsonp, _super);<\/p><p>    /**<\/p><p>     * @param {?} backend<\/p><p>     * @param {?} defaultOptions<\/p><p>     */<\/p><p>    function Jsonp(backend, defaultOptions) {<\/p><p>        return _super.call(this, backend, defaultOptions) || this;<\/p><p>    }<\/p><p>    /**<\/p><p>     * Performs any type of http request. First argument is required, and can either be a url or<\/p><p>     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}<\/p><p>     * object can be provided as the 2nd argument. The options object will be merged with the values<\/p><p>     * of {\\@link BaseRequestOptions} before performing the request.<\/p><p>     *<\/p><p>     * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is<\/p><p>     * supported by all current browsers. Because JSONP creates a `<script>` element with<\/p><p>     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted<\/p><p>     * source could expose your application to XSS risks. Data exposed by JSONP may also be<\/p><p>     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for<\/p><p>     * future security issues (e.g. content sniffing).  For more detail, see the<\/p><p>     * [Security Guide](http://g.co/ng/security).<\/p><p>     * @param {?} url<\/p><p>     * @param {?=} options<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Jsonp.prototype.request = function (url, options) {<\/p><p>        var /** @type {?} */ responseObservable;<\/p><p>        if (typeof url === 'string') {<\/p><p>            url =<\/p><p>                new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url)));<\/p><p>        }<\/p><p>        if (url instanceof Request) {<\/p><p>            if (url.method !== RequestMethod.Get) {<\/p><p>                throw new Error('JSONP requests must use GET request method.');<\/p><p>            }<\/p><p>            responseObservable = httpRequest(this._backend, url);<\/p><p>        }<\/p><p>        else {<\/p><p>            throw new Error('First argument must be a url string or Request instance.');<\/p><p>        }<\/p><p>        return responseObservable;<\/p><p>    };<\/p><p>    return Jsonp;<\/p><p>}(Http));<\/p><p>Jsonp.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Injectable\"] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>Jsonp.ctorParameters = function () { return [<\/p><p>    { type: ConnectionBackend, },<\/p><p>    { type: RequestOptions, },<\/p><p>]; };<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * @module<\/p><p> * @description<\/p><p> * The http module provides services to perform http requests. To get started, see the {@link Http}<\/p><p> * class.<\/p><p> */<\/p><p>/**<\/p><p> * @return {?}<\/p><p> */<\/p><p>function _createDefaultCookieXSRFStrategy() {<\/p><p>    return new CookieXSRFStrategy();<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} xhrBackend<\/p><p> * @param {?} requestOptions<\/p><p> * @return {?}<\/p><p> */<\/p><p>function httpFactory(xhrBackend, requestOptions) {<\/p><p>    return new Http(xhrBackend, requestOptions);<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} jsonpBackend<\/p><p> * @param {?} requestOptions<\/p><p> * @return {?}<\/p><p> */<\/p><p>function jsonpFactory(jsonpBackend, requestOptions) {<\/p><p>    return new Jsonp(jsonpBackend, requestOptions);<\/p><p>}<\/p><p>/**<\/p><p> * The module that includes http's providers<\/p><p> *<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var HttpModule = (function () {<\/p><p>    function HttpModule() {<\/p><p>    }<\/p><p>    return HttpModule;<\/p><p>}());<\/p><p>HttpModule.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"NgModule\"], args: [{<\/p><p>                providers: [<\/p><p>                    // TODO(pascal): use factory type annotations once supported in DI<\/p><p>                    // issue: https://github.com/angular/angular/issues/3183<\/p><p>                    { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },<\/p><p>                    BrowserXhr,<\/p><p>                    { provide: RequestOptions, useClass: BaseRequestOptions },<\/p><p>                    { provide: ResponseOptions, useClass: BaseResponseOptions },<\/p><p>                    XHRBackend,<\/p><p>                    { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },<\/p><p>                ],<\/p><p>            },] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>HttpModule.ctorParameters = function () { return []; };<\/p><p>/**<\/p><p> * The module that includes jsonp's providers<\/p><p> *<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var JsonpModule = (function () {<\/p><p>    function JsonpModule() {<\/p><p>    }<\/p><p>    return JsonpModule;<\/p><p>}());<\/p><p>JsonpModule.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"NgModule\"], args: [{<\/p><p>                providers: [<\/p><p>                    // TODO(pascal): use factory type annotations once supported in DI<\/p><p>                    // issue: https://github.com/angular/angular/issues/3183<\/p><p>                    { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },<\/p><p>                    BrowserJsonp,<\/p><p>                    { provide: RequestOptions, useClass: BaseRequestOptions },<\/p><p>                    { provide: ResponseOptions, useClass: BaseResponseOptions },<\/p><p>                    { provide: JSONPBackend, useClass: JSONPBackend_ },<\/p><p>                ],<\/p><p>            },] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>JsonpModule.ctorParameters = function () { return []; };<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * @module<\/p><p> * @description<\/p><p> * Entry point for all public APIs of the common package.<\/p><p> */<\/p><p>/**<\/p><p> * \\@stable<\/p><p> */<\/p><p>var VERSION = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Version\"]('4.3.5');<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * @module<\/p><p> * @description<\/p><p> * Entry point for all public APIs of the http package.<\/p><p> */<\/p><p>// This file only reexports content of the `src` folder. Keep it that way.<\/p><p>/**<\/p><p> * Generated bundle index. Do not edit.<\/p><p> */<\/p><p><\/p><p>//# sourceMappingURL=http.es5.js.map<\/p><p><\/p><p><\/p><p>/***/ }),<\/p><p><\/p><p>/***/ \"../../../platform-browser/@angular/platform-browser.es5.js\":<\/p><p>/***/ (function(module, __webpack_exports__, __webpack_require__) {<\/p><p><\/p><p>\"use strict\";<\/p><p>Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BrowserModule\", function() { return BrowserModule; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"platformBrowser\", function() { return platformBrowser; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Meta\", function() { return Meta; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Title\", function() { return Title; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"disableDebugTools\", function() { return disableDebugTools; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"enableDebugTools\", function() { return enableDebugTools; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"By\", function() { return By; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NgProbeToken\", function() { return NgProbeToken$1; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DOCUMENT\", function() { return DOCUMENT$1; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EVENT_MANAGER_PLUGINS\", function() { return EVENT_MANAGER_PLUGINS; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EventManager\", function() { return EventManager; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HAMMER_GESTURE_CONFIG\", function() { return HAMMER_GESTURE_CONFIG; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HammerGestureConfig\", function() { return HammerGestureConfig; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DomSanitizer\", function() { return DomSanitizer; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"VERSION\", function() { return VERSION; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵBROWSER_SANITIZATION_PROVIDERS\", function() { return BROWSER_SANITIZATION_PROVIDERS; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS\", function() { return INTERNAL_BROWSER_PLATFORM_PROVIDERS; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵinitDomAdapter\", function() { return initDomAdapter; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵBrowserDomAdapter\", function() { return BrowserDomAdapter; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵBrowserPlatformLocation\", function() { return BrowserPlatformLocation; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵTRANSITION_ID\", function() { return TRANSITION_ID; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵBrowserGetTestability\", function() { return BrowserGetTestability; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵELEMENT_PROBE_PROVIDERS\", function() { return ELEMENT_PROBE_PROVIDERS; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵDomAdapter\", function() { return DomAdapter; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵgetDOM\", function() { return getDOM; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵsetRootDomAdapter\", function() { return setRootDomAdapter; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵDomRendererFactory2\", function() { return DomRendererFactory2; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵNAMESPACE_URIS\", function() { return NAMESPACE_URIS; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵflattenStyles\", function() { return flattenStyles; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵshimContentAttribute\", function() { return shimContentAttribute; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵshimHostAttribute\", function() { return shimHostAttribute; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵDomEventsPlugin\", function() { return DomEventsPlugin; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵHammerGesturesPlugin\", function() { return HammerGesturesPlugin; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵKeyEventsPlugin\", function() { return KeyEventsPlugin; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵDomSharedStylesHost\", function() { return DomSharedStylesHost; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵSharedStylesHost\", function() { return SharedStylesHost; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵb\", function() { return _document; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵa\", function() { return errorHandler; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵh\", function() { return GenericBrowserDomAdapter; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵg\", function() { return SERVER_TRANSITION_PROVIDERS; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵf\", function() { return appInitializerFactory; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵc\", function() { return _createNgProbe; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵd\", function() { return EventManagerPlugin; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵe\", function() { return DomSanitizerImpl; });<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(\"../../../../tslib/tslib.es6.js\");<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_common__ = __webpack_require__(\"../../../common/@angular/common.es5.js\");<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_core__ = __webpack_require__(\"../../../core/@angular/core.es5.js\");<\/p><p><\/p><p>/**<\/p><p> * @license Angular v4.3.5<\/p><p> * (c) 2010-2017 Google, Inc. https://angular.io/<\/p><p> * License: MIT<\/p><p> */<\/p><p><\/p><p><\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var _DOM = ((null));<\/p><p>/**<\/p><p> * @return {?}<\/p><p> */<\/p><p>function getDOM() {<\/p><p>    return _DOM;<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} adapter<\/p><p> * @return {?}<\/p><p> */<\/p><p>/**<\/p><p> * @param {?} adapter<\/p><p> * @return {?}<\/p><p> */<\/p><p>function setRootDomAdapter(adapter) {<\/p><p>    if (!_DOM) {<\/p><p>        _DOM = adapter;<\/p><p>    }<\/p><p>}<\/p><p>/**<\/p><p> * Provides DOM operations in an environment-agnostic way.<\/p><p> *<\/p><p> * \\@security Tread carefully! Interacting with the DOM directly is dangerous and<\/p><p> * can introduce XSS risks.<\/p><p> * @abstract<\/p><p> */<\/p><p>var DomAdapter = (function () {<\/p><p>    function DomAdapter() {<\/p><p>        this.resourceLoaderType = ((null));<\/p><p>    }<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} element<\/p><p>     * @param {?} name<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.hasProperty = function (element, name) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @param {?} name<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.setProperty = function (el, name, value) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @param {?} name<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.getProperty = function (el, name) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @param {?} methodName<\/p><p>     * @param {?} args<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.invoke = function (el, methodName, args) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} error<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.logError = function (error) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} error<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.log = function (error) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} error<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.logGroup = function (error) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.logGroupEnd = function () { };<\/p><p>    Object.defineProperty(DomAdapter.prototype, \"attrToPropMap\", {<\/p><p>        /**<\/p><p>         * Maps attribute names to their corresponding property names for cases<\/p><p>         * where attribute name doesn't match property name.<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._attrToPropMap; },<\/p><p>        /**<\/p><p>         * @param {?} value<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        set: function (value) { this._attrToPropMap = value; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    ;<\/p><p>    ;<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} nodeA<\/p><p>     * @param {?} nodeB<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.contains = function (nodeA, nodeB) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} templateHtml<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.parse = function (templateHtml) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @param {?} selector<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.querySelector = function (el, selector) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @param {?} selector<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.querySelectorAll = function (el, selector) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @param {?} evt<\/p><p>     * @param {?} listener<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.on = function (el, evt, listener) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @param {?} evt<\/p><p>     * @param {?} listener<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.onAndCancel = function (el, evt, listener) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @param {?} evt<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.dispatchEvent = function (el, evt) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} eventType<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.createMouseEvent = function (eventType) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} eventType<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.createEvent = function (eventType) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} evt<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.preventDefault = function (evt) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} evt<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.isPrevented = function (evt) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.getInnerHTML = function (el) { };<\/p><p>    /**<\/p><p>     * Returns content if el is a <template> element, null otherwise.<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.getTemplateContent = function (el) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.getOuterHTML = function (el) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.nodeName = function (node) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.nodeValue = function (node) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.type = function (node) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.content = function (node) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.firstChild = function (el) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.nextSibling = function (el) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.parentElement = function (el) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.childNodes = function (el) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.childNodesAsList = function (el) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.clearNodes = function (el) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.appendChild = function (el, node) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.removeChild = function (el, node) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @param {?} newNode<\/p><p>     * @param {?} oldNode<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.replaceChild = function (el, newNode, oldNode) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.remove = function (el) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} parent<\/p><p>     * @param {?} ref<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.insertBefore = function (parent, ref, node) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} parent<\/p><p>     * @param {?} ref<\/p><p>     * @param {?} nodes<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.insertAllBefore = function (parent, ref, nodes) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} parent<\/p><p>     * @param {?} el<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.insertAfter = function (parent, el, node) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.setInnerHTML = function (el, value) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.getText = function (el) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.setText = function (el, value) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.getValue = function (el) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.setValue = function (el, value) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.getChecked = function (el) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.setChecked = function (el, value) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} text<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.createComment = function (text) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} html<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.createTemplate = function (html) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} tagName<\/p><p>     * @param {?=} doc<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.createElement = function (tagName, doc) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} ns<\/p><p>     * @param {?} tagName<\/p><p>     * @param {?=} doc<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.createElementNS = function (ns, tagName, doc) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} text<\/p><p>     * @param {?=} doc<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.createTextNode = function (text, doc) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} attrName<\/p><p>     * @param {?} attrValue<\/p><p>     * @param {?=} doc<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} css<\/p><p>     * @param {?=} doc<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.createStyleElement = function (css, doc) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.createShadowRoot = function (el) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.getShadowRoot = function (el) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.getHost = function (el) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.getDistributedNodes = function (el) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.clone /*<T extends Node>*/ = function (node) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} element<\/p><p>     * @param {?} name<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.getElementsByClassName = function (element, name) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} element<\/p><p>     * @param {?} name<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.getElementsByTagName = function (element, name) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} element<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.classList = function (element) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} element<\/p><p>     * @param {?} className<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.addClass = function (element, className) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} element<\/p><p>     * @param {?} className<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.removeClass = function (element, className) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} element<\/p><p>     * @param {?} className<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.hasClass = function (element, className) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} element<\/p><p>     * @param {?} styleName<\/p><p>     * @param {?} styleValue<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.setStyle = function (element, styleName, styleValue) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} element<\/p><p>     * @param {?} styleName<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.removeStyle = function (element, styleName) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} element<\/p><p>     * @param {?} styleName<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.getStyle = function (element, styleName) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} element<\/p><p>     * @param {?} styleName<\/p><p>     * @param {?=} styleValue<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.hasStyle = function (element, styleName, styleValue) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} element<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.tagName = function (element) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} element<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.attributeMap = function (element) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} element<\/p><p>     * @param {?} attribute<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.hasAttribute = function (element, attribute) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} element<\/p><p>     * @param {?} ns<\/p><p>     * @param {?} attribute<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} element<\/p><p>     * @param {?} attribute<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.getAttribute = function (element, attribute) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} element<\/p><p>     * @param {?} ns<\/p><p>     * @param {?} attribute<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.getAttributeNS = function (element, ns, attribute) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} element<\/p><p>     * @param {?} name<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.setAttribute = function (element, name, value) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} element<\/p><p>     * @param {?} ns<\/p><p>     * @param {?} name<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.setAttributeNS = function (element, ns, name, value) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} element<\/p><p>     * @param {?} attribute<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.removeAttribute = function (element, attribute) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} element<\/p><p>     * @param {?} ns<\/p><p>     * @param {?} attribute<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.removeAttributeNS = function (element, ns, attribute) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.templateAwareRoot = function (el) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.createHtmlDocument = function () { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.getBoundingClientRect = function (el) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} doc<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.getTitle = function (doc) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} doc<\/p><p>     * @param {?} newTitle<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.setTitle = function (doc, newTitle) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} n<\/p><p>     * @param {?} selector<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.elementMatches = function (n, selector) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.isTemplateElement = function (el) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.isTextNode = function (node) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.isCommentNode = function (node) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.isElementNode = function (node) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.hasShadowRoot = function (node) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.isShadowRoot = function (node) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.importIntoDoc /*<T extends Node>*/ = function (node) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.adoptNode /*<T extends Node>*/ = function (node) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} element<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.getHref = function (element) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} event<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.getEventKey = function (event) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} element<\/p><p>     * @param {?} baseUrl<\/p><p>     * @param {?} href<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.resolveAndSetHref = function (element, baseUrl, href) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.supportsDOMEvents = function () { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.supportsNativeShadowDOM = function () { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} doc<\/p><p>     * @param {?} target<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.getGlobalEventTarget = function (doc, target) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.getHistory = function () { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.getLocation = function () { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} doc<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.getBaseHref = function (doc) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.resetBaseElement = function () { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.getUserAgent = function () { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} element<\/p><p>     * @param {?} name<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.setData = function (element, name, value) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} element<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.getComputedStyle = function (element) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} element<\/p><p>     * @param {?} name<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.getData = function (element, name) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.supportsWebAnimation = function () { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.performanceNow = function () { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.getAnimationPrefix = function () { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.getTransitionEnd = function () { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.supportsAnimation = function () { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.supportsCookies = function () { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} name<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.getCookie = function (name) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} name<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomAdapter.prototype.setCookie = function (name, value) { };<\/p><p>    return DomAdapter;<\/p><p>}());<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * Provides DOM operations in any browser environment.<\/p><p> *<\/p><p> * \\@security Tread carefully! Interacting with the DOM directly is dangerous and<\/p><p> * can introduce XSS risks.<\/p><p> * @abstract<\/p><p> */<\/p><p>var GenericBrowserDomAdapter = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](GenericBrowserDomAdapter, _super);<\/p><p>    function GenericBrowserDomAdapter() {<\/p><p>        var _this = _super.call(this) || this;<\/p><p>        _this._animationPrefix = null;<\/p><p>        _this._transitionEnd = null;<\/p><p>        try {<\/p><p>            var element_1 = _this.createElement('div', document);<\/p><p>            if (_this.getStyle(element_1, 'animationName') != null) {<\/p><p>                _this._animationPrefix = '';<\/p><p>            }<\/p><p>            else {<\/p><p>                var domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];<\/p><p>                for (var i = 0; i < domPrefixes.length; i++) {<\/p><p>                    if (_this.getStyle(element_1, domPrefixes[i] + 'AnimationName') != null) {<\/p><p>                        _this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';<\/p><p>                        break;<\/p><p>                    }<\/p><p>                }<\/p><p>            }<\/p><p>            var transEndEventNames_1 = {<\/p><p>                WebkitTransition: 'webkitTransitionEnd',<\/p><p>                MozTransition: 'transitionend',<\/p><p>                OTransition: 'oTransitionEnd otransitionend',<\/p><p>                transition: 'transitionend'<\/p><p>            };<\/p><p>            Object.keys(transEndEventNames_1).forEach(function (key) {<\/p><p>                if (_this.getStyle(element_1, key) != null) {<\/p><p>                    _this._transitionEnd = transEndEventNames_1[key];<\/p><p>                }<\/p><p>            });<\/p><p>        }<\/p><p>        catch (e) {<\/p><p>            _this._animationPrefix = null;<\/p><p>            _this._transitionEnd = null;<\/p><p>        }<\/p><p>        return _this;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    GenericBrowserDomAdapter.prototype.getDistributedNodes = function (el) { return ((el)).getDistributedNodes(); };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @param {?} baseUrl<\/p><p>     * @param {?} href<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    GenericBrowserDomAdapter.prototype.resolveAndSetHref = function (el, baseUrl, href) {<\/p><p>        el.href = href == null ? baseUrl : baseUrl + '/../' + href;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    GenericBrowserDomAdapter.prototype.supportsDOMEvents = function () { return true; };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function () {<\/p><p>        return typeof ((document.body)).createShadowRoot === 'function';<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    GenericBrowserDomAdapter.prototype.getAnimationPrefix = function () { return this._animationPrefix ? this._animationPrefix : ''; };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    GenericBrowserDomAdapter.prototype.getTransitionEnd = function () { return this._transitionEnd ? this._transitionEnd : ''; };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    GenericBrowserDomAdapter.prototype.supportsAnimation = function () {<\/p><p>        return this._animationPrefix != null && this._transitionEnd != null;<\/p><p>    };<\/p><p>    return GenericBrowserDomAdapter;<\/p><p>}(DomAdapter));<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var _attrToPropMap = {<\/p><p>    'class': 'className',<\/p><p>    'innerHtml': 'innerHTML',<\/p><p>    'readonly': 'readOnly',<\/p><p>    'tabindex': 'tabIndex',<\/p><p>};<\/p><p>var DOM_KEY_LOCATION_NUMPAD = 3;<\/p><p>// Map to convert some key or keyIdentifier values to what will be returned by getEventKey<\/p><p>var _keyMap = {<\/p><p>    // The following values are here for cross-browser compatibility and to match the W3C standard<\/p><p>    // cf http://www.w3.org/TR/DOM-Level-3-Events-key/<\/p><p>    '\\b': 'Backspace',<\/p><p>    '\\t': 'Tab',<\/p><p>    '\\x7F': 'Delete',<\/p><p>    '\\x1B': 'Escape',<\/p><p>    'Del': 'Delete',<\/p><p>    'Esc': 'Escape',<\/p><p>    'Left': 'ArrowLeft',<\/p><p>    'Right': 'ArrowRight',<\/p><p>    'Up': 'ArrowUp',<\/p><p>    'Down': 'ArrowDown',<\/p><p>    'Menu': 'ContextMenu',<\/p><p>    'Scroll': 'ScrollLock',<\/p><p>    'Win': 'OS'<\/p><p>};<\/p><p>// There is a bug in Chrome for numeric keypad keys:<\/p><p>// https://code.google.com/p/chromium/issues/detail?id=155654<\/p><p>// 1, 2, 3 ... are reported as A, B, C ...<\/p><p>var _chromeNumKeyPadMap = {<\/p><p>    'A': '1',<\/p><p>    'B': '2',<\/p><p>    'C': '3',<\/p><p>    'D': '4',<\/p><p>    'E': '5',<\/p><p>    'F': '6',<\/p><p>    'G': '7',<\/p><p>    'H': '8',<\/p><p>    'I': '9',<\/p><p>    'J': '*',<\/p><p>    'K': '+',<\/p><p>    'M': '-',<\/p><p>    'N': '.',<\/p><p>    'O': '/',<\/p><p>    '\\x60': '0',<\/p><p>    '\\x90': 'NumLock'<\/p><p>};<\/p><p>var nodeContains;<\/p><p>if (__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ɵglobal\"]['Node']) {<\/p><p>    nodeContains = __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ɵglobal\"]['Node'].prototype.contains || function (node) {<\/p><p>        return !!(this.compareDocumentPosition(node) & 16);<\/p><p>    };<\/p><p>}<\/p><p>var BrowserDomAdapter = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](BrowserDomAdapter, _super);<\/p><p>    function BrowserDomAdapter() {<\/p><p>        return _super !== null && _super.apply(this, arguments) || this;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} templateHtml<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.parse = function (templateHtml) { throw new Error('parse not implemented'); };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.makeCurrent = function () { setRootDomAdapter(new BrowserDomAdapter()); };<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @param {?} name<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.hasProperty = function (element, name) { return name in element; };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @param {?} name<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.setProperty = function (el, name, value) { ((el))[name] = value; };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @param {?} name<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.getProperty = function (el, name) { return ((el))[name]; };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @param {?} methodName<\/p><p>     * @param {?} args<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.invoke = function (el, methodName, args) { ((el))[methodName].apply(((el)), args); };<\/p><p>    /**<\/p><p>     * @param {?} error<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.logError = function (error) {<\/p><p>        if (window.console) {<\/p><p>            if (console.error) {<\/p><p>                console.error(error);<\/p><p>            }<\/p><p>            else {<\/p><p>                console.log(error);<\/p><p>            }<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} error<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.log = function (error) {<\/p><p>        if (window.console) {<\/p><p>            window.console.log && window.console.log(error);<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} error<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.logGroup = function (error) {<\/p><p>        if (window.console) {<\/p><p>            window.console.group && window.console.group(error);<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.logGroupEnd = function () {<\/p><p>        if (window.console) {<\/p><p>            window.console.groupEnd && window.console.groupEnd();<\/p><p>        }<\/p><p>    };<\/p><p>    Object.defineProperty(BrowserDomAdapter.prototype, \"attrToPropMap\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return _attrToPropMap; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    /**<\/p><p>     * @param {?} nodeA<\/p><p>     * @param {?} nodeB<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.contains = function (nodeA, nodeB) { return nodeContains.call(nodeA, nodeB); };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @param {?} selector<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.querySelector = function (el, selector) { return el.querySelector(selector); };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @param {?} selector<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.querySelectorAll = function (el, selector) { return el.querySelectorAll(selector); };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @param {?} evt<\/p><p>     * @param {?} listener<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.on = function (el, evt, listener) { el.addEventListener(evt, listener, false); };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @param {?} evt<\/p><p>     * @param {?} listener<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.onAndCancel = function (el, evt, listener) {<\/p><p>        el.addEventListener(evt, listener, false);<\/p><p>        // Needed to follow Dart's subscription semantic, until fix of<\/p><p>        // https://code.google.com/p/dart/issues/detail?id=17406<\/p><p>        return function () { el.removeEventListener(evt, listener, false); };<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @param {?} evt<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.dispatchEvent = function (el, evt) { el.dispatchEvent(evt); };<\/p><p>    /**<\/p><p>     * @param {?} eventType<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.createMouseEvent = function (eventType) {<\/p><p>        var /** @type {?} */ evt = document.createEvent('MouseEvent');<\/p><p>        evt.initEvent(eventType, true, true);<\/p><p>        return evt;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} eventType<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.createEvent = function (eventType) {<\/p><p>        var /** @type {?} */ evt = document.createEvent('Event');<\/p><p>        evt.initEvent(eventType, true, true);<\/p><p>        return evt;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} evt<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.preventDefault = function (evt) {<\/p><p>        evt.preventDefault();<\/p><p>        evt.returnValue = false;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} evt<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.isPrevented = function (evt) {<\/p><p>        return evt.defaultPrevented || evt.returnValue != null && !evt.returnValue;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.getInnerHTML = function (el) { return el.innerHTML; };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.getTemplateContent = function (el) {<\/p><p>        return 'content' in el && el instanceof HTMLTemplateElement ? el.content : null;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.getOuterHTML = function (el) { return el.outerHTML; };<\/p><p>    /**<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.nodeName = function (node) { return node.nodeName; };<\/p><p>    /**<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.nodeValue = function (node) { return node.nodeValue; };<\/p><p>    /**<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.type = function (node) { return node.type; };<\/p><p>    /**<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.content = function (node) {<\/p><p>        if (this.hasProperty(node, 'content')) {<\/p><p>            return ((node)).content;<\/p><p>        }<\/p><p>        else {<\/p><p>            return node;<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.firstChild = function (el) { return el.firstChild; };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.nextSibling = function (el) { return el.nextSibling; };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.parentElement = function (el) { return el.parentNode; };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.childNodes = function (el) { return el.childNodes; };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.childNodesAsList = function (el) {<\/p><p>        var /** @type {?} */ childNodes = el.childNodes;<\/p><p>        var /** @type {?} */ res = new Array(childNodes.length);<\/p><p>        for (var /** @type {?} */ i = 0; i < childNodes.length; i++) {<\/p><p>            res[i] = childNodes[i];<\/p><p>        }<\/p><p>        return res;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.clearNodes = function (el) {<\/p><p>        while (el.firstChild) {<\/p><p>            el.removeChild(el.firstChild);<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.appendChild = function (el, node) { el.appendChild(node); };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.removeChild = function (el, node) { el.removeChild(node); };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @param {?} newChild<\/p><p>     * @param {?} oldChild<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.replaceChild = function (el, newChild, oldChild) { el.replaceChild(newChild, oldChild); };<\/p><p>    /**<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.remove = function (node) {<\/p><p>        if (node.parentNode) {<\/p><p>            node.parentNode.removeChild(node);<\/p><p>        }<\/p><p>        return node;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} parent<\/p><p>     * @param {?} ref<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.insertBefore = function (parent, ref, node) { parent.insertBefore(node, ref); };<\/p><p>    /**<\/p><p>     * @param {?} parent<\/p><p>     * @param {?} ref<\/p><p>     * @param {?} nodes<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.insertAllBefore = function (parent, ref, nodes) {<\/p><p>        nodes.forEach(function (n) { return parent.insertBefore(n, ref); });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} parent<\/p><p>     * @param {?} ref<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.insertAfter = function (parent, ref, node) { parent.insertBefore(node, ref.nextSibling); };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.setInnerHTML = function (el, value) { el.innerHTML = value; };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.getText = function (el) { return el.textContent; };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.setText = function (el, value) { el.textContent = value; };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.getValue = function (el) { return el.value; };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.setValue = function (el, value) { el.value = value; };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.getChecked = function (el) { return el.checked; };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.setChecked = function (el, value) { el.checked = value; };<\/p><p>    /**<\/p><p>     * @param {?} text<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.createComment = function (text) { return document.createComment(text); };<\/p><p>    /**<\/p><p>     * @param {?} html<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.createTemplate = function (html) {<\/p><p>        var /** @type {?} */ t = document.createElement('template');<\/p><p>        t.innerHTML = html;<\/p><p>        return t;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} tagName<\/p><p>     * @param {?=} doc<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.createElement = function (tagName, doc) {<\/p><p>        if (doc === void 0) { doc = document; }<\/p><p>        return doc.createElement(tagName);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} ns<\/p><p>     * @param {?} tagName<\/p><p>     * @param {?=} doc<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.createElementNS = function (ns, tagName, doc) {<\/p><p>        if (doc === void 0) { doc = document; }<\/p><p>        return doc.createElementNS(ns, tagName);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} text<\/p><p>     * @param {?=} doc<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.createTextNode = function (text, doc) {<\/p><p>        if (doc === void 0) { doc = document; }<\/p><p>        return doc.createTextNode(text);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} attrName<\/p><p>     * @param {?} attrValue<\/p><p>     * @param {?=} doc<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) {<\/p><p>        if (doc === void 0) { doc = document; }<\/p><p>        var /** @type {?} */ el = (doc.createElement('SCRIPT'));<\/p><p>        el.setAttribute(attrName, attrValue);<\/p><p>        return el;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} css<\/p><p>     * @param {?=} doc<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.createStyleElement = function (css, doc) {<\/p><p>        if (doc === void 0) { doc = document; }<\/p><p>        var /** @type {?} */ style = (doc.createElement('style'));<\/p><p>        this.appendChild(style, this.createTextNode(css));<\/p><p>        return style;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.createShadowRoot = function (el) { return ((el)).createShadowRoot(); };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.getShadowRoot = function (el) { return ((el)).shadowRoot; };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.getHost = function (el) { return ((el)).host; };<\/p><p>    /**<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.clone = function (node) { return node.cloneNode(true); };<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @param {?} name<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.getElementsByClassName = function (element, name) {<\/p><p>        return element.getElementsByClassName(name);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @param {?} name<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.getElementsByTagName = function (element, name) {<\/p><p>        return element.getElementsByTagName(name);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.classList = function (element) { return Array.prototype.slice.call(element.classList, 0); };<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @param {?} className<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.addClass = function (element, className) { element.classList.add(className); };<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @param {?} className<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.removeClass = function (element, className) { element.classList.remove(className); };<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @param {?} className<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.hasClass = function (element, className) {<\/p><p>        return element.classList.contains(className);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @param {?} styleName<\/p><p>     * @param {?} styleValue<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.setStyle = function (element, styleName, styleValue) {<\/p><p>        element.style[styleName] = styleValue;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @param {?} stylename<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.removeStyle = function (element, stylename) {<\/p><p>        // IE requires '' instead of null<\/p><p>        // see https://github.com/angular/angular/issues/7916<\/p><p>        element.style[stylename] = '';<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @param {?} stylename<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.getStyle = function (element, stylename) { return element.style[stylename]; };<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @param {?} styleName<\/p><p>     * @param {?=} styleValue<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.hasStyle = function (element, styleName, styleValue) {<\/p><p>        var /** @type {?} */ value = this.getStyle(element, styleName) || '';<\/p><p>        return styleValue ? value == styleValue : value.length > 0;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.tagName = function (element) { return element.tagName; };<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.attributeMap = function (element) {<\/p><p>        var /** @type {?} */ res = new Map();<\/p><p>        var /** @type {?} */ elAttrs = element.attributes;<\/p><p>        for (var /** @type {?} */ i = 0; i < elAttrs.length; i++) {<\/p><p>            var /** @type {?} */ attrib = elAttrs[i];<\/p><p>            res.set(attrib.name, attrib.value);<\/p><p>        }<\/p><p>        return res;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @param {?} attribute<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.hasAttribute = function (element, attribute) {<\/p><p>        return element.hasAttribute(attribute);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @param {?} ns<\/p><p>     * @param {?} attribute<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) {<\/p><p>        return element.hasAttributeNS(ns, attribute);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @param {?} attribute<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.getAttribute = function (element, attribute) {<\/p><p>        return element.getAttribute(attribute);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @param {?} ns<\/p><p>     * @param {?} name<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.getAttributeNS = function (element, ns, name) {<\/p><p>        return element.getAttributeNS(ns, name);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @param {?} name<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.setAttribute = function (element, name, value) { element.setAttribute(name, value); };<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @param {?} ns<\/p><p>     * @param {?} name<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.setAttributeNS = function (element, ns, name, value) {<\/p><p>        element.setAttributeNS(ns, name, value);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @param {?} attribute<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.removeAttribute = function (element, attribute) { element.removeAttribute(attribute); };<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @param {?} ns<\/p><p>     * @param {?} name<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.removeAttributeNS = function (element, ns, name) {<\/p><p>        element.removeAttributeNS(ns, name);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.templateAwareRoot = function (el) { return this.isTemplateElement(el) ? this.content(el) : el; };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.createHtmlDocument = function () {<\/p><p>        return document.implementation.createHTMLDocument('fakeTitle');<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.getBoundingClientRect = function (el) {<\/p><p>        try {<\/p><p>            return el.getBoundingClientRect();<\/p><p>        }<\/p><p>        catch (e) {<\/p><p>            return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} doc<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.getTitle = function (doc) { return document.title; };<\/p><p>    /**<\/p><p>     * @param {?} doc<\/p><p>     * @param {?} newTitle<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.setTitle = function (doc, newTitle) { document.title = newTitle || ''; };<\/p><p>    /**<\/p><p>     * @param {?} n<\/p><p>     * @param {?} selector<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.elementMatches = function (n, selector) {<\/p><p>        if (n instanceof HTMLElement) {<\/p><p>            return n.matches && n.matches(selector) ||<\/p><p>                n.msMatchesSelector && n.msMatchesSelector(selector) ||<\/p><p>                n.webkitMatchesSelector && n.webkitMatchesSelector(selector);<\/p><p>        }<\/p><p>        return false;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.isTemplateElement = function (el) {<\/p><p>        return el instanceof HTMLElement && el.nodeName == 'TEMPLATE';<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.isTextNode = function (node) { return node.nodeType === Node.TEXT_NODE; };<\/p><p>    /**<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.isCommentNode = function (node) { return node.nodeType === Node.COMMENT_NODE; };<\/p><p>    /**<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.isElementNode = function (node) { return node.nodeType === Node.ELEMENT_NODE; };<\/p><p>    /**<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.hasShadowRoot = function (node) {<\/p><p>        return node.shadowRoot != null && node instanceof HTMLElement;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.isShadowRoot = function (node) { return node instanceof DocumentFragment; };<\/p><p>    /**<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.importIntoDoc = function (node) { return document.importNode(this.templateAwareRoot(node), true); };<\/p><p>    /**<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.adoptNode = function (node) { return document.adoptNode(node); };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.getHref = function (el) { return ((el)).href; };<\/p><p>    /**<\/p><p>     * @param {?} event<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.getEventKey = function (event) {<\/p><p>        var /** @type {?} */ key = event.key;<\/p><p>        if (key == null) {<\/p><p>            key = event.keyIdentifier;<\/p><p>            // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and<\/p><p>            // Safari cf<\/p><p>            // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces<\/p><p>            if (key == null) {<\/p><p>                return 'Unidentified';<\/p><p>            }<\/p><p>            if (key.startsWith('U+')) {<\/p><p>                key = String.fromCharCode(parseInt(key.substring(2), 16));<\/p><p>                if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {<\/p><p>                    // There is a bug in Chrome for numeric keypad keys:<\/p><p>                    // https://code.google.com/p/chromium/issues/detail?id=155654<\/p><p>                    // 1, 2, 3 ... are reported as A, B, C ...<\/p><p>                    key = ((_chromeNumKeyPadMap))[key];<\/p><p>                }<\/p><p>            }<\/p><p>        }<\/p><p>        return _keyMap[key] || key;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} doc<\/p><p>     * @param {?} target<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.getGlobalEventTarget = function (doc, target) {<\/p><p>        if (target === 'window') {<\/p><p>            return window;<\/p><p>        }<\/p><p>        if (target === 'document') {<\/p><p>            return document;<\/p><p>        }<\/p><p>        if (target === 'body') {<\/p><p>            return document.body;<\/p><p>        }<\/p><p>        return null;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.getHistory = function () { return window.history; };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.getLocation = function () { return window.location; };<\/p><p>    /**<\/p><p>     * @param {?} doc<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.getBaseHref = function (doc) {<\/p><p>        var /** @type {?} */ href = getBaseElementHref();<\/p><p>        return href == null ? null : relativePath(href);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.resetBaseElement = function () { baseElement = null; };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.getUserAgent = function () { return window.navigator.userAgent; };<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @param {?} name<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.setData = function (element, name, value) {<\/p><p>        this.setAttribute(element, 'data-' + name, value);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @param {?} name<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.getData = function (element, name) {<\/p><p>        return this.getAttribute(element, 'data-' + name);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.getComputedStyle = function (element) { return getComputedStyle(element); };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.supportsWebAnimation = function () {<\/p><p>        return typeof ((Element)).prototype['animate'] === 'function';<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.performanceNow = function () {<\/p><p>        // performance.now() is not available in all browsers, see<\/p><p>        // http://caniuse.com/#search=performance.now<\/p><p>        return window.performance && window.performance.now ? window.performance.now() :<\/p><p>            new Date().getTime();<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.supportsCookies = function () { return true; };<\/p><p>    /**<\/p><p>     * @param {?} name<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.getCookie = function (name) { return Object(__WEBPACK_IMPORTED_MODULE_1__angular_common__[\"ɵparseCookieValue\"])(document.cookie, name); };<\/p><p>    /**<\/p><p>     * @param {?} name<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserDomAdapter.prototype.setCookie = function (name, value) {<\/p><p>        // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does<\/p><p>        // not clear other cookies.<\/p><p>        document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);<\/p><p>    };<\/p><p>    return BrowserDomAdapter;<\/p><p>}(GenericBrowserDomAdapter));<\/p><p>var baseElement = null;<\/p><p>/**<\/p><p> * @return {?}<\/p><p> */<\/p><p>function getBaseElementHref() {<\/p><p>    if (!baseElement) {<\/p><p>        baseElement = ((document.querySelector('base')));<\/p><p>        if (!baseElement) {<\/p><p>            return null;<\/p><p>        }<\/p><p>    }<\/p><p>    return baseElement.getAttribute('href');<\/p><p>}<\/p><p>// based on urlUtils.js in AngularJS 1<\/p><p>var urlParsingNode;<\/p><p>/**<\/p><p> * @param {?} url<\/p><p> * @return {?}<\/p><p> */<\/p><p>function relativePath(url) {<\/p><p>    if (!urlParsingNode) {<\/p><p>        urlParsingNode = document.createElement('a');<\/p><p>    }<\/p><p>    urlParsingNode.setAttribute('href', url);<\/p><p>    return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :<\/p><p>        '/' + urlParsingNode.pathname;<\/p><p>}<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * A DI Token representing the main rendering context. In a browser this is the DOM Document.<\/p><p> *<\/p><p> * Note: Document might not be available in the Application Context when Application and Rendering<\/p><p> * Contexts are not the same (e.g. when running the application into a Web Worker).<\/p><p> *<\/p><p> * @deprecated import from `\\@angular/common` instead.<\/p><p> */<\/p><p>var DOCUMENT$1 = __WEBPACK_IMPORTED_MODULE_1__angular_common__[\"DOCUMENT\"];<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> * @return {?}<\/p><p> */<\/p><p>function supportsState() {<\/p><p>    return !!window.history.pushState;<\/p><p>}<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * `PlatformLocation` encapsulates all of the direct calls to platform APIs.<\/p><p> * This class should not be used directly by an application developer. Instead, use<\/p><p> * {\\@link Location}.<\/p><p> */<\/p><p>var BrowserPlatformLocation = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](BrowserPlatformLocation, _super);<\/p><p>    /**<\/p><p>     * @param {?} _doc<\/p><p>     */<\/p><p>    function BrowserPlatformLocation(_doc) {<\/p><p>        var _this = _super.call(this) || this;<\/p><p>        _this._doc = _doc;<\/p><p>        _this._init();<\/p><p>        return _this;<\/p><p>    }<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserPlatformLocation.prototype._init = function () {<\/p><p>        this._location = getDOM().getLocation();<\/p><p>        this._history = getDOM().getHistory();<\/p><p>    };<\/p><p>    Object.defineProperty(BrowserPlatformLocation.prototype, \"location\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._location; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function () { return ((getDOM().getBaseHref(this._doc))); };<\/p><p>    /**<\/p><p>     * @param {?} fn<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserPlatformLocation.prototype.onPopState = function (fn) {<\/p><p>        getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} fn<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserPlatformLocation.prototype.onHashChange = function (fn) {<\/p><p>        getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);<\/p><p>    };<\/p><p>    Object.defineProperty(BrowserPlatformLocation.prototype, \"pathname\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._location.pathname; },<\/p><p>        /**<\/p><p>         * @param {?} newPath<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        set: function (newPath) { this._location.pathname = newPath; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(BrowserPlatformLocation.prototype, \"search\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._location.search; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(BrowserPlatformLocation.prototype, \"hash\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._location.hash; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    /**<\/p><p>     * @param {?} state<\/p><p>     * @param {?} title<\/p><p>     * @param {?} url<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserPlatformLocation.prototype.pushState = function (state, title, url) {<\/p><p>        if (supportsState()) {<\/p><p>            this._history.pushState(state, title, url);<\/p><p>        }<\/p><p>        else {<\/p><p>            this._location.hash = url;<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} state<\/p><p>     * @param {?} title<\/p><p>     * @param {?} url<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserPlatformLocation.prototype.replaceState = function (state, title, url) {<\/p><p>        if (supportsState()) {<\/p><p>            this._history.replaceState(state, title, url);<\/p><p>        }<\/p><p>        else {<\/p><p>            this._location.hash = url;<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserPlatformLocation.prototype.forward = function () { this._history.forward(); };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserPlatformLocation.prototype.back = function () { this._history.back(); };<\/p><p>    return BrowserPlatformLocation;<\/p><p>}(__WEBPACK_IMPORTED_MODULE_1__angular_common__[\"PlatformLocation\"]));<\/p><p>BrowserPlatformLocation.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injectable\"] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>BrowserPlatformLocation.ctorParameters = function () { return [<\/p><p>    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Inject\"], args: [DOCUMENT$1,] },] },<\/p><p>]; };<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * A service that can be used to get and add meta tags.<\/p><p> *<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var Meta = (function () {<\/p><p>    /**<\/p><p>     * @param {?} _doc<\/p><p>     */<\/p><p>    function Meta(_doc) {<\/p><p>        this._doc = _doc;<\/p><p>        this._dom = getDOM();<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} tag<\/p><p>     * @param {?=} forceCreation<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Meta.prototype.addTag = function (tag, forceCreation) {<\/p><p>        if (forceCreation === void 0) { forceCreation = false; }<\/p><p>        if (!tag)<\/p><p>            return null;<\/p><p>        return this._getOrCreateElement(tag, forceCreation);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} tags<\/p><p>     * @param {?=} forceCreation<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Meta.prototype.addTags = function (tags, forceCreation) {<\/p><p>        var _this = this;<\/p><p>        if (forceCreation === void 0) { forceCreation = false; }<\/p><p>        if (!tags)<\/p><p>            return [];<\/p><p>        return tags.reduce(function (result, tag) {<\/p><p>            if (tag) {<\/p><p>                result.push(_this._getOrCreateElement(tag, forceCreation));<\/p><p>            }<\/p><p>            return result;<\/p><p>        }, []);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} attrSelector<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Meta.prototype.getTag = function (attrSelector) {<\/p><p>        if (!attrSelector)<\/p><p>            return null;<\/p><p>        return this._dom.querySelector(this._doc, \"meta[\" + attrSelector + \"]\");<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} attrSelector<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Meta.prototype.getTags = function (attrSelector) {<\/p><p>        if (!attrSelector)<\/p><p>            return [];<\/p><p>        var /** @type {?} */ list /*NodeList*/ = this._dom.querySelectorAll(this._doc, \"meta[\" + attrSelector + \"]\");<\/p><p>        return list ? [].slice.call(list) : [];<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} tag<\/p><p>     * @param {?=} selector<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Meta.prototype.updateTag = function (tag, selector) {<\/p><p>        if (!tag)<\/p><p>            return null;<\/p><p>        selector = selector || this._parseSelector(tag);<\/p><p>        var /** @type {?} */ meta = ((this.getTag(selector)));<\/p><p>        if (meta) {<\/p><p>            return this._setMetaElementAttributes(tag, meta);<\/p><p>        }<\/p><p>        return this._getOrCreateElement(tag, true);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} attrSelector<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Meta.prototype.removeTag = function (attrSelector) { this.removeTagElement(/** @type {?} */ ((this.getTag(attrSelector)))); };<\/p><p>    /**<\/p><p>     * @param {?} meta<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Meta.prototype.removeTagElement = function (meta) {<\/p><p>        if (meta) {<\/p><p>            this._dom.remove(meta);<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} meta<\/p><p>     * @param {?=} forceCreation<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Meta.prototype._getOrCreateElement = function (meta, forceCreation) {<\/p><p>        if (forceCreation === void 0) { forceCreation = false; }<\/p><p>        if (!forceCreation) {<\/p><p>            var /** @type {?} */ selector = this._parseSelector(meta);<\/p><p>            var /** @type {?} */ elem = ((this.getTag(selector)));<\/p><p>            // It's allowed to have multiple elements with the same name so it's not enough to<\/p><p>            // just check that element with the same name already present on the page. We also need to<\/p><p>            // check if element has tag attributes<\/p><p>            if (elem && this._containsAttributes(meta, elem))<\/p><p>                return elem;<\/p><p>        }<\/p><p>        var /** @type {?} */ element = (this._dom.createElement('meta'));<\/p><p>        this._setMetaElementAttributes(meta, element);<\/p><p>        var /** @type {?} */ head = this._dom.getElementsByTagName(this._doc, 'head')[0];<\/p><p>        this._dom.appendChild(head, element);<\/p><p>        return element;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} tag<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Meta.prototype._setMetaElementAttributes = function (tag, el) {<\/p><p>        var _this = this;<\/p><p>        Object.keys(tag).forEach(function (prop) { return _this._dom.setAttribute(el, prop, tag[prop]); });<\/p><p>        return el;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} tag<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Meta.prototype._parseSelector = function (tag) {<\/p><p>        var /** @type {?} */ attr = tag.name ? 'name' : 'property';<\/p><p>        return attr + \"=\\\"\" + tag[attr] + \"\\\"\";<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} tag<\/p><p>     * @param {?} elem<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Meta.prototype._containsAttributes = function (tag, elem) {<\/p><p>        var _this = this;<\/p><p>        return Object.keys(tag).every(function (key) { return _this._dom.getAttribute(elem, key) === tag[key]; });<\/p><p>    };<\/p><p>    return Meta;<\/p><p>}());<\/p><p>Meta.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injectable\"] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>Meta.ctorParameters = function () { return [<\/p><p>    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Inject\"], args: [DOCUMENT$1,] },] },<\/p><p>]; };<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * An id that identifies a particular application being bootstrapped, that should<\/p><p> * match across the client/server boundary.<\/p><p> */<\/p><p>var TRANSITION_ID = new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"InjectionToken\"]('TRANSITION_ID');<\/p><p>/**<\/p><p> * @param {?} transitionId<\/p><p> * @param {?} document<\/p><p> * @param {?} injector<\/p><p> * @return {?}<\/p><p> */<\/p><p>function appInitializerFactory(transitionId, document, injector) {<\/p><p>    return function () {<\/p><p>        // Wait for all application initializers to be completed before removing the styles set by<\/p><p>        // the server.<\/p><p>        injector.get(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ApplicationInitStatus\"]).donePromise.then(function () {<\/p><p>            var /** @type {?} */ dom = getDOM();<\/p><p>            var /** @type {?} */ styles = Array.prototype.slice.apply(dom.querySelectorAll(document, \"style[ng-transition]\"));<\/p><p>            styles.filter(function (el) { return dom.getAttribute(el, 'ng-transition') === transitionId; })<\/p><p>                .forEach(function (el) { return dom.remove(el); });<\/p><p>        });<\/p><p>    };<\/p><p>}<\/p><p>var SERVER_TRANSITION_PROVIDERS = [<\/p><p>    {<\/p><p>        provide: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"APP_INITIALIZER\"],<\/p><p>        useFactory: appInitializerFactory,<\/p><p>        deps: [TRANSITION_ID, DOCUMENT$1, __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injector\"]],<\/p><p>        multi: true<\/p><p>    },<\/p><p>];<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var BrowserGetTestability = (function () {<\/p><p>    function BrowserGetTestability() {<\/p><p>    }<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserGetTestability.init = function () { Object(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"setTestabilityGetter\"])(new BrowserGetTestability()); };<\/p><p>    /**<\/p><p>     * @param {?} registry<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserGetTestability.prototype.addToWindow = function (registry) {<\/p><p>        __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ɵglobal\"]['getAngularTestability'] = function (elem, findInAncestors) {<\/p><p>            if (findInAncestors === void 0) { findInAncestors = true; }<\/p><p>            var /** @type {?} */ testability = registry.findTestabilityInTree(elem, findInAncestors);<\/p><p>            if (testability == null) {<\/p><p>                throw new Error('Could not find testability for element.');<\/p><p>            }<\/p><p>            return testability;<\/p><p>        };<\/p><p>        __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ɵglobal\"]['getAllAngularTestabilities'] = function () { return registry.getAllTestabilities(); };<\/p><p>        __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ɵglobal\"]['getAllAngularRootElements'] = function () { return registry.getAllRootElements(); };<\/p><p>        var /** @type {?} */ whenAllStable = function (callback /** TODO #9100 */) {<\/p><p>            var /** @type {?} */ testabilities = __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ɵglobal\"]['getAllAngularTestabilities']();<\/p><p>            var /** @type {?} */ count = testabilities.length;<\/p><p>            var /** @type {?} */ didWork = false;<\/p><p>            var /** @type {?} */ decrement = function (didWork_ /** TODO #9100 */) {<\/p><p>                didWork = didWork || didWork_;<\/p><p>                count--;<\/p><p>                if (count == 0) {<\/p><p>                    callback(didWork);<\/p><p>                }<\/p><p>            };<\/p><p>            testabilities.forEach(function (testability /** TODO #9100 */) {<\/p><p>                testability.whenStable(decrement);<\/p><p>            });<\/p><p>        };<\/p><p>        if (!__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ɵglobal\"]['frameworkStabilizers']) {<\/p><p>            __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ɵglobal\"]['frameworkStabilizers'] = [];<\/p><p>        }<\/p><p>        __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ɵglobal\"]['frameworkStabilizers'].push(whenAllStable);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} registry<\/p><p>     * @param {?} elem<\/p><p>     * @param {?} findInAncestors<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {<\/p><p>        if (elem == null) {<\/p><p>            return null;<\/p><p>        }<\/p><p>        var /** @type {?} */ t = registry.getTestability(elem);<\/p><p>        if (t != null) {<\/p><p>            return t;<\/p><p>        }<\/p><p>        else if (!findInAncestors) {<\/p><p>            return null;<\/p><p>        }<\/p><p>        if (getDOM().isShadowRoot(elem)) {<\/p><p>            return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);<\/p><p>        }<\/p><p>        return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);<\/p><p>    };<\/p><p>    return BrowserGetTestability;<\/p><p>}());<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * A service that can be used to get and set the title of a current HTML document.<\/p><p> *<\/p><p> * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)<\/p><p> * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements<\/p><p> * (representing the `<title>` tag). Instead, this service can be used to set and get the current<\/p><p> * title value.<\/p><p> *<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var Title = (function () {<\/p><p>    /**<\/p><p>     * @param {?} _doc<\/p><p>     */<\/p><p>    function Title(_doc) {<\/p><p>        this._doc = _doc;<\/p><p>    }<\/p><p>    /**<\/p><p>     * Get the title of the current HTML document.<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Title.prototype.getTitle = function () { return getDOM().getTitle(this._doc); };<\/p><p>    /**<\/p><p>     * Set the title of the current HTML document.<\/p><p>     * @param {?} newTitle<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Title.prototype.setTitle = function (newTitle) { getDOM().setTitle(this._doc, newTitle); };<\/p><p>    return Title;<\/p><p>}());<\/p><p>Title.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injectable\"] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>Title.ctorParameters = function () { return [<\/p><p>    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Inject\"], args: [DOCUMENT$1,] },] },<\/p><p>]; };<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * @param {?} input<\/p><p> * @return {?}<\/p><p> */<\/p><p>/**<\/p><p> * @param {?} input<\/p><p> * @return {?}<\/p><p> */<\/p><p>/**<\/p><p> * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if<\/p><p> * `name` is `'probe'`.<\/p><p> * @param {?} name Name under which it will be exported. Keep in mind this will be a property of the<\/p><p> * global `ng` object.<\/p><p> * @param {?} value The value to export.<\/p><p> * @return {?}<\/p><p> */<\/p><p>function exportNgVar(name, value) {<\/p><p>    if (!ng) {<\/p><p>        __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ɵglobal\"]['ng'] = ng = ((__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ɵglobal\"]['ng'])) || {};<\/p><p>    }<\/p><p>    ng[name] = value;<\/p><p>}<\/p><p>var ng;<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var CORE_TOKENS = {<\/p><p>    'ApplicationRef': __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ApplicationRef\"],<\/p><p>    'NgZone': __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"NgZone\"],<\/p><p>};<\/p><p>var INSPECT_GLOBAL_NAME = 'probe';<\/p><p>var CORE_TOKENS_GLOBAL_NAME = 'coreTokens';<\/p><p>/**<\/p><p> * Returns a {\\@link DebugElement} for the given native DOM element, or<\/p><p> * null if the given native element does not have an Angular view associated<\/p><p> * with it.<\/p><p> * @param {?} element<\/p><p> * @return {?}<\/p><p> */<\/p><p>function inspectNativeElement(element) {<\/p><p>    return Object(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"getDebugNode\"])(element);<\/p><p>}<\/p><p>/**<\/p><p> * Deprecated. Use the one from '\\@angular/core'.<\/p><p> * @deprecated<\/p><p> */<\/p><p>var NgProbeToken$1 = (function () {<\/p><p>    /**<\/p><p>     * @param {?} name<\/p><p>     * @param {?} token<\/p><p>     */<\/p><p>    function NgProbeToken$1(name, token) {<\/p><p>        this.name = name;<\/p><p>        this.token = token;<\/p><p>    }<\/p><p>    return NgProbeToken$1;<\/p><p>}());<\/p><p>/**<\/p><p> * @param {?} extraTokens<\/p><p> * @param {?} coreTokens<\/p><p> * @return {?}<\/p><p> */<\/p><p>function _createNgProbe(extraTokens, coreTokens) {<\/p><p>    var /** @type {?} */ tokens = (extraTokens || []).concat(coreTokens || []);<\/p><p>    exportNgVar(INSPECT_GLOBAL_NAME, inspectNativeElement);<\/p><p>    exportNgVar(CORE_TOKENS_GLOBAL_NAME, Object.assign({}, CORE_TOKENS, _ngProbeTokensToMap(tokens || [])));<\/p><p>    return function () { return inspectNativeElement; };<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} tokens<\/p><p> * @return {?}<\/p><p> */<\/p><p>function _ngProbeTokensToMap(tokens) {<\/p><p>    return tokens.reduce(function (prev, t) { return (prev[t.name] = t.token, prev); }, {});<\/p><p>}<\/p><p>/**<\/p><p> * Providers which support debugging Angular applications (e.g. via `ng.probe`).<\/p><p> */<\/p><p>var ELEMENT_PROBE_PROVIDERS = [<\/p><p>    {<\/p><p>        provide: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"APP_INITIALIZER\"],<\/p><p>        useFactory: _createNgProbe,<\/p><p>        deps: [<\/p><p>            [NgProbeToken$1, new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Optional\"]()],<\/p><p>            [__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"NgProbeToken\"], new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Optional\"]()],<\/p><p>        ],<\/p><p>        multi: true,<\/p><p>    },<\/p><p>];<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * \\@stable<\/p><p> */<\/p><p>var EVENT_MANAGER_PLUGINS = new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"InjectionToken\"]('EventManagerPlugins');<\/p><p>/**<\/p><p> * \\@stable<\/p><p> */<\/p><p>var EventManager = (function () {<\/p><p>    /**<\/p><p>     * @param {?} plugins<\/p><p>     * @param {?} _zone<\/p><p>     */<\/p><p>    function EventManager(plugins, _zone) {<\/p><p>        var _this = this;<\/p><p>        this._zone = _zone;<\/p><p>        this._eventNameToPlugin = new Map();<\/p><p>        plugins.forEach(function (p) { return p.manager = _this; });<\/p><p>        this._plugins = plugins.slice().reverse();<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @param {?} eventName<\/p><p>     * @param {?} handler<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    EventManager.prototype.addEventListener = function (element, eventName, handler) {<\/p><p>        var /** @type {?} */ plugin = this._findPluginFor(eventName);<\/p><p>        return plugin.addEventListener(element, eventName, handler);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} target<\/p><p>     * @param {?} eventName<\/p><p>     * @param {?} handler<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    EventManager.prototype.addGlobalEventListener = function (target, eventName, handler) {<\/p><p>        var /** @type {?} */ plugin = this._findPluginFor(eventName);<\/p><p>        return plugin.addGlobalEventListener(target, eventName, handler);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    EventManager.prototype.getZone = function () { return this._zone; };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @param {?} eventName<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    EventManager.prototype._findPluginFor = function (eventName) {<\/p><p>        var /** @type {?} */ plugin = this._eventNameToPlugin.get(eventName);<\/p><p>        if (plugin) {<\/p><p>            return plugin;<\/p><p>        }<\/p><p>        var /** @type {?} */ plugins = this._plugins;<\/p><p>        for (var /** @type {?} */ i = 0; i < plugins.length; i++) {<\/p><p>            var /** @type {?} */ plugin_1 = plugins[i];<\/p><p>            if (plugin_1.supports(eventName)) {<\/p><p>                this._eventNameToPlugin.set(eventName, plugin_1);<\/p><p>                return plugin_1;<\/p><p>            }<\/p><p>        }<\/p><p>        throw new Error(\"No event manager plugin found for event \" + eventName);<\/p><p>    };<\/p><p>    return EventManager;<\/p><p>}());<\/p><p>EventManager.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injectable\"] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>EventManager.ctorParameters = function () { return [<\/p><p>    { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Inject\"], args: [EVENT_MANAGER_PLUGINS,] },] },<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"NgZone\"], },<\/p><p>]; };<\/p><p>/**<\/p><p> * @abstract<\/p><p> */<\/p><p>var EventManagerPlugin = (function () {<\/p><p>    /**<\/p><p>     * @param {?} _doc<\/p><p>     */<\/p><p>    function EventManagerPlugin(_doc) {<\/p><p>        this._doc = _doc;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} eventName<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    EventManagerPlugin.prototype.supports = function (eventName) { };<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} element<\/p><p>     * @param {?} eventName<\/p><p>     * @param {?} handler<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    EventManagerPlugin.prototype.addEventListener = function (element, eventName, handler) { };<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @param {?} eventName<\/p><p>     * @param {?} handler<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    EventManagerPlugin.prototype.addGlobalEventListener = function (element, eventName, handler) {<\/p><p>        var /** @type {?} */ target = getDOM().getGlobalEventTarget(this._doc, element);<\/p><p>        if (!target) {<\/p><p>            throw new Error(\"Unsupported event target \" + target + \" for event \" + eventName);<\/p><p>        }<\/p><p>        return this.addEventListener(target, eventName, handler);<\/p><p>    };<\/p><p>    ;<\/p><p>    return EventManagerPlugin;<\/p><p>}());<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var SharedStylesHost = (function () {<\/p><p>    function SharedStylesHost() {<\/p><p>        /**<\/p><p>         * \\@internal<\/p><p>         */<\/p><p>        this._stylesSet = new Set();<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} styles<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    SharedStylesHost.prototype.addStyles = function (styles) {<\/p><p>        var _this = this;<\/p><p>        var /** @type {?} */ additions = new Set();<\/p><p>        styles.forEach(function (style) {<\/p><p>            if (!_this._stylesSet.has(style)) {<\/p><p>                _this._stylesSet.add(style);<\/p><p>                additions.add(style);<\/p><p>            }<\/p><p>        });<\/p><p>        this.onStylesAdded(additions);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} additions<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    SharedStylesHost.prototype.onStylesAdded = function (additions) { };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    SharedStylesHost.prototype.getAllStyles = function () { return Array.from(this._stylesSet); };<\/p><p>    return SharedStylesHost;<\/p><p>}());<\/p><p>SharedStylesHost.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injectable\"] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>SharedStylesHost.ctorParameters = function () { return []; };<\/p><p>var DomSharedStylesHost = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](DomSharedStylesHost, _super);<\/p><p>    /**<\/p><p>     * @param {?} _doc<\/p><p>     */<\/p><p>    function DomSharedStylesHost(_doc) {<\/p><p>        var _this = _super.call(this) || this;<\/p><p>        _this._doc = _doc;<\/p><p>        _this._hostNodes = new Set();<\/p><p>        _this._styleNodes = new Set();<\/p><p>        _this._hostNodes.add(_doc.head);<\/p><p>        return _this;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} styles<\/p><p>     * @param {?} host<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomSharedStylesHost.prototype._addStylesToHost = function (styles, host) {<\/p><p>        var _this = this;<\/p><p>        styles.forEach(function (style) {<\/p><p>            var /** @type {?} */ styleEl = _this._doc.createElement('style');<\/p><p>            styleEl.textContent = style;<\/p><p>            _this._styleNodes.add(host.appendChild(styleEl));<\/p><p>        });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} hostNode<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomSharedStylesHost.prototype.addHost = function (hostNode) {<\/p><p>        this._addStylesToHost(this._stylesSet, hostNode);<\/p><p>        this._hostNodes.add(hostNode);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} hostNode<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomSharedStylesHost.prototype.removeHost = function (hostNode) { this._hostNodes.delete(hostNode); };<\/p><p>    /**<\/p><p>     * @param {?} additions<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomSharedStylesHost.prototype.onStylesAdded = function (additions) {<\/p><p>        var _this = this;<\/p><p>        this._hostNodes.forEach(function (hostNode) { return _this._addStylesToHost(additions, hostNode); });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomSharedStylesHost.prototype.ngOnDestroy = function () { this._styleNodes.forEach(function (styleNode) { return getDOM().remove(styleNode); }); };<\/p><p>    return DomSharedStylesHost;<\/p><p>}(SharedStylesHost));<\/p><p>DomSharedStylesHost.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injectable\"] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>DomSharedStylesHost.ctorParameters = function () { return [<\/p><p>    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Inject\"], args: [DOCUMENT$1,] },] },<\/p><p>]; };<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var NAMESPACE_URIS = {<\/p><p>    'svg': 'http://www.w3.org/2000/svg',<\/p><p>    'xhtml': 'http://www.w3.org/1999/xhtml',<\/p><p>    'xlink': 'http://www.w3.org/1999/xlink',<\/p><p>    'xml': 'http://www.w3.org/XML/1998/namespace',<\/p><p>    'xmlns': 'http://www.w3.org/2000/xmlns/',<\/p><p>};<\/p><p>var COMPONENT_REGEX = /%COMP%/g;<\/p><p>var COMPONENT_VARIABLE = '%COMP%';<\/p><p>var HOST_ATTR = \"_nghost-\" + COMPONENT_VARIABLE;<\/p><p>var CONTENT_ATTR = \"_ngcontent-\" + COMPONENT_VARIABLE;<\/p><p>/**<\/p><p> * @param {?} componentShortId<\/p><p> * @return {?}<\/p><p> */<\/p><p>function shimContentAttribute(componentShortId) {<\/p><p>    return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} componentShortId<\/p><p> * @return {?}<\/p><p> */<\/p><p>function shimHostAttribute(componentShortId) {<\/p><p>    return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} compId<\/p><p> * @param {?} styles<\/p><p> * @param {?} target<\/p><p> * @return {?}<\/p><p> */<\/p><p>function flattenStyles(compId, styles, target) {<\/p><p>    for (var /** @type {?} */ i = 0; i < styles.length; i++) {<\/p><p>        var /** @type {?} */ style = styles[i];<\/p><p>        if (Array.isArray(style)) {<\/p><p>            flattenStyles(compId, style, target);<\/p><p>        }<\/p><p>        else {<\/p><p>            style = style.replace(COMPONENT_REGEX, compId);<\/p><p>            target.push(style);<\/p><p>        }<\/p><p>    }<\/p><p>    return target;<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} eventHandler<\/p><p> * @return {?}<\/p><p> */<\/p><p>function decoratePreventDefault(eventHandler) {<\/p><p>    return function (event) {<\/p><p>        var /** @type {?} */ allowDefaultBehavior = eventHandler(event);<\/p><p>        if (allowDefaultBehavior === false) {<\/p><p>            // TODO(tbosch): move preventDefault into event plugins...<\/p><p>            event.preventDefault();<\/p><p>            event.returnValue = false;<\/p><p>        }<\/p><p>    };<\/p><p>}<\/p><p>var DomRendererFactory2 = (function () {<\/p><p>    /**<\/p><p>     * @param {?} eventManager<\/p><p>     * @param {?} sharedStylesHost<\/p><p>     */<\/p><p>    function DomRendererFactory2(eventManager, sharedStylesHost) {<\/p><p>        this.eventManager = eventManager;<\/p><p>        this.sharedStylesHost = sharedStylesHost;<\/p><p>        this.rendererByCompId = new Map();<\/p><p>        this.defaultRenderer = new DefaultDomRenderer2(eventManager);<\/p><p>    }<\/p><p>    ;<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @param {?} type<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomRendererFactory2.prototype.createRenderer = function (element, type) {<\/p><p>        if (!element || !type) {<\/p><p>            return this.defaultRenderer;<\/p><p>        }<\/p><p>        switch (type.encapsulation) {<\/p><p>            case __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ViewEncapsulation\"].Emulated: {<\/p><p>                var /** @type {?} */ renderer = this.rendererByCompId.get(type.id);<\/p><p>                if (!renderer) {<\/p><p>                    renderer =<\/p><p>                        new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type);<\/p><p>                    this.rendererByCompId.set(type.id, renderer);<\/p><p>                }<\/p><p>                ((renderer)).applyToHost(element);<\/p><p>                return renderer;<\/p><p>            }<\/p><p>            case __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ViewEncapsulation\"].Native:<\/p><p>                return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);<\/p><p>            default: {<\/p><p>                if (!this.rendererByCompId.has(type.id)) {<\/p><p>                    var /** @type {?} */ styles = flattenStyles(type.id, type.styles, []);<\/p><p>                    this.sharedStylesHost.addStyles(styles);<\/p><p>                    this.rendererByCompId.set(type.id, this.defaultRenderer);<\/p><p>                }<\/p><p>                return this.defaultRenderer;<\/p><p>            }<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomRendererFactory2.prototype.begin = function () { };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomRendererFactory2.prototype.end = function () { };<\/p><p>    return DomRendererFactory2;<\/p><p>}());<\/p><p>DomRendererFactory2.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injectable\"] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>DomRendererFactory2.ctorParameters = function () { return [<\/p><p>    { type: EventManager, },<\/p><p>    { type: DomSharedStylesHost, },<\/p><p>]; };<\/p><p>var DefaultDomRenderer2 = (function () {<\/p><p>    /**<\/p><p>     * @param {?} eventManager<\/p><p>     */<\/p><p>    function DefaultDomRenderer2(eventManager) {<\/p><p>        this.eventManager = eventManager;<\/p><p>        this.data = Object.create(null);<\/p><p>    }<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DefaultDomRenderer2.prototype.destroy = function () { };<\/p><p>    /**<\/p><p>     * @param {?} name<\/p><p>     * @param {?=} namespace<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DefaultDomRenderer2.prototype.createElement = function (name, namespace) {<\/p><p>        if (namespace) {<\/p><p>            return document.createElementNS(NAMESPACE_URIS[namespace], name);<\/p><p>        }<\/p><p>        return document.createElement(name);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DefaultDomRenderer2.prototype.createComment = function (value) { return document.createComment(value); };<\/p><p>    /**<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DefaultDomRenderer2.prototype.createText = function (value) { return document.createTextNode(value); };<\/p><p>    /**<\/p><p>     * @param {?} parent<\/p><p>     * @param {?} newChild<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DefaultDomRenderer2.prototype.appendChild = function (parent, newChild) { parent.appendChild(newChild); };<\/p><p>    /**<\/p><p>     * @param {?} parent<\/p><p>     * @param {?} newChild<\/p><p>     * @param {?} refChild<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DefaultDomRenderer2.prototype.insertBefore = function (parent, newChild, refChild) {<\/p><p>        if (parent) {<\/p><p>            parent.insertBefore(newChild, refChild);<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} parent<\/p><p>     * @param {?} oldChild<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DefaultDomRenderer2.prototype.removeChild = function (parent, oldChild) {<\/p><p>        if (parent) {<\/p><p>            parent.removeChild(oldChild);<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} selectorOrNode<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DefaultDomRenderer2.prototype.selectRootElement = function (selectorOrNode) {<\/p><p>        var /** @type {?} */ el = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) :<\/p><p>            selectorOrNode;<\/p><p>        if (!el) {<\/p><p>            throw new Error(\"The selector \\\"\" + selectorOrNode + \"\\\" did not match any elements\");<\/p><p>        }<\/p><p>        el.textContent = '';<\/p><p>        return el;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DefaultDomRenderer2.prototype.parentNode = function (node) { return node.parentNode; };<\/p><p>    /**<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DefaultDomRenderer2.prototype.nextSibling = function (node) { return node.nextSibling; };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @param {?} name<\/p><p>     * @param {?} value<\/p><p>     * @param {?=} namespace<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DefaultDomRenderer2.prototype.setAttribute = function (el, name, value, namespace) {<\/p><p>        if (namespace) {<\/p><p>            name = namespace + \":\" + name;<\/p><p>            var /** @type {?} */ namespaceUri = NAMESPACE_URIS[namespace];<\/p><p>            if (namespaceUri) {<\/p><p>                el.setAttributeNS(namespaceUri, name, value);<\/p><p>            }<\/p><p>            else {<\/p><p>                el.setAttribute(name, value);<\/p><p>            }<\/p><p>        }<\/p><p>        else {<\/p><p>            el.setAttribute(name, value);<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @param {?} name<\/p><p>     * @param {?=} namespace<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DefaultDomRenderer2.prototype.removeAttribute = function (el, name, namespace) {<\/p><p>        if (namespace) {<\/p><p>            var /** @type {?} */ namespaceUri = NAMESPACE_URIS[namespace];<\/p><p>            if (namespaceUri) {<\/p><p>                el.removeAttributeNS(namespaceUri, name);<\/p><p>            }<\/p><p>            else {<\/p><p>                el.removeAttribute(namespace + \":\" + name);<\/p><p>            }<\/p><p>        }<\/p><p>        else {<\/p><p>            el.removeAttribute(name);<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @param {?} name<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DefaultDomRenderer2.prototype.addClass = function (el, name) { el.classList.add(name); };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @param {?} name<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DefaultDomRenderer2.prototype.removeClass = function (el, name) { el.classList.remove(name); };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @param {?} style<\/p><p>     * @param {?} value<\/p><p>     * @param {?} flags<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DefaultDomRenderer2.prototype.setStyle = function (el, style, value, flags) {<\/p><p>        if (flags & __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"RendererStyleFlags2\"].DashCase) {<\/p><p>            el.style.setProperty(style, value, !!(flags & __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"RendererStyleFlags2\"].Important) ? 'important' : '');<\/p><p>        }<\/p><p>        else {<\/p><p>            el.style[style] = value;<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @param {?} style<\/p><p>     * @param {?} flags<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DefaultDomRenderer2.prototype.removeStyle = function (el, style, flags) {<\/p><p>        if (flags & __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"RendererStyleFlags2\"].DashCase) {<\/p><p>            el.style.removeProperty(style);<\/p><p>        }<\/p><p>        else {<\/p><p>            // IE requires '' instead of null<\/p><p>            // see https://github.com/angular/angular/issues/7916<\/p><p>            el.style[style] = '';<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @param {?} name<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DefaultDomRenderer2.prototype.setProperty = function (el, name, value) {<\/p><p>        checkNoSyntheticProp(name, 'property');<\/p><p>        el[name] = value;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} node<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DefaultDomRenderer2.prototype.setValue = function (node, value) { node.nodeValue = value; };<\/p><p>    /**<\/p><p>     * @param {?} target<\/p><p>     * @param {?} event<\/p><p>     * @param {?} callback<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DefaultDomRenderer2.prototype.listen = function (target, event, callback) {<\/p><p>        checkNoSyntheticProp(event, 'listener');<\/p><p>        if (typeof target === 'string') {<\/p><p>            return (this.eventManager.addGlobalEventListener(target, event, decoratePreventDefault(callback)));<\/p><p>        }<\/p><p>        return ((this.eventManager.addEventListener(target, event, decoratePreventDefault(callback))));<\/p><p>    };<\/p><p>    return DefaultDomRenderer2;<\/p><p>}());<\/p><p>var AT_CHARCODE = '@'.charCodeAt(0);<\/p><p>/**<\/p><p> * @param {?} name<\/p><p> * @param {?} nameKind<\/p><p> * @return {?}<\/p><p> */<\/p><p>function checkNoSyntheticProp(name, nameKind) {<\/p><p>    if (name.charCodeAt(0) === AT_CHARCODE) {<\/p><p>        throw new Error(\"Found the synthetic \" + nameKind + \" \" + name + \". Please include either \\\"BrowserAnimationsModule\\\" or \\\"NoopAnimationsModule\\\" in your application.\");<\/p><p>    }<\/p><p>}<\/p><p>var EmulatedEncapsulationDomRenderer2 = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](EmulatedEncapsulationDomRenderer2, _super);<\/p><p>    /**<\/p><p>     * @param {?} eventManager<\/p><p>     * @param {?} sharedStylesHost<\/p><p>     * @param {?} component<\/p><p>     */<\/p><p>    function EmulatedEncapsulationDomRenderer2(eventManager, sharedStylesHost, component) {<\/p><p>        var _this = _super.call(this, eventManager) || this;<\/p><p>        _this.component = component;<\/p><p>        var styles = flattenStyles(component.id, component.styles, []);<\/p><p>        sharedStylesHost.addStyles(styles);<\/p><p>        _this.contentAttr = shimContentAttribute(component.id);<\/p><p>        _this.hostAttr = shimHostAttribute(component.id);<\/p><p>        return _this;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    EmulatedEncapsulationDomRenderer2.prototype.applyToHost = function (element) { _super.prototype.setAttribute.call(this, element, this.hostAttr, ''); };<\/p><p>    /**<\/p><p>     * @param {?} parent<\/p><p>     * @param {?} name<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    EmulatedEncapsulationDomRenderer2.prototype.createElement = function (parent, name) {<\/p><p>        var /** @type {?} */ el = _super.prototype.createElement.call(this, parent, name);<\/p><p>        _super.prototype.setAttribute.call(this, el, this.contentAttr, '');<\/p><p>        return el;<\/p><p>    };<\/p><p>    return EmulatedEncapsulationDomRenderer2;<\/p><p>}(DefaultDomRenderer2));<\/p><p>var ShadowDomRenderer = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](ShadowDomRenderer, _super);<\/p><p>    /**<\/p><p>     * @param {?} eventManager<\/p><p>     * @param {?} sharedStylesHost<\/p><p>     * @param {?} hostEl<\/p><p>     * @param {?} component<\/p><p>     */<\/p><p>    function ShadowDomRenderer(eventManager, sharedStylesHost, hostEl, component) {<\/p><p>        var _this = _super.call(this, eventManager) || this;<\/p><p>        _this.sharedStylesHost = sharedStylesHost;<\/p><p>        _this.hostEl = hostEl;<\/p><p>        _this.component = component;<\/p><p>        _this.shadowRoot = hostEl.createShadowRoot();<\/p><p>        _this.sharedStylesHost.addHost(_this.shadowRoot);<\/p><p>        var styles = flattenStyles(component.id, component.styles, []);<\/p><p>        for (var i = 0; i < styles.length; i++) {<\/p><p>            var styleEl = document.createElement('style');<\/p><p>            styleEl.textContent = styles[i];<\/p><p>            _this.shadowRoot.appendChild(styleEl);<\/p><p>        }<\/p><p>        return _this;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ShadowDomRenderer.prototype.nodeOrShadowRoot = function (node) { return node === this.hostEl ? this.shadowRoot : node; };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ShadowDomRenderer.prototype.destroy = function () { this.sharedStylesHost.removeHost(this.shadowRoot); };<\/p><p>    /**<\/p><p>     * @param {?} parent<\/p><p>     * @param {?} newChild<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ShadowDomRenderer.prototype.appendChild = function (parent, newChild) {<\/p><p>        return _super.prototype.appendChild.call(this, this.nodeOrShadowRoot(parent), newChild);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} parent<\/p><p>     * @param {?} newChild<\/p><p>     * @param {?} refChild<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ShadowDomRenderer.prototype.insertBefore = function (parent, newChild, refChild) {<\/p><p>        return _super.prototype.insertBefore.call(this, this.nodeOrShadowRoot(parent), newChild, refChild);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} parent<\/p><p>     * @param {?} oldChild<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ShadowDomRenderer.prototype.removeChild = function (parent, oldChild) {<\/p><p>        return _super.prototype.removeChild.call(this, this.nodeOrShadowRoot(parent), oldChild);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ShadowDomRenderer.prototype.parentNode = function (node) {<\/p><p>        return this.nodeOrShadowRoot(_super.prototype.parentNode.call(this, this.nodeOrShadowRoot(node)));<\/p><p>    };<\/p><p>    return ShadowDomRenderer;<\/p><p>}(DefaultDomRenderer2));<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var DomEventsPlugin = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](DomEventsPlugin, _super);<\/p><p>    /**<\/p><p>     * @param {?} doc<\/p><p>     */<\/p><p>    function DomEventsPlugin(doc) {<\/p><p>        return _super.call(this, doc) || this;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} eventName<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomEventsPlugin.prototype.supports = function (eventName) { return true; };<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @param {?} eventName<\/p><p>     * @param {?} handler<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {<\/p><p>        element.addEventListener(eventName, /** @type {?} */ (handler), false);<\/p><p>        return function () { return element.removeEventListener(eventName, /** @type {?} */ (handler), false); };<\/p><p>    };<\/p><p>    return DomEventsPlugin;<\/p><p>}(EventManagerPlugin));<\/p><p>DomEventsPlugin.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injectable\"] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>DomEventsPlugin.ctorParameters = function () { return [<\/p><p>    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Inject\"], args: [DOCUMENT$1,] },] },<\/p><p>]; };<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var EVENT_NAMES = {<\/p><p>    // pan<\/p><p>    'pan': true,<\/p><p>    'panstart': true,<\/p><p>    'panmove': true,<\/p><p>    'panend': true,<\/p><p>    'pancancel': true,<\/p><p>    'panleft': true,<\/p><p>    'panright': true,<\/p><p>    'panup': true,<\/p><p>    'pandown': true,<\/p><p>    // pinch<\/p><p>    'pinch': true,<\/p><p>    'pinchstart': true,<\/p><p>    'pinchmove': true,<\/p><p>    'pinchend': true,<\/p><p>    'pinchcancel': true,<\/p><p>    'pinchin': true,<\/p><p>    'pinchout': true,<\/p><p>    // press<\/p><p>    'press': true,<\/p><p>    'pressup': true,<\/p><p>    // rotate<\/p><p>    'rotate': true,<\/p><p>    'rotatestart': true,<\/p><p>    'rotatemove': true,<\/p><p>    'rotateend': true,<\/p><p>    'rotatecancel': true,<\/p><p>    // swipe<\/p><p>    'swipe': true,<\/p><p>    'swipeleft': true,<\/p><p>    'swiperight': true,<\/p><p>    'swipeup': true,<\/p><p>    'swipedown': true,<\/p><p>    // tap<\/p><p>    'tap': true,<\/p><p>};<\/p><p>/**<\/p><p> * A DI token that you can use to provide{\\@link HammerGestureConfig} to Angular. Use it to configure<\/p><p> * Hammer gestures.<\/p><p> *<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var HAMMER_GESTURE_CONFIG = new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"InjectionToken\"]('HammerGestureConfig');<\/p><p>/**<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var HammerGestureConfig = (function () {<\/p><p>    function HammerGestureConfig() {<\/p><p>        this.events = [];<\/p><p>        this.overrides = {};<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    HammerGestureConfig.prototype.buildHammer = function (element) {<\/p><p>        var /** @type {?} */ mc = new Hammer(element);<\/p><p>        mc.get('pinch').set({ enable: true });<\/p><p>        mc.get('rotate').set({ enable: true });<\/p><p>        for (var /** @type {?} */ eventName in this.overrides) {<\/p><p>            mc.get(eventName).set(this.overrides[eventName]);<\/p><p>        }<\/p><p>        return mc;<\/p><p>    };<\/p><p>    return HammerGestureConfig;<\/p><p>}());<\/p><p>HammerGestureConfig.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injectable\"] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>HammerGestureConfig.ctorParameters = function () { return []; };<\/p><p>var HammerGesturesPlugin = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](HammerGesturesPlugin, _super);<\/p><p>    /**<\/p><p>     * @param {?} doc<\/p><p>     * @param {?} _config<\/p><p>     */<\/p><p>    function HammerGesturesPlugin(doc, _config) {<\/p><p>        var _this = _super.call(this, doc) || this;<\/p><p>        _this._config = _config;<\/p><p>        return _this;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} eventName<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    HammerGesturesPlugin.prototype.supports = function (eventName) {<\/p><p>        if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {<\/p><p>            return false;<\/p><p>        }<\/p><p>        if (!((window)).Hammer) {<\/p><p>            throw new Error(\"Hammer.js is not loaded, can not bind \" + eventName + \" event\");<\/p><p>        }<\/p><p>        return true;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @param {?} eventName<\/p><p>     * @param {?} handler<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    HammerGesturesPlugin.prototype.addEventListener = function (element, eventName, handler) {<\/p><p>        var _this = this;<\/p><p>        var /** @type {?} */ zone = this.manager.getZone();<\/p><p>        eventName = eventName.toLowerCase();<\/p><p>        return zone.runOutsideAngular(function () {<\/p><p>            // Creating the manager bind events, must be done outside of angular<\/p><p>            var /** @type {?} */ mc = _this._config.buildHammer(element);<\/p><p>            var /** @type {?} */ callback = function (eventObj) {<\/p><p>                zone.runGuarded(function () { handler(eventObj); });<\/p><p>            };<\/p><p>            mc.on(eventName, callback);<\/p><p>            return function () { return mc.off(eventName, callback); };<\/p><p>        });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} eventName<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    HammerGesturesPlugin.prototype.isCustomEvent = function (eventName) { return this._config.events.indexOf(eventName) > -1; };<\/p><p>    return HammerGesturesPlugin;<\/p><p>}(EventManagerPlugin));<\/p><p>HammerGesturesPlugin.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injectable\"] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>HammerGesturesPlugin.ctorParameters = function () { return [<\/p><p>    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Inject\"], args: [DOCUMENT$1,] },] },<\/p><p>    { type: HammerGestureConfig, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Inject\"], args: [HAMMER_GESTURE_CONFIG,] },] },<\/p><p>]; };<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];<\/p><p>var MODIFIER_KEY_GETTERS = {<\/p><p>    'alt': function (event) { return event.altKey; },<\/p><p>    'control': function (event) { return event.ctrlKey; },<\/p><p>    'meta': function (event) { return event.metaKey; },<\/p><p>    'shift': function (event) { return event.shiftKey; }<\/p><p>};<\/p><p>/**<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var KeyEventsPlugin = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](KeyEventsPlugin, _super);<\/p><p>    /**<\/p><p>     * @param {?} doc<\/p><p>     */<\/p><p>    function KeyEventsPlugin(doc) {<\/p><p>        return _super.call(this, doc) || this;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} eventName<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    KeyEventsPlugin.prototype.supports = function (eventName) { return KeyEventsPlugin.parseEventName(eventName) != null; };<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @param {?} eventName<\/p><p>     * @param {?} handler<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    KeyEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {<\/p><p>        var /** @type {?} */ parsedEvent = ((KeyEventsPlugin.parseEventName(eventName)));<\/p><p>        var /** @type {?} */ outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());<\/p><p>        return this.manager.getZone().runOutsideAngular(function () {<\/p><p>            return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);<\/p><p>        });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} eventName<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    KeyEventsPlugin.parseEventName = function (eventName) {<\/p><p>        var /** @type {?} */ parts = eventName.toLowerCase().split('.');<\/p><p>        var /** @type {?} */ domEventName = parts.shift();<\/p><p>        if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {<\/p><p>            return null;<\/p><p>        }<\/p><p>        var /** @type {?} */ key = KeyEventsPlugin._normalizeKey(/** @type {?} */ ((parts.pop())));<\/p><p>        var /** @type {?} */ fullKey = '';<\/p><p>        MODIFIER_KEYS.forEach(function (modifierName) {<\/p><p>            var /** @type {?} */ index = parts.indexOf(modifierName);<\/p><p>            if (index > -1) {<\/p><p>                parts.splice(index, 1);<\/p><p>                fullKey += modifierName + '.';<\/p><p>            }<\/p><p>        });<\/p><p>        fullKey += key;<\/p><p>        if (parts.length != 0 || key.length === 0) {<\/p><p>            // returning null instead of throwing to let another plugin process the event<\/p><p>            return null;<\/p><p>        }<\/p><p>        var /** @type {?} */ result = {};<\/p><p>        result['domEventName'] = domEventName;<\/p><p>        result['fullKey'] = fullKey;<\/p><p>        return result;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} event<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    KeyEventsPlugin.getEventFullKey = function (event) {<\/p><p>        var /** @type {?} */ fullKey = '';<\/p><p>        var /** @type {?} */ key = getDOM().getEventKey(event);<\/p><p>        key = key.toLowerCase();<\/p><p>        if (key === ' ') {<\/p><p>            key = 'space'; // for readability<\/p><p>        }<\/p><p>        else if (key === '.') {<\/p><p>            key = 'dot'; // because '.' is used as a separator in event names<\/p><p>        }<\/p><p>        MODIFIER_KEYS.forEach(function (modifierName) {<\/p><p>            if (modifierName != key) {<\/p><p>                var /** @type {?} */ modifierGetter = MODIFIER_KEY_GETTERS[modifierName];<\/p><p>                if (modifierGetter(event)) {<\/p><p>                    fullKey += modifierName + '.';<\/p><p>                }<\/p><p>            }<\/p><p>        });<\/p><p>        fullKey += key;<\/p><p>        return fullKey;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} fullKey<\/p><p>     * @param {?} handler<\/p><p>     * @param {?} zone<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    KeyEventsPlugin.eventCallback = function (fullKey, handler, zone) {<\/p><p>        return function (event /** TODO #9100 */) {<\/p><p>            if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {<\/p><p>                zone.runGuarded(function () { return handler(event); });<\/p><p>            }<\/p><p>        };<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @param {?} keyName<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    KeyEventsPlugin._normalizeKey = function (keyName) {<\/p><p>        // TODO: switch to a Map if the mapping grows too much<\/p><p>        switch (keyName) {<\/p><p>            case 'esc':<\/p><p>                return 'escape';<\/p><p>            default:<\/p><p>                return keyName;<\/p><p>        }<\/p><p>    };<\/p><p>    return KeyEventsPlugin;<\/p><p>}(EventManagerPlugin));<\/p><p>KeyEventsPlugin.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injectable\"] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>KeyEventsPlugin.ctorParameters = function () { return [<\/p><p>    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Inject\"], args: [DOCUMENT$1,] },] },<\/p><p>]; };<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * A pattern that recognizes a commonly useful subset of URLs that are safe.<\/p><p> *<\/p><p> * This regular expression matches a subset of URLs that will not cause script<\/p><p> * execution if used in URL context within a HTML document. Specifically, this<\/p><p> * regular expression matches if (comment from here on and regex copied from<\/p><p> * Soy's EscapingConventions):<\/p><p> * (1) Either a protocol in a whitelist (http, https, mailto or ftp).<\/p><p> * (2) or no protocol.  A protocol must be followed by a colon. The below<\/p><p> *     allows that by allowing colons only after one of the characters [/?#].<\/p><p> *     A colon after a hash (#) must be in the fragment.<\/p><p> *     Otherwise, a colon after a (?) must be in a query.<\/p><p> *     Otherwise, a colon after a single solidus (/) must be in a path.<\/p><p> *     Otherwise, a colon after a double solidus (//) must be in the authority<\/p><p> *     (before port).<\/p><p> *<\/p><p> * The pattern disallows &, used in HTML entity declarations before<\/p><p> * one of the characters in [/?#]. This disallows HTML entities used in the<\/p><p> * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".<\/p><p> * It also disallows HTML entities in the first path part of a relative path,<\/p><p> * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce<\/p><p> * that. More importantly, it disallows masking of a colon,<\/p><p> * e.g. \"javascript&#58;...\".<\/p><p> *<\/p><p> * This regular expression was taken from the Closure sanitization library.<\/p><p> */<\/p><p>var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;<\/p><p>/**<\/p><p> * A pattern that matches safe data URLs. Only matches image, video and audio types.<\/p><p> */<\/p><p>var DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\\/]+=*$/i;<\/p><p>/**<\/p><p> * @param {?} url<\/p><p> * @return {?}<\/p><p> */<\/p><p>function sanitizeUrl(url) {<\/p><p>    url = String(url);<\/p><p>    if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))<\/p><p>        return url;<\/p><p>    if (Object(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"isDevMode\"])()) {<\/p><p>        getDOM().log(\"WARNING: sanitizing unsafe URL value \" + url + \" (see http://g.co/ng/security#xss)\");<\/p><p>    }<\/p><p>    return 'unsafe:' + url;<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} srcset<\/p><p> * @return {?}<\/p><p> */<\/p><p>function sanitizeSrcset(srcset) {<\/p><p>    srcset = String(srcset);<\/p><p>    return srcset.split(',').map(function (srcset) { return sanitizeUrl(srcset.trim()); }).join(', ');<\/p><p>}<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * A <body> element that can be safely used to parse untrusted HTML. Lazily initialized below.<\/p><p> */<\/p><p>var inertElement = null;<\/p><p>/**<\/p><p> * Lazily initialized to make sure the DOM adapter gets set before use.<\/p><p> */<\/p><p>var DOM = null;<\/p><p>/**<\/p><p> * Returns an HTML element that is guaranteed to not execute code when creating elements in it.<\/p><p> * @return {?}<\/p><p> */<\/p><p>function getInertElement() {<\/p><p>    if (inertElement)<\/p><p>        return inertElement;<\/p><p>    DOM = getDOM();<\/p><p>    // Prefer using <template> element if supported.<\/p><p>    var /** @type {?} */ templateEl = DOM.createElement('template');<\/p><p>    if ('content' in templateEl)<\/p><p>        return templateEl;<\/p><p>    var /** @type {?} */ doc = DOM.createHtmlDocument();<\/p><p>    inertElement = DOM.querySelector(doc, 'body');<\/p><p>    if (inertElement == null) {<\/p><p>        // usually there should be only one body element in the document, but IE doesn't have any, so we<\/p><p>        // need to create one.<\/p><p>        var /** @type {?} */ html = DOM.createElement('html', doc);<\/p><p>        inertElement = DOM.createElement('body', doc);<\/p><p>        DOM.appendChild(html, inertElement);<\/p><p>        DOM.appendChild(doc, html);<\/p><p>    }<\/p><p>    return inertElement;<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} tags<\/p><p> * @return {?}<\/p><p> */<\/p><p>function tagSet(tags) {<\/p><p>    var /** @type {?} */ res = {};<\/p><p>    for (var _i = 0, _a = tags.split(','); _i < _a.length; _i++) {<\/p><p>        var t = _a[_i];<\/p><p>        res[t] = true;<\/p><p>    }<\/p><p>    return res;<\/p><p>}<\/p><p>/**<\/p><p> * @param {...?} sets<\/p><p> * @return {?}<\/p><p> */<\/p><p>function merge() {<\/p><p>    var sets = [];<\/p><p>    for (var _i = 0; _i < arguments.length; _i++) {<\/p><p>        sets[_i] = arguments[_i];<\/p><p>    }<\/p><p>    var /** @type {?} */ res = {};<\/p><p>    for (var _a = 0, sets_1 = sets; _a < sets_1.length; _a++) {<\/p><p>        var s = sets_1[_a];<\/p><p>        for (var /** @type {?} */ v in s) {<\/p><p>            if (s.hasOwnProperty(v))<\/p><p>                res[v] = true;<\/p><p>        }<\/p><p>    }<\/p><p>    return res;<\/p><p>}<\/p><p>// Good source of info about elements and attributes<\/p><p>// http://dev.w3.org/html5/spec/Overview.html#semantics<\/p><p>// http://simon.html5.org/html-elements<\/p><p>// Safe Void Elements - HTML5<\/p><p>// http://dev.w3.org/html5/spec/Overview.html#void-elements<\/p><p>var VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');<\/p><p>// Elements that you can, intentionally, leave open (and which close themselves)<\/p><p>// http://dev.w3.org/html5/spec/Overview.html#optional-tags<\/p><p>var OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');<\/p><p>var OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');<\/p><p>var OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);<\/p><p>// Safe Block Elements - HTML5<\/p><p>var BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +<\/p><p>    'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +<\/p><p>    'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));<\/p><p>// Inline Elements - HTML5<\/p><p>var INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +<\/p><p>    'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +<\/p><p>    'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));<\/p><p>var VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);<\/p><p>// Attributes that have href and hence need to be sanitized<\/p><p>var URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');<\/p><p>// Attributes that have special href set hence need to be sanitized<\/p><p>var SRCSET_ATTRS = tagSet('srcset');<\/p><p>var HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +<\/p><p>    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +<\/p><p>    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +<\/p><p>    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +<\/p><p>    'valign,value,vspace,width');<\/p><p>// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security<\/p><p>// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via<\/p><p>// innerHTML is required, SVG attributes should be added here.<\/p><p>// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those<\/p><p>// can be sanitized, but they increase security surface area without a legitimate use case, so they<\/p><p>// are left out here.<\/p><p>var VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);<\/p><p>/**<\/p><p> * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe<\/p><p> * attributes.<\/p><p> */<\/p><p>var SanitizingHtmlSerializer = (function () {<\/p><p>    function SanitizingHtmlSerializer() {<\/p><p>        this.sanitizedSomething = false;<\/p><p>        this.buf = [];<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    SanitizingHtmlSerializer.prototype.sanitizeChildren = function (el) {<\/p><p>        // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.<\/p><p>        // However this code never accesses properties off of `document` before deleting its contents<\/p><p>        // again, so it shouldn't be vulnerable to DOM clobbering.<\/p><p>        var /** @type {?} */ current = ((el.firstChild));<\/p><p>        while (current) {<\/p><p>            if (DOM.isElementNode(current)) {<\/p><p>                this.startElement(/** @type {?} */ (current));<\/p><p>            }<\/p><p>            else if (DOM.isTextNode(current)) {<\/p><p>                this.chars(/** @type {?} */ ((DOM.nodeValue(current))));<\/p><p>            }<\/p><p>            else {<\/p><p>                // Strip non-element, non-text nodes.<\/p><p>                this.sanitizedSomething = true;<\/p><p>            }<\/p><p>            if (DOM.firstChild(current)) {<\/p><p>                current = ((DOM.firstChild(current)));<\/p><p>                continue;<\/p><p>            }<\/p><p>            while (current) {<\/p><p>                // Leaving the element. Walk up and to the right, closing tags as we go.<\/p><p>                if (DOM.isElementNode(current)) {<\/p><p>                    this.endElement(/** @type {?} */ (current));<\/p><p>                }<\/p><p>                var /** @type {?} */ next = checkClobberedElement(current, /** @type {?} */ ((DOM.nextSibling(current))));<\/p><p>                if (next) {<\/p><p>                    current = next;<\/p><p>                    break;<\/p><p>                }<\/p><p>                current = checkClobberedElement(current, /** @type {?} */ ((DOM.parentElement(current))));<\/p><p>            }<\/p><p>        }<\/p><p>        return this.buf.join('');<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    SanitizingHtmlSerializer.prototype.startElement = function (element) {<\/p><p>        var _this = this;<\/p><p>        var /** @type {?} */ tagName = DOM.nodeName(element).toLowerCase();<\/p><p>        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {<\/p><p>            this.sanitizedSomething = true;<\/p><p>            return;<\/p><p>        }<\/p><p>        this.buf.push('<');<\/p><p>        this.buf.push(tagName);<\/p><p>        DOM.attributeMap(element).forEach(function (value, attrName) {<\/p><p>            var /** @type {?} */ lower = attrName.toLowerCase();<\/p><p>            if (!VALID_ATTRS.hasOwnProperty(lower)) {<\/p><p>                _this.sanitizedSomething = true;<\/p><p>                return;<\/p><p>            }<\/p><p>            // TODO(martinprobst): Special case image URIs for data:image/...<\/p><p>            if (URI_ATTRS[lower])<\/p><p>                value = sanitizeUrl(value);<\/p><p>            if (SRCSET_ATTRS[lower])<\/p><p>                value = sanitizeSrcset(value);<\/p><p>            _this.buf.push(' ');<\/p><p>            _this.buf.push(attrName);<\/p><p>            _this.buf.push('=\"');<\/p><p>            _this.buf.push(encodeEntities(value));<\/p><p>            _this.buf.push('\"');<\/p><p>        });<\/p><p>        this.buf.push('>');<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} current<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    SanitizingHtmlSerializer.prototype.endElement = function (current) {<\/p><p>        var /** @type {?} */ tagName = DOM.nodeName(current).toLowerCase();<\/p><p>        if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {<\/p><p>            this.buf.push('<\/');<\/p><p>            this.buf.push(tagName);<\/p><p>            this.buf.push('>');<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} chars<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    SanitizingHtmlSerializer.prototype.chars = function (chars) { this.buf.push(encodeEntities(chars)); };<\/p><p>    return SanitizingHtmlSerializer;<\/p><p>}());<\/p><p>/**<\/p><p> * @param {?} node<\/p><p> * @param {?} nextNode<\/p><p> * @return {?}<\/p><p> */<\/p><p>function checkClobberedElement(node, nextNode) {<\/p><p>    if (nextNode && DOM.contains(node, nextNode)) {<\/p><p>        throw new Error(\"Failed to sanitize html because the element is clobbered: \" + DOM.getOuterHTML(node));<\/p><p>    }<\/p><p>    return nextNode;<\/p><p>}<\/p><p>// Regular Expressions for parsing tags and attributes<\/p><p>var SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;<\/p><p>// ! to ~ is the ASCII range.<\/p><p>var NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;<\/p><p>/**<\/p><p> * Escapes all potentially dangerous characters, so that the<\/p><p> * resulting string can be safely inserted into attribute or<\/p><p> * element text.<\/p><p> * @param {?} value<\/p><p> * @return {?}<\/p><p> */<\/p><p>function encodeEntities(value) {<\/p><p>    return value.replace(/&/g, '&amp;')<\/p><p>        .replace(SURROGATE_PAIR_REGEXP, function (match) {<\/p><p>        var /** @type {?} */ hi = match.charCodeAt(0);<\/p><p>        var /** @type {?} */ low = match.charCodeAt(1);<\/p><p>        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';<\/p><p>    })<\/p><p>        .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })<\/p><p>        .replace(/<\/g, '&lt;')<\/p><p>        .replace(/>/g, '&gt;');<\/p><p>}<\/p><p>/**<\/p><p> * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'<\/p><p> * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo').<\/p><p> *<\/p><p> * This is undesirable since we don't want to allow any of these custom attributes. This method<\/p><p> * strips them all.<\/p><p> * @param {?} el<\/p><p> * @return {?}<\/p><p> */<\/p><p>function stripCustomNsAttrs(el) {<\/p><p>    DOM.attributeMap(el).forEach(function (_, attrName) {<\/p><p>        if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {<\/p><p>            DOM.removeAttribute(el, attrName);<\/p><p>        }<\/p><p>    });<\/p><p>    for (var _i = 0, _a = DOM.childNodesAsList(el); _i < _a.length; _i++) {<\/p><p>        var n = _a[_i];<\/p><p>        if (DOM.isElementNode(n))<\/p><p>            stripCustomNsAttrs(/** @type {?} */ (n));<\/p><p>    }<\/p><p>}<\/p><p>/**<\/p><p> * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to<\/p><p> * the DOM in a browser environment.<\/p><p> * @param {?} defaultDoc<\/p><p> * @param {?} unsafeHtmlInput<\/p><p> * @return {?}<\/p><p> */<\/p><p>function sanitizeHtml(defaultDoc, unsafeHtmlInput) {<\/p><p>    try {<\/p><p>        var /** @type {?} */ containerEl = getInertElement();<\/p><p>        // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).<\/p><p>        var /** @type {?} */ unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';<\/p><p>        // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser<\/p><p>        // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.<\/p><p>        var /** @type {?} */ mXSSAttempts = 5;<\/p><p>        var /** @type {?} */ parsedHtml = unsafeHtml;<\/p><p>        do {<\/p><p>            if (mXSSAttempts === 0) {<\/p><p>                throw new Error('Failed to sanitize html because the input is unstable');<\/p><p>            }<\/p><p>            mXSSAttempts--;<\/p><p>            unsafeHtml = parsedHtml;<\/p><p>            DOM.setInnerHTML(containerEl, unsafeHtml);<\/p><p>            if (defaultDoc.documentMode) {<\/p><p>                // strip custom-namespaced attributes on IE<=11<\/p><p>                stripCustomNsAttrs(containerEl);<\/p><p>            }<\/p><p>            parsedHtml = DOM.getInnerHTML(containerEl);<\/p><p>        } while (unsafeHtml !== parsedHtml);<\/p><p>        var /** @type {?} */ sanitizer = new SanitizingHtmlSerializer();<\/p><p>        var /** @type {?} */ safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl) || containerEl);<\/p><p>        // Clear out the body element.<\/p><p>        var /** @type {?} */ parent = DOM.getTemplateContent(containerEl) || containerEl;<\/p><p>        for (var _i = 0, _a = DOM.childNodesAsList(parent); _i < _a.length; _i++) {<\/p><p>            var child = _a[_i];<\/p><p>            DOM.removeChild(parent, child);<\/p><p>        }<\/p><p>        if (Object(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"isDevMode\"])() && sanitizer.sanitizedSomething) {<\/p><p>            DOM.log('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');<\/p><p>        }<\/p><p>        return safeHtml;<\/p><p>    }<\/p><p>    catch (e) {<\/p><p>        // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.<\/p><p>        inertElement = null;<\/p><p>        throw e;<\/p><p>    }<\/p><p>}<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * Regular expression for safe style values.<\/p><p> *<\/p><p> * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.<\/p><p> *<\/p><p> * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or<\/p><p> * font-family) and hence could allow multiple values to get injected, but that should pose no risk<\/p><p> * of XSS.<\/p><p> *<\/p><p> * The function expression checks only for XSS safety, not for CSS validity.<\/p><p> *<\/p><p> * This regular expression was taken from the Closure sanitization library, and augmented for<\/p><p> * transformation values.<\/p><p> */<\/p><p>var VALUES = '[-,.\"\\'%_!# a-zA-Z0-9]+';<\/p><p>var TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';<\/p><p>var COLOR_FNS = '(?:rgb|hsl)a?';<\/p><p>var GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';<\/p><p>var CSS3_FNS = '(?:calc|attr)';<\/p><p>var FN_ARGS = '\\\\([-0-9.%, #a-zA-Z]+\\\\)';<\/p><p>var SAFE_STYLE_VALUE = new RegExp(\"^(\" + VALUES + \"|\" +<\/p><p>    (\"(?:\" + TRANSFORMATION_FNS + \"|\" + COLOR_FNS + \"|\" + GRADIENTS + \"|\" + CSS3_FNS + \")\") +<\/p><p>    (FN_ARGS + \")$\"), 'g');<\/p><p>/**<\/p><p> * Matches a `url(...)` value with an arbitrary argument as long as it does<\/p><p> * not contain parentheses.<\/p><p> *<\/p><p> * The URL value still needs to be sanitized separately.<\/p><p> *<\/p><p> * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted<\/p><p> * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.<\/p><p> * by observing whether scroll bars are displayed, or character ranges used by a font face<\/p><p> * definition.<\/p><p> *<\/p><p> * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that<\/p><p> * binding a URL value without further cooperation from the page will cause an information leak, and<\/p><p> * if so, it is just a leak, not a full blown XSS vulnerability.<\/p><p> *<\/p><p> * Given the common use case, low likelihood of attack vector, and low impact of an attack, this<\/p><p> * code is permissive and allows URLs that sanitize otherwise.<\/p><p> */<\/p><p>var URL_RE = /^url\\(([^)]+)\\)$/;<\/p><p>/**<\/p><p> * Checks that quotes (\" and ') are properly balanced inside a string. Assumes<\/p><p> * that neither escape (\\) nor any other character that could result in<\/p><p> * breaking out of a string parsing context are allowed;<\/p><p> * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.<\/p><p> *<\/p><p> * This code was taken from the Closure sanitization library.<\/p><p> * @param {?} value<\/p><p> * @return {?}<\/p><p> */<\/p><p>function hasBalancedQuotes(value) {<\/p><p>    var /** @type {?} */ outsideSingle = true;<\/p><p>    var /** @type {?} */ outsideDouble = true;<\/p><p>    for (var /** @type {?} */ i = 0; i < value.length; i++) {<\/p><p>        var /** @type {?} */ c = value.charAt(i);<\/p><p>        if (c === '\\'' && outsideDouble) {<\/p><p>            outsideSingle = !outsideSingle;<\/p><p>        }<\/p><p>        else if (c === '\"' && outsideSingle) {<\/p><p>            outsideDouble = !outsideDouble;<\/p><p>        }<\/p><p>    }<\/p><p>    return outsideSingle && outsideDouble;<\/p><p>}<\/p><p>/**<\/p><p> * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single<\/p><p> * value) and returns a value that is safe to use in a browser environment.<\/p><p> * @param {?} value<\/p><p> * @return {?}<\/p><p> */<\/p><p>function sanitizeStyle(value) {<\/p><p>    value = String(value).trim(); // Make sure it's actually a string.<\/p><p>    if (!value)<\/p><p>        return '';<\/p><p>    // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for<\/p><p>    // reasoning behind this.<\/p><p>    var /** @type {?} */ urlMatch = value.match(URL_RE);<\/p><p>    if ((urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||<\/p><p>        value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {<\/p><p>        return value; // Safe style values.<\/p><p>    }<\/p><p>    if (Object(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"isDevMode\"])()) {<\/p><p>        getDOM().log(\"WARNING: sanitizing unsafe style value \" + value + \" (see http://g.co/ng/security#xss).\");<\/p><p>    }<\/p><p>    return 'unsafe';<\/p><p>}<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing<\/p><p> * values to be safe to use in the different DOM contexts.<\/p><p> *<\/p><p> * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be<\/p><p> * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on<\/p><p> * the website.<\/p><p> *<\/p><p> * In specific situations, it might be necessary to disable sanitization, for example if the<\/p><p> * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.<\/p><p> * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`<\/p><p> * methods, and then binding to that value from the template.<\/p><p> *<\/p><p> * These situations should be very rare, and extraordinary care must be taken to avoid creating a<\/p><p> * Cross Site Scripting (XSS) security bug!<\/p><p> *<\/p><p> * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as<\/p><p> * close as possible to the source of the value, to make it easy to verify no security bug is<\/p><p> * created by its use.<\/p><p> *<\/p><p> * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that<\/p><p> * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous<\/p><p> * code. The sanitizer leaves safe values intact.<\/p><p> *<\/p><p> * \\@security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in<\/p><p> * sanitization for the value passed in. Carefully check and audit all values and code paths going<\/p><p> * into this call. Make sure any user data is appropriately escaped for this security context.<\/p><p> * For more detail, see the [Security Guide](http://g.co/ng/security).<\/p><p> *<\/p><p> * \\@stable<\/p><p> * @abstract<\/p><p> */<\/p><p>var DomSanitizer = (function () {<\/p><p>    function DomSanitizer() {<\/p><p>    }<\/p><p>    /**<\/p><p>     * Sanitizes a value for use in the given SecurityContext.<\/p><p>     *<\/p><p>     * If value is trusted for the context, this method will unwrap the contained safe value and use<\/p><p>     * it directly. Otherwise, value will be sanitized to be safe in the given context, for example<\/p><p>     * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation<\/p><p>     * is responsible to make sure that the value can definitely be safely used in the given context.<\/p><p>     * @abstract<\/p><p>     * @param {?} context<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomSanitizer.prototype.sanitize = function (context, value) { };<\/p><p>    /**<\/p><p>     * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML<\/p><p>     * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will<\/p><p>     * leave safe HTML intact, so in most situations this method should not be used.<\/p><p>     *<\/p><p>     * **WARNING:** calling this method with untrusted user data exposes your application to XSS<\/p><p>     * security risks!<\/p><p>     * @abstract<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomSanitizer.prototype.bypassSecurityTrustHtml = function (value) { };<\/p><p>    /**<\/p><p>     * Bypass security and trust the given value to be safe style value (CSS).<\/p><p>     *<\/p><p>     * **WARNING:** calling this method with untrusted user data exposes your application to XSS<\/p><p>     * security risks!<\/p><p>     * @abstract<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomSanitizer.prototype.bypassSecurityTrustStyle = function (value) { };<\/p><p>    /**<\/p><p>     * Bypass security and trust the given value to be safe JavaScript.<\/p><p>     *<\/p><p>     * **WARNING:** calling this method with untrusted user data exposes your application to XSS<\/p><p>     * security risks!<\/p><p>     * @abstract<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomSanitizer.prototype.bypassSecurityTrustScript = function (value) { };<\/p><p>    /**<\/p><p>     * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used<\/p><p>     * in hyperlinks or `<img src>`.<\/p><p>     *<\/p><p>     * **WARNING:** calling this method with untrusted user data exposes your application to XSS<\/p><p>     * security risks!<\/p><p>     * @abstract<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomSanitizer.prototype.bypassSecurityTrustUrl = function (value) { };<\/p><p>    /**<\/p><p>     * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may<\/p><p>     * be used to load executable code from, like `<script src>`, or `<iframe src>`.<\/p><p>     *<\/p><p>     * **WARNING:** calling this method with untrusted user data exposes your application to XSS<\/p><p>     * security risks!<\/p><p>     * @abstract<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomSanitizer.prototype.bypassSecurityTrustResourceUrl = function (value) { };<\/p><p>    return DomSanitizer;<\/p><p>}());<\/p><p>var DomSanitizerImpl = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](DomSanitizerImpl, _super);<\/p><p>    /**<\/p><p>     * @param {?} _doc<\/p><p>     */<\/p><p>    function DomSanitizerImpl(_doc) {<\/p><p>        var _this = _super.call(this) || this;<\/p><p>        _this._doc = _doc;<\/p><p>        return _this;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} ctx<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomSanitizerImpl.prototype.sanitize = function (ctx, value) {<\/p><p>        if (value == null)<\/p><p>            return null;<\/p><p>        switch (ctx) {<\/p><p>            case __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"SecurityContext\"].NONE:<\/p><p>                return (value);<\/p><p>            case __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"SecurityContext\"].HTML:<\/p><p>                if (value instanceof SafeHtmlImpl)<\/p><p>                    return value.changingThisBreaksApplicationSecurity;<\/p><p>                this.checkNotSafeValue(value, 'HTML');<\/p><p>                return sanitizeHtml(this._doc, String(value));<\/p><p>            case __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"SecurityContext\"].STYLE:<\/p><p>                if (value instanceof SafeStyleImpl)<\/p><p>                    return value.changingThisBreaksApplicationSecurity;<\/p><p>                this.checkNotSafeValue(value, 'Style');<\/p><p>                return sanitizeStyle(/** @type {?} */ (value));<\/p><p>            case __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"SecurityContext\"].SCRIPT:<\/p><p>                if (value instanceof SafeScriptImpl)<\/p><p>                    return value.changingThisBreaksApplicationSecurity;<\/p><p>                this.checkNotSafeValue(value, 'Script');<\/p><p>                throw new Error('unsafe value used in a script context');<\/p><p>            case __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"SecurityContext\"].URL:<\/p><p>                if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {<\/p><p>                    // Allow resource URLs in URL contexts, they are strictly more trusted.<\/p><p>                    return value.changingThisBreaksApplicationSecurity;<\/p><p>                }<\/p><p>                this.checkNotSafeValue(value, 'URL');<\/p><p>                return sanitizeUrl(String(value));<\/p><p>            case __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"SecurityContext\"].RESOURCE_URL:<\/p><p>                if (value instanceof SafeResourceUrlImpl) {<\/p><p>                    return value.changingThisBreaksApplicationSecurity;<\/p><p>                }<\/p><p>                this.checkNotSafeValue(value, 'ResourceURL');<\/p><p>                throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');<\/p><p>            default:<\/p><p>                throw new Error(\"Unexpected SecurityContext \" + ctx + \" (see http://g.co/ng/security#xss)\");<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} value<\/p><p>     * @param {?} expectedType<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomSanitizerImpl.prototype.checkNotSafeValue = function (value, expectedType) {<\/p><p>        if (value instanceof SafeValueImpl) {<\/p><p>            throw new Error(\"Required a safe \" + expectedType + \", got a \" + value.getTypeName() + \" \" +<\/p><p>                \"(see http://g.co/ng/security#xss)\");<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomSanitizerImpl.prototype.bypassSecurityTrustHtml = function (value) { return new SafeHtmlImpl(value); };<\/p><p>    /**<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomSanitizerImpl.prototype.bypassSecurityTrustStyle = function (value) { return new SafeStyleImpl(value); };<\/p><p>    /**<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomSanitizerImpl.prototype.bypassSecurityTrustScript = function (value) { return new SafeScriptImpl(value); };<\/p><p>    /**<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomSanitizerImpl.prototype.bypassSecurityTrustUrl = function (value) { return new SafeUrlImpl(value); };<\/p><p>    /**<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DomSanitizerImpl.prototype.bypassSecurityTrustResourceUrl = function (value) {<\/p><p>        return new SafeResourceUrlImpl(value);<\/p><p>    };<\/p><p>    return DomSanitizerImpl;<\/p><p>}(DomSanitizer));<\/p><p>DomSanitizerImpl.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injectable\"] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>DomSanitizerImpl.ctorParameters = function () { return [<\/p><p>    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Inject\"], args: [DOCUMENT$1,] },] },<\/p><p>]; };<\/p><p>/**<\/p><p> * @abstract<\/p><p> */<\/p><p>var SafeValueImpl = (function () {<\/p><p>    /**<\/p><p>     * @param {?} changingThisBreaksApplicationSecurity<\/p><p>     */<\/p><p>    function SafeValueImpl(changingThisBreaksApplicationSecurity) {<\/p><p>        this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;<\/p><p>        // empty<\/p><p>    }<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    SafeValueImpl.prototype.getTypeName = function () { };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    SafeValueImpl.prototype.toString = function () {<\/p><p>        return \"SafeValue must use [property]=binding: \" + this.changingThisBreaksApplicationSecurity +<\/p><p>            \" (see http://g.co/ng/security#xss)\";<\/p><p>    };<\/p><p>    return SafeValueImpl;<\/p><p>}());<\/p><p>var SafeHtmlImpl = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](SafeHtmlImpl, _super);<\/p><p>    function SafeHtmlImpl() {<\/p><p>        return _super !== null && _super.apply(this, arguments) || this;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    SafeHtmlImpl.prototype.getTypeName = function () { return 'HTML'; };<\/p><p>    return SafeHtmlImpl;<\/p><p>}(SafeValueImpl));<\/p><p>var SafeStyleImpl = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](SafeStyleImpl, _super);<\/p><p>    function SafeStyleImpl() {<\/p><p>        return _super !== null && _super.apply(this, arguments) || this;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    SafeStyleImpl.prototype.getTypeName = function () { return 'Style'; };<\/p><p>    return SafeStyleImpl;<\/p><p>}(SafeValueImpl));<\/p><p>var SafeScriptImpl = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](SafeScriptImpl, _super);<\/p><p>    function SafeScriptImpl() {<\/p><p>        return _super !== null && _super.apply(this, arguments) || this;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    SafeScriptImpl.prototype.getTypeName = function () { return 'Script'; };<\/p><p>    return SafeScriptImpl;<\/p><p>}(SafeValueImpl));<\/p><p>var SafeUrlImpl = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](SafeUrlImpl, _super);<\/p><p>    function SafeUrlImpl() {<\/p><p>        return _super !== null && _super.apply(this, arguments) || this;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    SafeUrlImpl.prototype.getTypeName = function () { return 'URL'; };<\/p><p>    return SafeUrlImpl;<\/p><p>}(SafeValueImpl));<\/p><p>var SafeResourceUrlImpl = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](SafeResourceUrlImpl, _super);<\/p><p>    function SafeResourceUrlImpl() {<\/p><p>        return _super !== null && _super.apply(this, arguments) || this;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    SafeResourceUrlImpl.prototype.getTypeName = function () { return 'ResourceURL'; };<\/p><p>    return SafeResourceUrlImpl;<\/p><p>}(SafeValueImpl));<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var INTERNAL_BROWSER_PLATFORM_PROVIDERS = [<\/p><p>    { provide: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"PLATFORM_ID\"], useValue: __WEBPACK_IMPORTED_MODULE_1__angular_common__[\"ɵPLATFORM_BROWSER_ID\"] },<\/p><p>    { provide: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"PLATFORM_INITIALIZER\"], useValue: initDomAdapter, multi: true },<\/p><p>    { provide: __WEBPACK_IMPORTED_MODULE_1__angular_common__[\"PlatformLocation\"], useClass: BrowserPlatformLocation },<\/p><p>    { provide: DOCUMENT$1, useFactory: _document, deps: [] },<\/p><p>];<\/p><p>/**<\/p><p> * \\@security Replacing built-in sanitization providers exposes the application to XSS risks.<\/p><p> * Attacker-controlled data introduced by an unsanitized provider could expose your<\/p><p> * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var BROWSER_SANITIZATION_PROVIDERS = [<\/p><p>    { provide: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Sanitizer\"], useExisting: DomSanitizer },<\/p><p>    { provide: DomSanitizer, useClass: DomSanitizerImpl },<\/p><p>];<\/p><p>/**<\/p><p> * \\@stable<\/p><p> */<\/p><p>var platformBrowser = Object(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"createPlatformFactory\"])(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"platformCore\"], 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);<\/p><p>/**<\/p><p> * @return {?}<\/p><p> */<\/p><p>function initDomAdapter() {<\/p><p>    BrowserDomAdapter.makeCurrent();<\/p><p>    BrowserGetTestability.init();<\/p><p>}<\/p><p>/**<\/p><p> * @return {?}<\/p><p> */<\/p><p>function errorHandler() {<\/p><p>    return new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ErrorHandler\"]();<\/p><p>}<\/p><p>/**<\/p><p> * @return {?}<\/p><p> */<\/p><p>function _document() {<\/p><p>    return document;<\/p><p>}<\/p><p>/**<\/p><p> * The ng module for the browser.<\/p><p> *<\/p><p> * \\@stable<\/p><p> */<\/p><p>var BrowserModule = (function () {<\/p><p>    /**<\/p><p>     * @param {?} parentModule<\/p><p>     */<\/p><p>    function BrowserModule(parentModule) {<\/p><p>        if (parentModule) {<\/p><p>            throw new Error(\"BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.\");<\/p><p>        }<\/p><p>    }<\/p><p>    /**<\/p><p>     * Configures a browser-based application to transition from a server-rendered app, if<\/p><p>     * one is present on the page. The specified parameters must include an application id,<\/p><p>     * which must match between the client and server applications.<\/p><p>     *<\/p><p>     * \\@experimental<\/p><p>     * @param {?} params<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserModule.withServerTransition = function (params) {<\/p><p>        return {<\/p><p>            ngModule: BrowserModule,<\/p><p>            providers: [<\/p><p>                { provide: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"APP_ID\"], useValue: params.appId },<\/p><p>                { provide: TRANSITION_ID, useExisting: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"APP_ID\"] },<\/p><p>                SERVER_TRANSITION_PROVIDERS,<\/p><p>            ],<\/p><p>        };<\/p><p>    };<\/p><p>    return BrowserModule;<\/p><p>}());<\/p><p>BrowserModule.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"NgModule\"], args: [{<\/p><p>                providers: [<\/p><p>                    BROWSER_SANITIZATION_PROVIDERS,<\/p><p>                    { provide: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ErrorHandler\"], useFactory: errorHandler, deps: [] },<\/p><p>                    { provide: EVENT_MANAGER_PLUGINS, useClass: DomEventsPlugin, multi: true },<\/p><p>                    { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true },<\/p><p>                    { provide: EVENT_MANAGER_PLUGINS, useClass: HammerGesturesPlugin, multi: true },<\/p><p>                    { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig },<\/p><p>                    DomRendererFactory2,<\/p><p>                    { provide: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"RendererFactory2\"], useExisting: DomRendererFactory2 },<\/p><p>                    { provide: SharedStylesHost, useExisting: DomSharedStylesHost },<\/p><p>                    DomSharedStylesHost,<\/p><p>                    __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Testability\"],<\/p><p>                    EventManager,<\/p><p>                    ELEMENT_PROBE_PROVIDERS,<\/p><p>                    Meta,<\/p><p>                    Title,<\/p><p>                ],<\/p><p>                exports: [__WEBPACK_IMPORTED_MODULE_1__angular_common__[\"CommonModule\"], __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ApplicationModule\"]]<\/p><p>            },] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>BrowserModule.ctorParameters = function () { return [<\/p><p>    { type: BrowserModule, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"SkipSelf\"] },] },<\/p><p>]; };<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var win = typeof window !== 'undefined' && window || {};<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var ChangeDetectionPerfRecord = (function () {<\/p><p>    /**<\/p><p>     * @param {?} msPerTick<\/p><p>     * @param {?} numTicks<\/p><p>     */<\/p><p>    function ChangeDetectionPerfRecord(msPerTick, numTicks) {<\/p><p>        this.msPerTick = msPerTick;<\/p><p>        this.numTicks = numTicks;<\/p><p>    }<\/p><p>    return ChangeDetectionPerfRecord;<\/p><p>}());<\/p><p>/**<\/p><p> * Entry point for all Angular profiling-related debug tools. This object<\/p><p> * corresponds to the `ng.profiler` in the dev console.<\/p><p> */<\/p><p>var AngularProfiler = (function () {<\/p><p>    /**<\/p><p>     * @param {?} ref<\/p><p>     */<\/p><p>    function AngularProfiler(ref) {<\/p><p>        this.appRef = ref.injector.get(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ApplicationRef\"]);<\/p><p>    }<\/p><p>    /**<\/p><p>     * Exercises change detection in a loop and then prints the average amount of<\/p><p>     * time in milliseconds how long a single round of change detection takes for<\/p><p>     * the current state of the UI. It runs a minimum of 5 rounds for a minimum<\/p><p>     * of 500 milliseconds.<\/p><p>     *<\/p><p>     * Optionally, a user may pass a `config` parameter containing a map of<\/p><p>     * options. Supported options are:<\/p><p>     *<\/p><p>     * `record` (boolean) - causes the profiler to record a CPU profile while<\/p><p>     * it exercises the change detector. Example:<\/p><p>     *<\/p><p>     * ```<\/p><p>     * ng.profiler.timeChangeDetection({record: true})<\/p><p>     * ```<\/p><p>     * @param {?} config<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AngularProfiler.prototype.timeChangeDetection = function (config) {<\/p><p>        var /** @type {?} */ record = config && config['record'];<\/p><p>        var /** @type {?} */ profileName = 'Change Detection';<\/p><p>        // Profiler is not available in Android browsers, nor in IE 9 without dev tools opened<\/p><p>        var /** @type {?} */ isProfilerAvailable = win.console.profile != null;<\/p><p>        if (record && isProfilerAvailable) {<\/p><p>            win.console.profile(profileName);<\/p><p>        }<\/p><p>        var /** @type {?} */ start = getDOM().performanceNow();<\/p><p>        var /** @type {?} */ numTicks = 0;<\/p><p>        while (numTicks < 5 || (getDOM().performanceNow() - start) < 500) {<\/p><p>            this.appRef.tick();<\/p><p>            numTicks++;<\/p><p>        }<\/p><p>        var /** @type {?} */ end = getDOM().performanceNow();<\/p><p>        if (record && isProfilerAvailable) {<\/p><p>            // need to cast to <any> because type checker thinks there's no argument<\/p><p>            // while in fact there is:<\/p><p>            //<\/p><p>            // https://developer.mozilla.org/en-US/docs/Web/API/Console/profileEnd<\/p><p>            ((win.console.profileEnd))(profileName);<\/p><p>        }<\/p><p>        var /** @type {?} */ msPerTick = (end - start) / numTicks;<\/p><p>        win.console.log(\"ran \" + numTicks + \" change detection cycles\");<\/p><p>        win.console.log(msPerTick.toFixed(2) + \" ms per check\");<\/p><p>        return new ChangeDetectionPerfRecord(msPerTick, numTicks);<\/p><p>    };<\/p><p>    return AngularProfiler;<\/p><p>}());<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var PROFILER_GLOBAL_NAME = 'profiler';<\/p><p>/**<\/p><p> * Enabled Angular debug tools that are accessible via your browser's<\/p><p> * developer console.<\/p><p> *<\/p><p> * Usage:<\/p><p> *<\/p><p> * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)<\/p><p> * 1. Type `ng.` (usually the console will show auto-complete suggestion)<\/p><p> * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`<\/p><p> *    then hit Enter.<\/p><p> *<\/p><p> * \\@experimental All debugging apis are currently experimental.<\/p><p> * @template T<\/p><p> * @param {?} ref<\/p><p> * @return {?}<\/p><p> */<\/p><p>function enableDebugTools(ref) {<\/p><p>    exportNgVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));<\/p><p>    return ref;<\/p><p>}<\/p><p>/**<\/p><p> * Disables Angular tools.<\/p><p> *<\/p><p> * \\@experimental All debugging apis are currently experimental.<\/p><p> * @return {?}<\/p><p> */<\/p><p>function disableDebugTools() {<\/p><p>    exportNgVar(PROFILER_GLOBAL_NAME, null);<\/p><p>}<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * Predicates for use with {\\@link DebugElement}'s query functions.<\/p><p> *<\/p><p> * \\@experimental All debugging apis are currently experimental.<\/p><p> */<\/p><p>var By = (function () {<\/p><p>    function By() {<\/p><p>    }<\/p><p>    /**<\/p><p>     * Match all elements.<\/p><p>     *<\/p><p>     * ## Example<\/p><p>     *<\/p><p>     * {\\@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    By.all = function () { return function (debugElement) { return true; }; };<\/p><p>    /**<\/p><p>     * Match elements by the given CSS selector.<\/p><p>     *<\/p><p>     * ## Example<\/p><p>     *<\/p><p>     * {\\@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}<\/p><p>     * @param {?} selector<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    By.css = function (selector) {<\/p><p>        return function (debugElement) {<\/p><p>            return debugElement.nativeElement != null ?<\/p><p>                getDOM().elementMatches(debugElement.nativeElement, selector) :<\/p><p>                false;<\/p><p>        };<\/p><p>    };<\/p><p>    /**<\/p><p>     * Match elements that have the given directive present.<\/p><p>     *<\/p><p>     * ## Example<\/p><p>     *<\/p><p>     * {\\@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}<\/p><p>     * @param {?} type<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    By.directive = function (type) {<\/p><p>        return function (debugElement) { return ((debugElement.providerTokens)).indexOf(type) !== -1; };<\/p><p>    };<\/p><p>    return By;<\/p><p>}());<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * @module<\/p><p> * @description<\/p><p> * Entry point for all public APIs of the common package.<\/p><p> */<\/p><p>/**<\/p><p> * \\@stable<\/p><p> */<\/p><p>var VERSION = new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Version\"]('4.3.5');<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * @module<\/p><p> * @description<\/p><p> * Entry point for all public APIs of the platform-browser package.<\/p><p> */<\/p><p>// This file only reexports content of the `src` folder. Keep it that way.<\/p><p>/**<\/p><p> * Generated bundle index. Do not edit.<\/p><p> */<\/p><p><\/p><p>//# sourceMappingURL=platform-browser.es5.js.map<\/p><p><\/p><p><\/p><p>/***/ }),<\/p><p><\/p><p>/***/ \"../../../platform-browser/@angular/platform-browser/animations.es5.js\":<\/p><p>/***/ (function(module, __webpack_exports__, __webpack_require__) {<\/p><p><\/p><p>\"use strict\";<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return BrowserAnimationsModule; });<\/p><p>/* unused harmony export NoopAnimationsModule */<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return BrowserAnimationBuilder; });<\/p><p>/* unused harmony export ɵBrowserAnimationFactory */<\/p><p>/* unused harmony export ɵAnimationRenderer */<\/p><p>/* unused harmony export ɵAnimationRendererFactory */<\/p><p>/* unused harmony export ɵa */<\/p><p>/* unused harmony export ɵf */<\/p><p>/* unused harmony export ɵg */<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return InjectableAnimationEngine; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return instantiateDefaultStyleNormalizer; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return instantiateRendererFactory; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return instantiateSupportedAnimationDriver; });<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(\"../../../../tslib/tslib.es6.js\");<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_core__ = __webpack_require__(\"../../../core/@angular/core.es5.js\");<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_platform_browser__ = __webpack_require__(\"../../../platform-browser/@angular/platform-browser.es5.js\");<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_animations__ = __webpack_require__(\"../../../animations/@angular/animations.es5.js\");<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__angular_animations_browser__ = __webpack_require__(\"../../../animations/@angular/animations/browser.es5.js\");<\/p><p><\/p><p>/**<\/p><p> * @license Angular v4.3.5<\/p><p> * (c) 2010-2017 Google, Inc. https://angular.io/<\/p><p> * License: MIT<\/p><p> */<\/p><p><\/p><p><\/p><p><\/p><p><\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var BrowserAnimationBuilder = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](BrowserAnimationBuilder, _super);<\/p><p>    /**<\/p><p>     * @param {?} rootRenderer<\/p><p>     */<\/p><p>    function BrowserAnimationBuilder(rootRenderer) {<\/p><p>        var _this = _super.call(this) || this;<\/p><p>        _this._nextAnimationId = 0;<\/p><p>        var typeData = {<\/p><p>            id: '0',<\/p><p>            encapsulation: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"ViewEncapsulation\"].None,<\/p><p>            styles: [],<\/p><p>            data: { animation: [] }<\/p><p>        };<\/p><p>        _this._renderer = rootRenderer.createRenderer(document.body, typeData);<\/p><p>        return _this;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} animation<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserAnimationBuilder.prototype.build = function (animation) {<\/p><p>        var /** @type {?} */ id = this._nextAnimationId.toString();<\/p><p>        this._nextAnimationId++;<\/p><p>        var /** @type {?} */ entry = Array.isArray(animation) ? Object(__WEBPACK_IMPORTED_MODULE_3__angular_animations__[\"sequence\"])(animation) : animation;<\/p><p>        issueAnimationCommand(this._renderer, null, id, 'register', [entry]);<\/p><p>        return new BrowserAnimationFactory(id, this._renderer);<\/p><p>    };<\/p><p>    return BrowserAnimationBuilder;<\/p><p>}(__WEBPACK_IMPORTED_MODULE_3__angular_animations__[\"AnimationBuilder\"]));<\/p><p>BrowserAnimationBuilder.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Injectable\"] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>BrowserAnimationBuilder.ctorParameters = function () { return [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"RendererFactory2\"], },<\/p><p>]; };<\/p><p>var BrowserAnimationFactory = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](BrowserAnimationFactory, _super);<\/p><p>    /**<\/p><p>     * @param {?} _id<\/p><p>     * @param {?} _renderer<\/p><p>     */<\/p><p>    function BrowserAnimationFactory(_id, _renderer) {<\/p><p>        var _this = _super.call(this) || this;<\/p><p>        _this._id = _id;<\/p><p>        _this._renderer = _renderer;<\/p><p>        return _this;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @param {?=} options<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BrowserAnimationFactory.prototype.create = function (element, options) {<\/p><p>        return new RendererAnimationPlayer(this._id, element, options || {}, this._renderer);<\/p><p>    };<\/p><p>    return BrowserAnimationFactory;<\/p><p>}(__WEBPACK_IMPORTED_MODULE_3__angular_animations__[\"AnimationFactory\"]));<\/p><p>var RendererAnimationPlayer = (function () {<\/p><p>    /**<\/p><p>     * @param {?} id<\/p><p>     * @param {?} element<\/p><p>     * @param {?} options<\/p><p>     * @param {?} _renderer<\/p><p>     */<\/p><p>    function RendererAnimationPlayer(id, element, options, _renderer) {<\/p><p>        this.id = id;<\/p><p>        this.element = element;<\/p><p>        this._renderer = _renderer;<\/p><p>        this.parentPlayer = null;<\/p><p>        this._started = false;<\/p><p>        this.totalTime = 0;<\/p><p>        this._command('create', options);<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} eventName<\/p><p>     * @param {?} callback<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RendererAnimationPlayer.prototype._listen = function (eventName, callback) {<\/p><p>        return this._renderer.listen(this.element, \"@@\" + this.id + \":\" + eventName, callback);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} command<\/p><p>     * @param {...?} args<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RendererAnimationPlayer.prototype._command = function (command) {<\/p><p>        var args = [];<\/p><p>        for (var _i = 1; _i < arguments.length; _i++) {<\/p><p>            args[_i - 1] = arguments[_i];<\/p><p>        }<\/p><p>        return issueAnimationCommand(this._renderer, this.element, this.id, command, args);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} fn<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RendererAnimationPlayer.prototype.onDone = function (fn) { this._listen('done', fn); };<\/p><p>    /**<\/p><p>     * @param {?} fn<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RendererAnimationPlayer.prototype.onStart = function (fn) { this._listen('start', fn); };<\/p><p>    /**<\/p><p>     * @param {?} fn<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RendererAnimationPlayer.prototype.onDestroy = function (fn) { this._listen('destroy', fn); };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RendererAnimationPlayer.prototype.init = function () { this._command('init'); };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RendererAnimationPlayer.prototype.hasStarted = function () { return this._started; };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RendererAnimationPlayer.prototype.play = function () {<\/p><p>        this._command('play');<\/p><p>        this._started = true;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RendererAnimationPlayer.prototype.pause = function () { this._command('pause'); };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RendererAnimationPlayer.prototype.restart = function () { this._command('restart'); };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RendererAnimationPlayer.prototype.finish = function () { this._command('finish'); };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RendererAnimationPlayer.prototype.destroy = function () { this._command('destroy'); };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RendererAnimationPlayer.prototype.reset = function () { this._command('reset'); };<\/p><p>    /**<\/p><p>     * @param {?} p<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RendererAnimationPlayer.prototype.setPosition = function (p) { this._command('setPosition', p); };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RendererAnimationPlayer.prototype.getPosition = function () { return 0; };<\/p><p>    return RendererAnimationPlayer;<\/p><p>}());<\/p><p>/**<\/p><p> * @param {?} renderer<\/p><p> * @param {?} element<\/p><p> * @param {?} id<\/p><p> * @param {?} command<\/p><p> * @param {?} args<\/p><p> * @return {?}<\/p><p> */<\/p><p>function issueAnimationCommand(renderer, element, id, command, args) {<\/p><p>    return renderer.setProperty(element, \"@@\" + id + \":\" + command, args);<\/p><p>}<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var ANIMATION_PREFIX = '@';<\/p><p>var DISABLE_ANIMATIONS_FLAG = '@.disabled';<\/p><p>var AnimationRendererFactory = (function () {<\/p><p>    /**<\/p><p>     * @param {?} delegate<\/p><p>     * @param {?} engine<\/p><p>     * @param {?} _zone<\/p><p>     */<\/p><p>    function AnimationRendererFactory(delegate, engine, _zone) {<\/p><p>        this.delegate = delegate;<\/p><p>        this.engine = engine;<\/p><p>        this._zone = _zone;<\/p><p>        this._currentId = 0;<\/p><p>        this._microtaskId = 1;<\/p><p>        this._animationCallbacksBuffer = [];<\/p><p>        this._rendererCache = new Map();<\/p><p>        this._cdRecurDepth = 0;<\/p><p>        engine.onRemovalComplete = function (element, delegate) {<\/p><p>            // Note: if an component element has a leave animation, and the component<\/p><p>            // a host leave animation, the view engine will call `removeChild` for the parent<\/p><p>            // component renderer as well as for the child component renderer.<\/p><p>            // Therefore, we need to check if we already removed the element.<\/p><p>            if (delegate && delegate.parentNode(element)) {<\/p><p>                delegate.removeChild(element.parentNode, element);<\/p><p>            }<\/p><p>        };<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} hostElement<\/p><p>     * @param {?} type<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AnimationRendererFactory.prototype.createRenderer = function (hostElement, type) {<\/p><p>        var _this = this;<\/p><p>        var /** @type {?} */ EMPTY_NAMESPACE_ID = '';<\/p><p>        // cache the delegates to find out which cached delegate can<\/p><p>        // be used by which cached renderer<\/p><p>        var /** @type {?} */ delegate = this.delegate.createRenderer(hostElement, type);<\/p><p>        if (!hostElement || !type || !type.data || !type.data['animation']) {<\/p><p>            var /** @type {?} */ renderer = this._rendererCache.get(delegate);<\/p><p>            if (!renderer) {<\/p><p>                renderer = new BaseAnimationRenderer(EMPTY_NAMESPACE_ID, delegate, this.engine);<\/p><p>                // only cache this result when the base renderer is used<\/p><p>                this._rendererCache.set(delegate, renderer);<\/p><p>            }<\/p><p>            return renderer;<\/p><p>        }<\/p><p>        var /** @type {?} */ componentId = type.id;<\/p><p>        var /** @type {?} */ namespaceId = type.id + '-' + this._currentId;<\/p><p>        this._currentId++;<\/p><p>        this.engine.register(namespaceId, hostElement);<\/p><p>        var /** @type {?} */ animationTriggers = (type.data['animation']);<\/p><p>        animationTriggers.forEach(function (trigger) { return _this.engine.registerTrigger(componentId, namespaceId, hostElement, trigger.name, trigger); });<\/p><p>        return new AnimationRenderer(this, namespaceId, delegate, this.engine);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AnimationRendererFactory.prototype.begin = function () {<\/p><p>        this._cdRecurDepth++;<\/p><p>        if (this.delegate.begin) {<\/p><p>            this.delegate.begin();<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AnimationRendererFactory.prototype._scheduleCountTask = function () {<\/p><p>        var _this = this;<\/p><p>        Zone.current.scheduleMicroTask('incremenet the animation microtask', function () { return _this._microtaskId++; });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} count<\/p><p>     * @param {?} fn<\/p><p>     * @param {?} data<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AnimationRendererFactory.prototype.scheduleListenerCallback = function (count, fn, data) {<\/p><p>        var _this = this;<\/p><p>        if (count >= 0 && count < this._microtaskId) {<\/p><p>            this._zone.run(function () { return fn(data); });<\/p><p>            return;<\/p><p>        }<\/p><p>        if (this._animationCallbacksBuffer.length == 0) {<\/p><p>            Promise.resolve(null).then(function () {<\/p><p>                _this._zone.run(function () {<\/p><p>                    _this._animationCallbacksBuffer.forEach(function (tuple) {<\/p><p>                        var fn = tuple[0], data = tuple[1];<\/p><p>                        fn(data);<\/p><p>                    });<\/p><p>                    _this._animationCallbacksBuffer = [];<\/p><p>                });<\/p><p>            });<\/p><p>        }<\/p><p>        this._animationCallbacksBuffer.push([fn, data]);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AnimationRendererFactory.prototype.end = function () {<\/p><p>        var _this = this;<\/p><p>        this._cdRecurDepth--;<\/p><p>        // this is to prevent animations from running twice when an inner<\/p><p>        // component does CD when a parent component insted has inserted it<\/p><p>        if (this._cdRecurDepth == 0) {<\/p><p>            this._zone.runOutsideAngular(function () {<\/p><p>                _this._scheduleCountTask();<\/p><p>                _this.engine.flush(_this._microtaskId);<\/p><p>            });<\/p><p>        }<\/p><p>        if (this.delegate.end) {<\/p><p>            this.delegate.end();<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AnimationRendererFactory.prototype.whenRenderingDone = function () { return this.engine.whenRenderingDone(); };<\/p><p>    return AnimationRendererFactory;<\/p><p>}());<\/p><p>AnimationRendererFactory.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Injectable\"] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>AnimationRendererFactory.ctorParameters = function () { return [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"RendererFactory2\"], },<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_4__angular_animations_browser__[\"b\" /* ɵAnimationEngine */], },<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"NgZone\"], },<\/p><p>]; };<\/p><p>var BaseAnimationRenderer = (function () {<\/p><p>    /**<\/p><p>     * @param {?} namespaceId<\/p><p>     * @param {?} delegate<\/p><p>     * @param {?} engine<\/p><p>     */<\/p><p>    function BaseAnimationRenderer(namespaceId, delegate, engine) {<\/p><p>        this.namespaceId = namespaceId;<\/p><p>        this.delegate = delegate;<\/p><p>        this.engine = engine;<\/p><p>        this.destroyNode = this.delegate.destroyNode ? function (n) { return delegate.destroyNode(n); } : null;<\/p><p>    }<\/p><p>    Object.defineProperty(BaseAnimationRenderer.prototype, \"data\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this.delegate.data; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BaseAnimationRenderer.prototype.destroy = function () {<\/p><p>        this.engine.destroy(this.namespaceId, this.delegate);<\/p><p>        this.delegate.destroy();<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} name<\/p><p>     * @param {?=} namespace<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BaseAnimationRenderer.prototype.createElement = function (name, namespace) {<\/p><p>        return this.delegate.createElement(name, namespace);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BaseAnimationRenderer.prototype.createComment = function (value) { return this.delegate.createComment(value); };<\/p><p>    /**<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BaseAnimationRenderer.prototype.createText = function (value) { return this.delegate.createText(value); };<\/p><p>    /**<\/p><p>     * @param {?} parent<\/p><p>     * @param {?} newChild<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BaseAnimationRenderer.prototype.appendChild = function (parent, newChild) {<\/p><p>        this.delegate.appendChild(parent, newChild);<\/p><p>        this.engine.onInsert(this.namespaceId, newChild, parent, false);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} parent<\/p><p>     * @param {?} newChild<\/p><p>     * @param {?} refChild<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BaseAnimationRenderer.prototype.insertBefore = function (parent, newChild, refChild) {<\/p><p>        this.delegate.insertBefore(parent, newChild, refChild);<\/p><p>        this.engine.onInsert(this.namespaceId, newChild, parent, true);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} parent<\/p><p>     * @param {?} oldChild<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BaseAnimationRenderer.prototype.removeChild = function (parent, oldChild) {<\/p><p>        this.engine.onRemove(this.namespaceId, oldChild, this.delegate);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} selectorOrNode<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BaseAnimationRenderer.prototype.selectRootElement = function (selectorOrNode) { return this.delegate.selectRootElement(selectorOrNode); };<\/p><p>    /**<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BaseAnimationRenderer.prototype.parentNode = function (node) { return this.delegate.parentNode(node); };<\/p><p>    /**<\/p><p>     * @param {?} node<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BaseAnimationRenderer.prototype.nextSibling = function (node) { return this.delegate.nextSibling(node); };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @param {?} name<\/p><p>     * @param {?} value<\/p><p>     * @param {?=} namespace<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BaseAnimationRenderer.prototype.setAttribute = function (el, name, value, namespace) {<\/p><p>        this.delegate.setAttribute(el, name, value, namespace);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @param {?} name<\/p><p>     * @param {?=} namespace<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BaseAnimationRenderer.prototype.removeAttribute = function (el, name, namespace) {<\/p><p>        this.delegate.removeAttribute(el, name, namespace);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @param {?} name<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BaseAnimationRenderer.prototype.addClass = function (el, name) { this.delegate.addClass(el, name); };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @param {?} name<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BaseAnimationRenderer.prototype.removeClass = function (el, name) { this.delegate.removeClass(el, name); };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @param {?} style<\/p><p>     * @param {?} value<\/p><p>     * @param {?=} flags<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BaseAnimationRenderer.prototype.setStyle = function (el, style, value, flags) {<\/p><p>        this.delegate.setStyle(el, style, value, flags);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @param {?} style<\/p><p>     * @param {?=} flags<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BaseAnimationRenderer.prototype.removeStyle = function (el, style, flags) {<\/p><p>        this.delegate.removeStyle(el, style, flags);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @param {?} name<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BaseAnimationRenderer.prototype.setProperty = function (el, name, value) {<\/p><p>        if (name.charAt(0) == ANIMATION_PREFIX && name == DISABLE_ANIMATIONS_FLAG) {<\/p><p>            this.disableAnimations(el, !!value);<\/p><p>        }<\/p><p>        else {<\/p><p>            this.delegate.setProperty(el, name, value);<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} node<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BaseAnimationRenderer.prototype.setValue = function (node, value) { this.delegate.setValue(node, value); };<\/p><p>    /**<\/p><p>     * @param {?} target<\/p><p>     * @param {?} eventName<\/p><p>     * @param {?} callback<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BaseAnimationRenderer.prototype.listen = function (target, eventName, callback) {<\/p><p>        return this.delegate.listen(target, eventName, callback);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} element<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    BaseAnimationRenderer.prototype.disableAnimations = function (element, value) {<\/p><p>        this.engine.disableAnimations(element, value);<\/p><p>    };<\/p><p>    return BaseAnimationRenderer;<\/p><p>}());<\/p><p>var AnimationRenderer = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](AnimationRenderer, _super);<\/p><p>    /**<\/p><p>     * @param {?} factory<\/p><p>     * @param {?} namespaceId<\/p><p>     * @param {?} delegate<\/p><p>     * @param {?} engine<\/p><p>     */<\/p><p>    function AnimationRenderer(factory, namespaceId, delegate, engine) {<\/p><p>        var _this = _super.call(this, namespaceId, delegate, engine) || this;<\/p><p>        _this.factory = factory;<\/p><p>        _this.namespaceId = namespaceId;<\/p><p>        return _this;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} el<\/p><p>     * @param {?} name<\/p><p>     * @param {?} value<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AnimationRenderer.prototype.setProperty = function (el, name, value) {<\/p><p>        if (name.charAt(0) == ANIMATION_PREFIX) {<\/p><p>            if (name.charAt(1) == '.' && name == DISABLE_ANIMATIONS_FLAG) {<\/p><p>                this.disableAnimations(el, !!value);<\/p><p>            }<\/p><p>            else {<\/p><p>                this.engine.process(this.namespaceId, el, name.substr(1), value);<\/p><p>            }<\/p><p>        }<\/p><p>        else {<\/p><p>            this.delegate.setProperty(el, name, value);<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} target<\/p><p>     * @param {?} eventName<\/p><p>     * @param {?} callback<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    AnimationRenderer.prototype.listen = function (target, eventName, callback) {<\/p><p>        var _this = this;<\/p><p>        if (eventName.charAt(0) == ANIMATION_PREFIX) {<\/p><p>            var /** @type {?} */ element = resolveElementFromTarget(target);<\/p><p>            var /** @type {?} */ name = eventName.substr(1);<\/p><p>            var /** @type {?} */ phase = '';<\/p><p>            // @listener.phase is for trigger animation callbacks<\/p><p>            // @@listener is for animation builder callbacks<\/p><p>            if (name.charAt(0) != ANIMATION_PREFIX) {<\/p><p>                _a = parseTriggerCallbackName(name), name = _a[0], phase = _a[1];<\/p><p>            }<\/p><p>            return this.engine.listen(this.namespaceId, element, name, phase, function (event) {<\/p><p>                var /** @type {?} */ countId = ((event))['_data'] || -1;<\/p><p>                _this.factory.scheduleListenerCallback(countId, callback, event);<\/p><p>            });<\/p><p>        }<\/p><p>        return this.delegate.listen(target, eventName, callback);<\/p><p>        var _a;<\/p><p>    };<\/p><p>    return AnimationRenderer;<\/p><p>}(BaseAnimationRenderer));<\/p><p>/**<\/p><p> * @param {?} target<\/p><p> * @return {?}<\/p><p> */<\/p><p>function resolveElementFromTarget(target) {<\/p><p>    switch (target) {<\/p><p>        case 'body':<\/p><p>            return document.body;<\/p><p>        case 'document':<\/p><p>            return document;<\/p><p>        case 'window':<\/p><p>            return window;<\/p><p>        default:<\/p><p>            return target;<\/p><p>    }<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} triggerName<\/p><p> * @return {?}<\/p><p> */<\/p><p>function parseTriggerCallbackName(triggerName) {<\/p><p>    var /** @type {?} */ dotIndex = triggerName.indexOf('.');<\/p><p>    var /** @type {?} */ trigger = triggerName.substring(0, dotIndex);<\/p><p>    var /** @type {?} */ phase = triggerName.substr(dotIndex + 1);<\/p><p>    return [trigger, phase];<\/p><p>}<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var InjectableAnimationEngine = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](InjectableAnimationEngine, _super);<\/p><p>    /**<\/p><p>     * @param {?} driver<\/p><p>     * @param {?} normalizer<\/p><p>     */<\/p><p>    function InjectableAnimationEngine(driver, normalizer) {<\/p><p>        return _super.call(this, driver, normalizer) || this;<\/p><p>    }<\/p><p>    return InjectableAnimationEngine;<\/p><p>}(__WEBPACK_IMPORTED_MODULE_4__angular_animations_browser__[\"b\" /* ɵAnimationEngine */]));<\/p><p>InjectableAnimationEngine.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Injectable\"] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>InjectableAnimationEngine.ctorParameters = function () { return [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_4__angular_animations_browser__[\"a\" /* AnimationDriver */], },<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_4__angular_animations_browser__[\"c\" /* ɵAnimationStyleNormalizer */], },<\/p><p>]; };<\/p><p>/**<\/p><p> * @return {?}<\/p><p> */<\/p><p>function instantiateSupportedAnimationDriver() {<\/p><p>    if (Object(__WEBPACK_IMPORTED_MODULE_4__angular_animations_browser__[\"g\" /* ɵsupportsWebAnimations */])()) {<\/p><p>        return new __WEBPACK_IMPORTED_MODULE_4__angular_animations_browser__[\"e\" /* ɵWebAnimationsDriver */]();<\/p><p>    }<\/p><p>    return new __WEBPACK_IMPORTED_MODULE_4__angular_animations_browser__[\"d\" /* ɵNoopAnimationDriver */]();<\/p><p>}<\/p><p>/**<\/p><p> * @return {?}<\/p><p> */<\/p><p>function instantiateDefaultStyleNormalizer() {<\/p><p>    return new __WEBPACK_IMPORTED_MODULE_4__angular_animations_browser__[\"f\" /* ɵWebAnimationsStyleNormalizer */]();<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} renderer<\/p><p> * @param {?} engine<\/p><p> * @param {?} zone<\/p><p> * @return {?}<\/p><p> */<\/p><p>function instantiateRendererFactory(renderer, engine, zone) {<\/p><p>    return new AnimationRendererFactory(renderer, engine, zone);<\/p><p>}<\/p><p>var SHARED_ANIMATION_PROVIDERS = [<\/p><p>    { provide: __WEBPACK_IMPORTED_MODULE_3__angular_animations__[\"AnimationBuilder\"], useClass: BrowserAnimationBuilder },<\/p><p>    { provide: __WEBPACK_IMPORTED_MODULE_4__angular_animations_browser__[\"c\" /* ɵAnimationStyleNormalizer */], useFactory: instantiateDefaultStyleNormalizer },<\/p><p>    { provide: __WEBPACK_IMPORTED_MODULE_4__angular_animations_browser__[\"b\" /* ɵAnimationEngine */], useClass: InjectableAnimationEngine }, {<\/p><p>        provide: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"RendererFactory2\"],<\/p><p>        useFactory: instantiateRendererFactory,<\/p><p>        deps: [__WEBPACK_IMPORTED_MODULE_2__angular_platform_browser__[\"ɵDomRendererFactory2\"], __WEBPACK_IMPORTED_MODULE_4__angular_animations_browser__[\"b\" /* ɵAnimationEngine */], __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"NgZone\"]]<\/p><p>    }<\/p><p>];<\/p><p>/**<\/p><p> * Separate providers from the actual module so that we can do a local modification in Google3 to<\/p><p> * include them in the BrowserModule.<\/p><p> */<\/p><p>var BROWSER_ANIMATIONS_PROVIDERS = [<\/p><p>    { provide: __WEBPACK_IMPORTED_MODULE_4__angular_animations_browser__[\"a\" /* AnimationDriver */], useFactory: instantiateSupportedAnimationDriver }<\/p><p>].concat(SHARED_ANIMATION_PROVIDERS);<\/p><p>/**<\/p><p> * Separate providers from the actual module so that we can do a local modification in Google3 to<\/p><p> * include them in the BrowserTestingModule.<\/p><p> */<\/p><p>var BROWSER_NOOP_ANIMATIONS_PROVIDERS = [{ provide: __WEBPACK_IMPORTED_MODULE_4__angular_animations_browser__[\"a\" /* AnimationDriver */], useClass: __WEBPACK_IMPORTED_MODULE_4__angular_animations_browser__[\"d\" /* ɵNoopAnimationDriver */] }].concat(SHARED_ANIMATION_PROVIDERS);<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * \\@experimental Animation support is experimental.<\/p><p> */<\/p><p>var BrowserAnimationsModule = (function () {<\/p><p>    function BrowserAnimationsModule() {<\/p><p>    }<\/p><p>    return BrowserAnimationsModule;<\/p><p>}());<\/p><p>BrowserAnimationsModule.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"NgModule\"], args: [{<\/p><p>                exports: [__WEBPACK_IMPORTED_MODULE_2__angular_platform_browser__[\"BrowserModule\"]],<\/p><p>                providers: BROWSER_ANIMATIONS_PROVIDERS,<\/p><p>            },] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>BrowserAnimationsModule.ctorParameters = function () { return []; };<\/p><p>/**<\/p><p> * \\@experimental Animation support is experimental.<\/p><p> */<\/p><p>var NoopAnimationsModule = (function () {<\/p><p>    function NoopAnimationsModule() {<\/p><p>    }<\/p><p>    return NoopAnimationsModule;<\/p><p>}());<\/p><p>NoopAnimationsModule.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"NgModule\"], args: [{<\/p><p>                exports: [__WEBPACK_IMPORTED_MODULE_2__angular_platform_browser__[\"BrowserModule\"]],<\/p><p>                providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS,<\/p><p>            },] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>NoopAnimationsModule.ctorParameters = function () { return []; };<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * @module<\/p><p> * @description<\/p><p> * Entry point for all animation APIs of the animation browser package.<\/p><p> */<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * @module<\/p><p> * @description<\/p><p> * Entry point for all public APIs of the animation package.<\/p><p> */<\/p><p>/**<\/p><p> * Generated bundle index. Do not edit.<\/p><p> */<\/p><p><\/p><p>//# sourceMappingURL=animations.es5.js.map<\/p><p><\/p><p><\/p><p>/***/ }),<\/p><p><\/p><p>/***/ \"../../../router/@angular/router.es5.js\":<\/p><p>/***/ (function(module, __webpack_exports__, __webpack_require__) {<\/p><p><\/p><p>\"use strict\";<\/p><p>Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouterLink\", function() { return RouterLink; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouterLinkWithHref\", function() { return RouterLinkWithHref; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouterLinkActive\", function() { return RouterLinkActive; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouterOutlet\", function() { return RouterOutlet; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GuardsCheckEnd\", function() { return GuardsCheckEnd; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GuardsCheckStart\", function() { return GuardsCheckStart; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NavigationCancel\", function() { return NavigationCancel; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NavigationEnd\", function() { return NavigationEnd; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NavigationError\", function() { return NavigationError; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NavigationStart\", function() { return NavigationStart; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ResolveEnd\", function() { return ResolveEnd; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ResolveStart\", function() { return ResolveStart; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouteConfigLoadEnd\", function() { return RouteConfigLoadEnd; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouteConfigLoadStart\", function() { return RouteConfigLoadStart; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RoutesRecognized\", function() { return RoutesRecognized; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouteReuseStrategy\", function() { return RouteReuseStrategy; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Router\", function() { return Router; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ROUTES\", function() { return ROUTES; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ROUTER_CONFIGURATION\", function() { return ROUTER_CONFIGURATION; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ROUTER_INITIALIZER\", function() { return ROUTER_INITIALIZER; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouterModule\", function() { return RouterModule; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"provideRoutes\", function() { return provideRoutes; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ChildrenOutletContexts\", function() { return ChildrenOutletContexts; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OutletContext\", function() { return OutletContext; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NoPreloading\", function() { return NoPreloading; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PreloadAllModules\", function() { return PreloadAllModules; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PreloadingStrategy\", function() { return PreloadingStrategy; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouterPreloader\", function() { return RouterPreloader; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ActivatedRoute\", function() { return ActivatedRoute; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ActivatedRouteSnapshot\", function() { return ActivatedRouteSnapshot; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouterState\", function() { return RouterState; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouterStateSnapshot\", function() { return RouterStateSnapshot; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PRIMARY_OUTLET\", function() { return PRIMARY_OUTLET; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"convertToParamMap\", function() { return convertToParamMap; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UrlHandlingStrategy\", function() { return UrlHandlingStrategy; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DefaultUrlSerializer\", function() { return DefaultUrlSerializer; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UrlSegment\", function() { return UrlSegment; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UrlSegmentGroup\", function() { return UrlSegmentGroup; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UrlSerializer\", function() { return UrlSerializer; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UrlTree\", function() { return UrlTree; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"VERSION\", function() { return VERSION; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵROUTER_PROVIDERS\", function() { return ROUTER_PROVIDERS; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵflatten\", function() { return flatten; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵa\", function() { return ROUTER_FORROOT_GUARD; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵg\", function() { return RouterInitializer; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵh\", function() { return getAppInitializer; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵi\", function() { return getBootstrapListener; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵd\", function() { return provideForRootGuard; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵc\", function() { return provideLocationStrategy; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵj\", function() { return provideRouterInitializer; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵf\", function() { return rootRoute; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵb\", function() { return routerNgProbeToken; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵe\", function() { return setupRouter; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵk\", function() { return Tree; });<\/p><p>/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ɵl\", function() { return TreeNode; });<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(\"../../../../tslib/tslib.es6.js\");<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_common__ = __webpack_require__(\"../../../common/@angular/common.es5.js\");<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_core__ = __webpack_require__(\"../../../core/@angular/core.es5.js\");<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_BehaviorSubject__ = __webpack_require__(\"../../../../rxjs/BehaviorSubject.js\");<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_BehaviorSubject___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_rxjs_BehaviorSubject__);<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs_Subject__ = __webpack_require__(\"../../../../rxjs/Subject.js\");<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs_Subject___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_rxjs_Subject__);<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_rxjs_observable_from__ = __webpack_require__(\"../../../../rxjs/observable/from.js\");<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_rxjs_observable_from___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_from__);<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__ = __webpack_require__(\"../../../../rxjs/observable/of.js\");<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__);<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_rxjs_operator_concatMap__ = __webpack_require__(\"../../../../rxjs/operator/concatMap.js\");<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_rxjs_operator_concatMap___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_rxjs_operator_concatMap__);<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_rxjs_operator_every__ = __webpack_require__(\"../../../../rxjs/operator/every.js\");<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_rxjs_operator_every___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_rxjs_operator_every__);<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_rxjs_operator_first__ = __webpack_require__(\"../../../../rxjs/operator/first.js\");<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_rxjs_operator_first___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_rxjs_operator_first__);<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_rxjs_operator_last__ = __webpack_require__(\"../../../../rxjs/operator/last.js\");<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_rxjs_operator_last___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_rxjs_operator_last__);<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__ = __webpack_require__(\"../../../../rxjs/operator/map.js\");<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__);<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap__ = __webpack_require__(\"../../../../rxjs/operator/mergeMap.js\");<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap__);<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_rxjs_operator_reduce__ = __webpack_require__(\"../../../../rxjs/operator/reduce.js\");<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_rxjs_operator_reduce___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13_rxjs_operator_reduce__);<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_rxjs_Observable__ = __webpack_require__(\"../../../../rxjs/Observable.js\");<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_rxjs_Observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_14_rxjs_Observable__);<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_rxjs_operator_catch__ = __webpack_require__(\"../../../../rxjs/operator/catch.js\");<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_rxjs_operator_catch___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_15_rxjs_operator_catch__);<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_rxjs_operator_concatAll__ = __webpack_require__(\"../../../../rxjs/operator/concatAll.js\");<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_rxjs_operator_concatAll___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_16_rxjs_operator_concatAll__);<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_rxjs_util_EmptyError__ = __webpack_require__(\"../../../../rxjs/util/EmptyError.js\");<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_rxjs_util_EmptyError___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_17_rxjs_util_EmptyError__);<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18_rxjs_observable_fromPromise__ = __webpack_require__(\"../../../../rxjs/observable/fromPromise.js\");<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18_rxjs_observable_fromPromise___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_18_rxjs_observable_fromPromise__);<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19_rxjs_operator_mergeAll__ = __webpack_require__(\"../../../../rxjs/operator/mergeAll.js\");<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19_rxjs_operator_mergeAll___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_19_rxjs_operator_mergeAll__);<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__angular_platform_browser__ = __webpack_require__(\"../../../platform-browser/@angular/platform-browser.es5.js\");<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21_rxjs_operator_filter__ = __webpack_require__(\"../../../../rxjs/operator/filter.js\");<\/p><p>/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21_rxjs_operator_filter___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_21_rxjs_operator_filter__);<\/p><p><\/p><p>/**<\/p><p> * @license Angular v4.3.5<\/p><p> * (c) 2010-2017 Google, Inc. https://angular.io/<\/p><p> * License: MIT<\/p><p> */<\/p><p><\/p><p><\/p><p><\/p><p><\/p><p><\/p><p><\/p><p><\/p><p><\/p><p><\/p><p><\/p><p><\/p><p><\/p><p><\/p><p><\/p><p><\/p><p><\/p><p><\/p><p><\/p><p><\/p><p><\/p><p><\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * \\@whatItDoes Represents an event triggered when a navigation starts.<\/p><p> *<\/p><p> * \\@stable<\/p><p> */<\/p><p>var NavigationStart = (function () {<\/p><p>    /**<\/p><p>     * @param {?} id<\/p><p>     * @param {?} url<\/p><p>     */<\/p><p>    function NavigationStart(id, url) {<\/p><p>        this.id = id;<\/p><p>        this.url = url;<\/p><p>    }<\/p><p>    /**<\/p><p>     * \\@docsNotRequired<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    NavigationStart.prototype.toString = function () { return \"NavigationStart(id: \" + this.id + \", url: '\" + this.url + \"')\"; };<\/p><p>    return NavigationStart;<\/p><p>}());<\/p><p>/**<\/p><p> * \\@whatItDoes Represents an event triggered when a navigation ends successfully.<\/p><p> *<\/p><p> * \\@stable<\/p><p> */<\/p><p>var NavigationEnd = (function () {<\/p><p>    /**<\/p><p>     * @param {?} id<\/p><p>     * @param {?} url<\/p><p>     * @param {?} urlAfterRedirects<\/p><p>     */<\/p><p>    function NavigationEnd(id, url, urlAfterRedirects) {<\/p><p>        this.id = id;<\/p><p>        this.url = url;<\/p><p>        this.urlAfterRedirects = urlAfterRedirects;<\/p><p>    }<\/p><p>    /**<\/p><p>     * \\@docsNotRequired<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    NavigationEnd.prototype.toString = function () {<\/p><p>        return \"NavigationEnd(id: \" + this.id + \", url: '\" + this.url + \"', urlAfterRedirects: '\" + this.urlAfterRedirects + \"')\";<\/p><p>    };<\/p><p>    return NavigationEnd;<\/p><p>}());<\/p><p>/**<\/p><p> * \\@whatItDoes Represents an event triggered when a navigation is canceled.<\/p><p> *<\/p><p> * \\@stable<\/p><p> */<\/p><p>var NavigationCancel = (function () {<\/p><p>    /**<\/p><p>     * @param {?} id<\/p><p>     * @param {?} url<\/p><p>     * @param {?} reason<\/p><p>     */<\/p><p>    function NavigationCancel(id, url, reason) {<\/p><p>        this.id = id;<\/p><p>        this.url = url;<\/p><p>        this.reason = reason;<\/p><p>    }<\/p><p>    /**<\/p><p>     * \\@docsNotRequired<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    NavigationCancel.prototype.toString = function () { return \"NavigationCancel(id: \" + this.id + \", url: '\" + this.url + \"')\"; };<\/p><p>    return NavigationCancel;<\/p><p>}());<\/p><p>/**<\/p><p> * \\@whatItDoes Represents an event triggered when a navigation fails due to an unexpected error.<\/p><p> *<\/p><p> * \\@stable<\/p><p> */<\/p><p>var NavigationError = (function () {<\/p><p>    /**<\/p><p>     * @param {?} id<\/p><p>     * @param {?} url<\/p><p>     * @param {?} error<\/p><p>     */<\/p><p>    function NavigationError(id, url, error) {<\/p><p>        this.id = id;<\/p><p>        this.url = url;<\/p><p>        this.error = error;<\/p><p>    }<\/p><p>    /**<\/p><p>     * \\@docsNotRequired<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    NavigationError.prototype.toString = function () {<\/p><p>        return \"NavigationError(id: \" + this.id + \", url: '\" + this.url + \"', error: \" + this.error + \")\";<\/p><p>    };<\/p><p>    return NavigationError;<\/p><p>}());<\/p><p>/**<\/p><p> * \\@whatItDoes Represents an event triggered when routes are recognized.<\/p><p> *<\/p><p> * \\@stable<\/p><p> */<\/p><p>var RoutesRecognized = (function () {<\/p><p>    /**<\/p><p>     * @param {?} id<\/p><p>     * @param {?} url<\/p><p>     * @param {?} urlAfterRedirects<\/p><p>     * @param {?} state<\/p><p>     */<\/p><p>    function RoutesRecognized(id, url, urlAfterRedirects, state) {<\/p><p>        this.id = id;<\/p><p>        this.url = url;<\/p><p>        this.urlAfterRedirects = urlAfterRedirects;<\/p><p>        this.state = state;<\/p><p>    }<\/p><p>    /**<\/p><p>     * \\@docsNotRequired<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RoutesRecognized.prototype.toString = function () {<\/p><p>        return \"RoutesRecognized(id: \" + this.id + \", url: '\" + this.url + \"', urlAfterRedirects: '\" + this.urlAfterRedirects + \"', state: \" + this.state + \")\";<\/p><p>    };<\/p><p>    return RoutesRecognized;<\/p><p>}());<\/p><p>/**<\/p><p> * \\@whatItDoes Represents an event triggered before lazy loading a route config.<\/p><p> *<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var RouteConfigLoadStart = (function () {<\/p><p>    /**<\/p><p>     * @param {?} route<\/p><p>     */<\/p><p>    function RouteConfigLoadStart(route) {<\/p><p>        this.route = route;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouteConfigLoadStart.prototype.toString = function () { return \"RouteConfigLoadStart(path: \" + this.route.path + \")\"; };<\/p><p>    return RouteConfigLoadStart;<\/p><p>}());<\/p><p>/**<\/p><p> * \\@whatItDoes Represents an event triggered when a route has been lazy loaded.<\/p><p> *<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var RouteConfigLoadEnd = (function () {<\/p><p>    /**<\/p><p>     * @param {?} route<\/p><p>     */<\/p><p>    function RouteConfigLoadEnd(route) {<\/p><p>        this.route = route;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouteConfigLoadEnd.prototype.toString = function () { return \"RouteConfigLoadEnd(path: \" + this.route.path + \")\"; };<\/p><p>    return RouteConfigLoadEnd;<\/p><p>}());<\/p><p>/**<\/p><p> * \\@whatItDoes Represents the start of the Guard phase of routing.<\/p><p> *<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var GuardsCheckStart = (function () {<\/p><p>    /**<\/p><p>     * @param {?} id<\/p><p>     * @param {?} url<\/p><p>     * @param {?} urlAfterRedirects<\/p><p>     * @param {?} state<\/p><p>     */<\/p><p>    function GuardsCheckStart(id, url, urlAfterRedirects, state) {<\/p><p>        this.id = id;<\/p><p>        this.url = url;<\/p><p>        this.urlAfterRedirects = urlAfterRedirects;<\/p><p>        this.state = state;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    GuardsCheckStart.prototype.toString = function () {<\/p><p>        return \"GuardsCheckStart(id: \" + this.id + \", url: '\" + this.url + \"', urlAfterRedirects: '\" + this.urlAfterRedirects + \"', state: \" + this.state + \")\";<\/p><p>    };<\/p><p>    return GuardsCheckStart;<\/p><p>}());<\/p><p>/**<\/p><p> * \\@whatItDoes Represents the end of the Guard phase of routing.<\/p><p> *<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var GuardsCheckEnd = (function () {<\/p><p>    /**<\/p><p>     * @param {?} id<\/p><p>     * @param {?} url<\/p><p>     * @param {?} urlAfterRedirects<\/p><p>     * @param {?} state<\/p><p>     * @param {?} shouldActivate<\/p><p>     */<\/p><p>    function GuardsCheckEnd(id, url, urlAfterRedirects, state, shouldActivate) {<\/p><p>        this.id = id;<\/p><p>        this.url = url;<\/p><p>        this.urlAfterRedirects = urlAfterRedirects;<\/p><p>        this.state = state;<\/p><p>        this.shouldActivate = shouldActivate;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    GuardsCheckEnd.prototype.toString = function () {<\/p><p>        return \"GuardsCheckEnd(id: \" + this.id + \", url: '\" + this.url + \"', urlAfterRedirects: '\" + this.urlAfterRedirects + \"', state: \" + this.state + \", shouldActivate: \" + this.shouldActivate + \")\";<\/p><p>    };<\/p><p>    return GuardsCheckEnd;<\/p><p>}());<\/p><p>/**<\/p><p> * \\@whatItDoes Represents the start of the Resolve phase of routing. The timing of this<\/p><p> * event may change, thus it's experimental. In the current iteration it will run<\/p><p> * in the \"resolve\" phase whether there's things to resolve or not. In the future this<\/p><p> * behavior may change to only run when there are things to be resolved.<\/p><p> *<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var ResolveStart = (function () {<\/p><p>    /**<\/p><p>     * @param {?} id<\/p><p>     * @param {?} url<\/p><p>     * @param {?} urlAfterRedirects<\/p><p>     * @param {?} state<\/p><p>     */<\/p><p>    function ResolveStart(id, url, urlAfterRedirects, state) {<\/p><p>        this.id = id;<\/p><p>        this.url = url;<\/p><p>        this.urlAfterRedirects = urlAfterRedirects;<\/p><p>        this.state = state;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ResolveStart.prototype.toString = function () {<\/p><p>        return \"ResolveStart(id: \" + this.id + \", url: '\" + this.url + \"', urlAfterRedirects: '\" + this.urlAfterRedirects + \"', state: \" + this.state + \")\";<\/p><p>    };<\/p><p>    return ResolveStart;<\/p><p>}());<\/p><p>/**<\/p><p> * \\@whatItDoes Represents the end of the Resolve phase of routing. See note on<\/p><p> * {\\@link ResolveStart} for use of this experimental API.<\/p><p> *<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var ResolveEnd = (function () {<\/p><p>    /**<\/p><p>     * @param {?} id<\/p><p>     * @param {?} url<\/p><p>     * @param {?} urlAfterRedirects<\/p><p>     * @param {?} state<\/p><p>     */<\/p><p>    function ResolveEnd(id, url, urlAfterRedirects, state) {<\/p><p>        this.id = id;<\/p><p>        this.url = url;<\/p><p>        this.urlAfterRedirects = urlAfterRedirects;<\/p><p>        this.state = state;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ResolveEnd.prototype.toString = function () {<\/p><p>        return \"ResolveEnd(id: \" + this.id + \", url: '\" + this.url + \"', urlAfterRedirects: '\" + this.urlAfterRedirects + \"', state: \" + this.state + \")\";<\/p><p>    };<\/p><p>    return ResolveEnd;<\/p><p>}());<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * \\@whatItDoes Name of the primary outlet.<\/p><p> *<\/p><p> * \\@stable<\/p><p> */<\/p><p>var PRIMARY_OUTLET = 'primary';<\/p><p>var ParamsAsMap = (function () {<\/p><p>    /**<\/p><p>     * @param {?} params<\/p><p>     */<\/p><p>    function ParamsAsMap(params) {<\/p><p>        this.params = params || {};<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} name<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ParamsAsMap.prototype.has = function (name) { return this.params.hasOwnProperty(name); };<\/p><p>    /**<\/p><p>     * @param {?} name<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ParamsAsMap.prototype.get = function (name) {<\/p><p>        if (this.has(name)) {<\/p><p>            var /** @type {?} */ v = this.params[name];<\/p><p>            return Array.isArray(v) ? v[0] : v;<\/p><p>        }<\/p><p>        return null;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} name<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ParamsAsMap.prototype.getAll = function (name) {<\/p><p>        if (this.has(name)) {<\/p><p>            var /** @type {?} */ v = this.params[name];<\/p><p>            return Array.isArray(v) ? v : [v];<\/p><p>        }<\/p><p>        return [];<\/p><p>    };<\/p><p>    Object.defineProperty(ParamsAsMap.prototype, \"keys\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return Object.keys(this.params); },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    return ParamsAsMap;<\/p><p>}());<\/p><p>/**<\/p><p> * Convert a {\\@link Params} instance to a {\\@link ParamMap}.<\/p><p> *<\/p><p> * \\@stable<\/p><p> * @param {?} params<\/p><p> * @return {?}<\/p><p> */<\/p><p>function convertToParamMap(params) {<\/p><p>    return new ParamsAsMap(params);<\/p><p>}<\/p><p>var NAVIGATION_CANCELING_ERROR = 'ngNavigationCancelingError';<\/p><p>/**<\/p><p> * @param {?} message<\/p><p> * @return {?}<\/p><p> */<\/p><p>function navigationCancelingError(message) {<\/p><p>    var /** @type {?} */ error = Error('NavigationCancelingError: ' + message);<\/p><p>    ((error))[NAVIGATION_CANCELING_ERROR] = true;<\/p><p>    return error;<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} error<\/p><p> * @return {?}<\/p><p> */<\/p><p>function isNavigationCancelingError(error) {<\/p><p>    return ((error))[NAVIGATION_CANCELING_ERROR];<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} segments<\/p><p> * @param {?} segmentGroup<\/p><p> * @param {?} route<\/p><p> * @return {?}<\/p><p> */<\/p><p>function defaultUrlMatcher(segments, segmentGroup, route) {<\/p><p>    var /** @type {?} */ parts = ((route.path)).split('/');<\/p><p>    if (parts.length > segments.length) {<\/p><p>        // The actual URL is shorter than the config, no match<\/p><p>        return null;<\/p><p>    }<\/p><p>    if (route.pathMatch === 'full' &&<\/p><p>        (segmentGroup.hasChildren() || parts.length < segments.length)) {<\/p><p>        // The config is longer than the actual URL but we are looking for a full match, return null<\/p><p>        return null;<\/p><p>    }<\/p><p>    var /** @type {?} */ posParams = {};<\/p><p>    // Check each config part against the actual URL<\/p><p>    for (var /** @type {?} */ index = 0; index < parts.length; index++) {<\/p><p>        var /** @type {?} */ part = parts[index];<\/p><p>        var /** @type {?} */ segment = segments[index];<\/p><p>        var /** @type {?} */ isParameter = part.startsWith(':');<\/p><p>        if (isParameter) {<\/p><p>            posParams[part.substring(1)] = segment;<\/p><p>        }<\/p><p>        else if (part !== segment.path) {<\/p><p>            // The actual URL part does not match the config, no match<\/p><p>            return null;<\/p><p>        }<\/p><p>    }<\/p><p>    return { consumed: segments.slice(0, parts.length), posParams: posParams };<\/p><p>}<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var LoadedRouterConfig = (function () {<\/p><p>    /**<\/p><p>     * @param {?} routes<\/p><p>     * @param {?} module<\/p><p>     */<\/p><p>    function LoadedRouterConfig(routes, module) {<\/p><p>        this.routes = routes;<\/p><p>        this.module = module;<\/p><p>    }<\/p><p>    return LoadedRouterConfig;<\/p><p>}());<\/p><p>/**<\/p><p> * @param {?} config<\/p><p> * @param {?=} parentPath<\/p><p> * @return {?}<\/p><p> */<\/p><p>function validateConfig(config, parentPath) {<\/p><p>    if (parentPath === void 0) { parentPath = ''; }<\/p><p>    // forEach doesn't iterate undefined values<\/p><p>    for (var /** @type {?} */ i = 0; i < config.length; i++) {<\/p><p>        var /** @type {?} */ route = config[i];<\/p><p>        var /** @type {?} */ fullPath = getFullPath(parentPath, route);<\/p><p>        validateNode(route, fullPath);<\/p><p>    }<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} route<\/p><p> * @param {?} fullPath<\/p><p> * @return {?}<\/p><p> */<\/p><p>function validateNode(route, fullPath) {<\/p><p>    if (!route) {<\/p><p>        throw new Error(\"\\n      Invalid configuration of route '\" + fullPath + \"': Encountered undefined route.\\n      The reason might be an extra comma.\\n\\n      Example:\\n      const routes: Routes = [\\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\\n        { path: 'detail/:id', component: HeroDetailComponent }\\n      ];\\n    \");<\/p><p>    }<\/p><p>    if (Array.isArray(route)) {<\/p><p>        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': Array cannot be specified\");<\/p><p>    }<\/p><p>    if (!route.component && (route.outlet && route.outlet !== PRIMARY_OUTLET)) {<\/p><p>        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': a componentless route cannot have a named outlet set\");<\/p><p>    }<\/p><p>    if (route.redirectTo && route.children) {<\/p><p>        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': redirectTo and children cannot be used together\");<\/p><p>    }<\/p><p>    if (route.redirectTo && route.loadChildren) {<\/p><p>        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': redirectTo and loadChildren cannot be used together\");<\/p><p>    }<\/p><p>    if (route.children && route.loadChildren) {<\/p><p>        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': children and loadChildren cannot be used together\");<\/p><p>    }<\/p><p>    if (route.redirectTo && route.component) {<\/p><p>        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': redirectTo and component cannot be used together\");<\/p><p>    }<\/p><p>    if (route.path && route.matcher) {<\/p><p>        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': path and matcher cannot be used together\");<\/p><p>    }<\/p><p>    if (route.redirectTo === void 0 && !route.component && !route.children && !route.loadChildren) {<\/p><p>        throw new Error(\"Invalid configuration of route '\" + fullPath + \"'. One of the following must be provided: component, redirectTo, children or loadChildren\");<\/p><p>    }<\/p><p>    if (route.path === void 0 && route.matcher === void 0) {<\/p><p>        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': routes must have either a path or a matcher specified\");<\/p><p>    }<\/p><p>    if (typeof route.path === 'string' && route.path.charAt(0) === '/') {<\/p><p>        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': path cannot start with a slash\");<\/p><p>    }<\/p><p>    if (route.path === '' && route.redirectTo !== void 0 && route.pathMatch === void 0) {<\/p><p>        var /** @type {?} */ exp = \"The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.\";<\/p><p>        throw new Error(\"Invalid configuration of route '{path: \\\"\" + fullPath + \"\\\", redirectTo: \\\"\" + route.redirectTo + \"\\\"}': please provide 'pathMatch'. \" + exp);<\/p><p>    }<\/p><p>    if (route.pathMatch !== void 0 && route.pathMatch !== 'full' && route.pathMatch !== 'prefix') {<\/p><p>        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': pathMatch can only be set to 'prefix' or 'full'\");<\/p><p>    }<\/p><p>    if (route.children) {<\/p><p>        validateConfig(route.children, fullPath);<\/p><p>    }<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} parentPath<\/p><p> * @param {?} currentRoute<\/p><p> * @return {?}<\/p><p> */<\/p><p>function getFullPath(parentPath, currentRoute) {<\/p><p>    if (!currentRoute) {<\/p><p>        return parentPath;<\/p><p>    }<\/p><p>    if (!parentPath && !currentRoute.path) {<\/p><p>        return '';<\/p><p>    }<\/p><p>    else if (parentPath && !currentRoute.path) {<\/p><p>        return parentPath + \"/\";<\/p><p>    }<\/p><p>    else if (!parentPath && currentRoute.path) {<\/p><p>        return currentRoute.path;<\/p><p>    }<\/p><p>    else {<\/p><p>        return parentPath + \"/\" + currentRoute.path;<\/p><p>    }<\/p><p>}<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * @param {?} a<\/p><p> * @param {?} b<\/p><p> * @return {?}<\/p><p> */<\/p><p>function shallowEqualArrays(a, b) {<\/p><p>    if (a.length !== b.length)<\/p><p>        return false;<\/p><p>    for (var /** @type {?} */ i = 0; i < a.length; ++i) {<\/p><p>        if (!shallowEqual(a[i], b[i]))<\/p><p>            return false;<\/p><p>    }<\/p><p>    return true;<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} a<\/p><p> * @param {?} b<\/p><p> * @return {?}<\/p><p> */<\/p><p>function shallowEqual(a, b) {<\/p><p>    var /** @type {?} */ k1 = Object.keys(a);<\/p><p>    var /** @type {?} */ k2 = Object.keys(b);<\/p><p>    if (k1.length != k2.length) {<\/p><p>        return false;<\/p><p>    }<\/p><p>    var /** @type {?} */ key;<\/p><p>    for (var /** @type {?} */ i = 0; i < k1.length; i++) {<\/p><p>        key = k1[i];<\/p><p>        if (a[key] !== b[key]) {<\/p><p>            return false;<\/p><p>        }<\/p><p>    }<\/p><p>    return true;<\/p><p>}<\/p><p>/**<\/p><p> * @template T<\/p><p> * @param {?} arr<\/p><p> * @return {?}<\/p><p> */<\/p><p>function flatten(arr) {<\/p><p>    return Array.prototype.concat.apply([], arr);<\/p><p>}<\/p><p>/**<\/p><p> * @template T<\/p><p> * @param {?} a<\/p><p> * @return {?}<\/p><p> */<\/p><p>function last$1(a) {<\/p><p>    return a.length > 0 ? a[a.length - 1] : null;<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} bools<\/p><p> * @return {?}<\/p><p> */<\/p><p>/**<\/p><p> * @template K, V<\/p><p> * @param {?} map<\/p><p> * @param {?} callback<\/p><p> * @return {?}<\/p><p> */<\/p><p>function forEach(map$$1, callback) {<\/p><p>    for (var /** @type {?} */ prop in map$$1) {<\/p><p>        if (map$$1.hasOwnProperty(prop)) {<\/p><p>            callback(map$$1[prop], prop);<\/p><p>        }<\/p><p>    }<\/p><p>}<\/p><p>/**<\/p><p> * @template A, B<\/p><p> * @param {?} obj<\/p><p> * @param {?} fn<\/p><p> * @return {?}<\/p><p> */<\/p><p>function waitForMap(obj, fn) {<\/p><p>    if (Object.keys(obj).length === 0) {<\/p><p>        return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])({});<\/p><p>    }<\/p><p>    var /** @type {?} */ waitHead = [];<\/p><p>    var /** @type {?} */ waitTail = [];<\/p><p>    var /** @type {?} */ res = {};<\/p><p>    forEach(obj, function (a, k) {<\/p><p>        var /** @type {?} */ mapped = __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(fn(k, a), function (r) { return res[k] = r; });<\/p><p>        if (k === PRIMARY_OUTLET) {<\/p><p>            waitHead.push(mapped);<\/p><p>        }<\/p><p>        else {<\/p><p>            waitTail.push(mapped);<\/p><p>        }<\/p><p>    });<\/p><p>    var /** @type {?} */ concat$ = __WEBPACK_IMPORTED_MODULE_16_rxjs_operator_concatAll__[\"concatAll\"].call(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"].apply(void 0, waitHead.concat(waitTail)));<\/p><p>    var /** @type {?} */ last$ = __WEBPACK_IMPORTED_MODULE_10_rxjs_operator_last__[\"last\"].call(concat$);<\/p><p>    return __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(last$, function () { return res; });<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} observables<\/p><p> * @return {?}<\/p><p> */<\/p><p>function andObservables(observables) {<\/p><p>    var /** @type {?} */ merged$ = __WEBPACK_IMPORTED_MODULE_19_rxjs_operator_mergeAll__[\"mergeAll\"].call(observables);<\/p><p>    return __WEBPACK_IMPORTED_MODULE_8_rxjs_operator_every__[\"every\"].call(merged$, function (result) { return result === true; });<\/p><p>}<\/p><p>/**<\/p><p> * @template T<\/p><p> * @param {?} value<\/p><p> * @return {?}<\/p><p> */<\/p><p>function wrapIntoObservable(value) {<\/p><p>    if (Object(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ɵisObservable\"])(value)) {<\/p><p>        return value;<\/p><p>    }<\/p><p>    if (Object(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ɵisPromise\"])(value)) {<\/p><p>        // Use `Promise.resolve()` to wrap promise-like instances.<\/p><p>        // Required ie when a Resolver returns a AngularJS `$q` promise to correctly trigger the<\/p><p>        // change detection.<\/p><p>        return Object(__WEBPACK_IMPORTED_MODULE_18_rxjs_observable_fromPromise__[\"fromPromise\"])(Promise.resolve(value));<\/p><p>    }<\/p><p>    return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(/** @type {?} */ (value));<\/p><p>}<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * @return {?}<\/p><p> */<\/p><p>function createEmptyUrlTree() {<\/p><p>    return new UrlTree(new UrlSegmentGroup([], {}), {}, null);<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} container<\/p><p> * @param {?} containee<\/p><p> * @param {?} exact<\/p><p> * @return {?}<\/p><p> */<\/p><p>function containsTree(container, containee, exact) {<\/p><p>    if (exact) {<\/p><p>        return equalQueryParams(container.queryParams, containee.queryParams) &&<\/p><p>            equalSegmentGroups(container.root, containee.root);<\/p><p>    }<\/p><p>    return containsQueryParams(container.queryParams, containee.queryParams) &&<\/p><p>        containsSegmentGroup(container.root, containee.root);<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} container<\/p><p> * @param {?} containee<\/p><p> * @return {?}<\/p><p> */<\/p><p>function equalQueryParams(container, containee) {<\/p><p>    return shallowEqual(container, containee);<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} container<\/p><p> * @param {?} containee<\/p><p> * @return {?}<\/p><p> */<\/p><p>function equalSegmentGroups(container, containee) {<\/p><p>    if (!equalPath(container.segments, containee.segments))<\/p><p>        return false;<\/p><p>    if (container.numberOfChildren !== containee.numberOfChildren)<\/p><p>        return false;<\/p><p>    for (var /** @type {?} */ c in containee.children) {<\/p><p>        if (!container.children[c])<\/p><p>            return false;<\/p><p>        if (!equalSegmentGroups(container.children[c], containee.children[c]))<\/p><p>            return false;<\/p><p>    }<\/p><p>    return true;<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} container<\/p><p> * @param {?} containee<\/p><p> * @return {?}<\/p><p> */<\/p><p>function containsQueryParams(container, containee) {<\/p><p>    return Object.keys(containee).length <= Object.keys(container).length &&<\/p><p>        Object.keys(containee).every(function (key) { return containee[key] === container[key]; });<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} container<\/p><p> * @param {?} containee<\/p><p> * @return {?}<\/p><p> */<\/p><p>function containsSegmentGroup(container, containee) {<\/p><p>    return containsSegmentGroupHelper(container, containee, containee.segments);<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} container<\/p><p> * @param {?} containee<\/p><p> * @param {?} containeePaths<\/p><p> * @return {?}<\/p><p> */<\/p><p>function containsSegmentGroupHelper(container, containee, containeePaths) {<\/p><p>    if (container.segments.length > containeePaths.length) {<\/p><p>        var /** @type {?} */ current = container.segments.slice(0, containeePaths.length);<\/p><p>        if (!equalPath(current, containeePaths))<\/p><p>            return false;<\/p><p>        if (containee.hasChildren())<\/p><p>            return false;<\/p><p>        return true;<\/p><p>    }<\/p><p>    else if (container.segments.length === containeePaths.length) {<\/p><p>        if (!equalPath(container.segments, containeePaths))<\/p><p>            return false;<\/p><p>        for (var /** @type {?} */ c in containee.children) {<\/p><p>            if (!container.children[c])<\/p><p>                return false;<\/p><p>            if (!containsSegmentGroup(container.children[c], containee.children[c]))<\/p><p>                return false;<\/p><p>        }<\/p><p>        return true;<\/p><p>    }<\/p><p>    else {<\/p><p>        var /** @type {?} */ current = containeePaths.slice(0, container.segments.length);<\/p><p>        var /** @type {?} */ next = containeePaths.slice(container.segments.length);<\/p><p>        if (!equalPath(container.segments, current))<\/p><p>            return false;<\/p><p>        if (!container.children[PRIMARY_OUTLET])<\/p><p>            return false;<\/p><p>        return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);<\/p><p>    }<\/p><p>}<\/p><p>/**<\/p><p> * \\@whatItDoes Represents the parsed URL.<\/p><p> *<\/p><p> * \\@howToUse<\/p><p> *<\/p><p> * ```<\/p><p> * \\@Component({templateUrl:'template.html'})<\/p><p> * class MyComponent {<\/p><p> *   constructor(router: Router) {<\/p><p> *     const tree: UrlTree =<\/p><p> *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');<\/p><p> *     const f = tree.fragment; // return 'fragment'<\/p><p> *     const q = tree.queryParams; // returns {debug: 'true'}<\/p><p> *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];<\/p><p> *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'<\/p><p> *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'<\/p><p> *     g.children['support'].segments; // return 1 segment 'help'<\/p><p> *   }<\/p><p> * }<\/p><p> * ```<\/p><p> *<\/p><p> * \\@description<\/p><p> *<\/p><p> * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a<\/p><p> * serialized tree.<\/p><p> * UrlTree is a data structure that provides a lot of affordances in dealing with URLs<\/p><p> *<\/p><p> * \\@stable<\/p><p> */<\/p><p>var UrlTree = (function () {<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @param {?} root<\/p><p>     * @param {?} queryParams<\/p><p>     * @param {?} fragment<\/p><p>     */<\/p><p>    function UrlTree(root, queryParams, fragment) {<\/p><p>        this.root = root;<\/p><p>        this.queryParams = queryParams;<\/p><p>        this.fragment = fragment;<\/p><p>    }<\/p><p>    Object.defineProperty(UrlTree.prototype, \"queryParamMap\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () {<\/p><p>            if (!this._queryParamMap) {<\/p><p>                this._queryParamMap = convertToParamMap(this.queryParams);<\/p><p>            }<\/p><p>            return this._queryParamMap;<\/p><p>        },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    /**<\/p><p>     * \\@docsNotRequired<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    UrlTree.prototype.toString = function () { return DEFAULT_SERIALIZER.serialize(this); };<\/p><p>    return UrlTree;<\/p><p>}());<\/p><p>/**<\/p><p> * \\@whatItDoes Represents the parsed URL segment group.<\/p><p> *<\/p><p> * See {\\@link UrlTree} for more information.<\/p><p> *<\/p><p> * \\@stable<\/p><p> */<\/p><p>var UrlSegmentGroup = (function () {<\/p><p>    /**<\/p><p>     * @param {?} segments<\/p><p>     * @param {?} children<\/p><p>     */<\/p><p>    function UrlSegmentGroup(segments, children) {<\/p><p>        var _this = this;<\/p><p>        this.segments = segments;<\/p><p>        this.children = children;<\/p><p>        /**<\/p><p>         * The parent node in the url tree<\/p><p>         */<\/p><p>        this.parent = null;<\/p><p>        forEach(children, function (v, k) { return v.parent = _this; });<\/p><p>    }<\/p><p>    /**<\/p><p>     * Whether the segment has child segments<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    UrlSegmentGroup.prototype.hasChildren = function () { return this.numberOfChildren > 0; };<\/p><p>    Object.defineProperty(UrlSegmentGroup.prototype, \"numberOfChildren\", {<\/p><p>        /**<\/p><p>         * Number of child segments<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return Object.keys(this.children).length; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    /**<\/p><p>     * \\@docsNotRequired<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    UrlSegmentGroup.prototype.toString = function () { return serializePaths(this); };<\/p><p>    return UrlSegmentGroup;<\/p><p>}());<\/p><p>/**<\/p><p> * \\@whatItDoes Represents a single URL segment.<\/p><p> *<\/p><p> * \\@howToUse<\/p><p> *<\/p><p> * ```<\/p><p> * \\@Component({templateUrl:'template.html'})<\/p><p> * class MyComponent {<\/p><p> *   constructor(router: Router) {<\/p><p> *     const tree: UrlTree = router.parseUrl('/team;id=33');<\/p><p> *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];<\/p><p> *     const s: UrlSegment[] = g.segments;<\/p><p> *     s[0].path; // returns 'team'<\/p><p> *     s[0].parameters; // returns {id: 33}<\/p><p> *   }<\/p><p> * }<\/p><p> * ```<\/p><p> *<\/p><p> * \\@description<\/p><p> *<\/p><p> * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix<\/p><p> * parameters associated with the segment.<\/p><p> *<\/p><p> * \\@stable<\/p><p> */<\/p><p>var UrlSegment = (function () {<\/p><p>    /**<\/p><p>     * @param {?} path<\/p><p>     * @param {?} parameters<\/p><p>     */<\/p><p>    function UrlSegment(path, parameters) {<\/p><p>        this.path = path;<\/p><p>        this.parameters = parameters;<\/p><p>    }<\/p><p>    Object.defineProperty(UrlSegment.prototype, \"parameterMap\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () {<\/p><p>            if (!this._parameterMap) {<\/p><p>                this._parameterMap = convertToParamMap(this.parameters);<\/p><p>            }<\/p><p>            return this._parameterMap;<\/p><p>        },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    /**<\/p><p>     * \\@docsNotRequired<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    UrlSegment.prototype.toString = function () { return serializePath(this); };<\/p><p>    return UrlSegment;<\/p><p>}());<\/p><p>/**<\/p><p> * @param {?} as<\/p><p> * @param {?} bs<\/p><p> * @return {?}<\/p><p> */<\/p><p>function equalSegments(as, bs) {<\/p><p>    return equalPath(as, bs) && as.every(function (a, i) { return shallowEqual(a.parameters, bs[i].parameters); });<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} as<\/p><p> * @param {?} bs<\/p><p> * @return {?}<\/p><p> */<\/p><p>function equalPath(as, bs) {<\/p><p>    if (as.length !== bs.length)<\/p><p>        return false;<\/p><p>    return as.every(function (a, i) { return a.path === bs[i].path; });<\/p><p>}<\/p><p>/**<\/p><p> * @template T<\/p><p> * @param {?} segment<\/p><p> * @param {?} fn<\/p><p> * @return {?}<\/p><p> */<\/p><p>function mapChildrenIntoArray(segment, fn) {<\/p><p>    var /** @type {?} */ res = [];<\/p><p>    forEach(segment.children, function (child, childOutlet) {<\/p><p>        if (childOutlet === PRIMARY_OUTLET) {<\/p><p>            res = res.concat(fn(child, childOutlet));<\/p><p>        }<\/p><p>    });<\/p><p>    forEach(segment.children, function (child, childOutlet) {<\/p><p>        if (childOutlet !== PRIMARY_OUTLET) {<\/p><p>            res = res.concat(fn(child, childOutlet));<\/p><p>        }<\/p><p>    });<\/p><p>    return res;<\/p><p>}<\/p><p>/**<\/p><p> * \\@whatItDoes Serializes and deserializes a URL string into a URL tree.<\/p><p> *<\/p><p> * \\@description The url serialization strategy is customizable. You can<\/p><p> * make all URLs case insensitive by providing a custom UrlSerializer.<\/p><p> *<\/p><p> * See {\\@link DefaultUrlSerializer} for an example of a URL serializer.<\/p><p> *<\/p><p> * \\@stable<\/p><p> * @abstract<\/p><p> */<\/p><p>var UrlSerializer = (function () {<\/p><p>    function UrlSerializer() {<\/p><p>    }<\/p><p>    /**<\/p><p>     * Parse a url into a {\\@link UrlTree}<\/p><p>     * @abstract<\/p><p>     * @param {?} url<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    UrlSerializer.prototype.parse = function (url) { };<\/p><p>    /**<\/p><p>     * Converts a {\\@link UrlTree} into a url<\/p><p>     * @abstract<\/p><p>     * @param {?} tree<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    UrlSerializer.prototype.serialize = function (tree) { };<\/p><p>    return UrlSerializer;<\/p><p>}());<\/p><p>/**<\/p><p> * \\@whatItDoes A default implementation of the {\\@link UrlSerializer}.<\/p><p> *<\/p><p> * \\@description<\/p><p> *<\/p><p> * Example URLs:<\/p><p> *<\/p><p> * ```<\/p><p> * /inbox/33(popup:compose)<\/p><p> * /inbox/33;open=true/messages/44<\/p><p> * ```<\/p><p> *<\/p><p> * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the<\/p><p> * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to<\/p><p> * specify route specific parameters.<\/p><p> *<\/p><p> * \\@stable<\/p><p> */<\/p><p>var DefaultUrlSerializer = (function () {<\/p><p>    function DefaultUrlSerializer() {<\/p><p>    }<\/p><p>    /**<\/p><p>     * Parses a url into a {\\@link UrlTree}<\/p><p>     * @param {?} url<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DefaultUrlSerializer.prototype.parse = function (url) {<\/p><p>        var /** @type {?} */ p = new UrlParser(url);<\/p><p>        return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());<\/p><p>    };<\/p><p>    /**<\/p><p>     * Converts a {\\@link UrlTree} into a url<\/p><p>     * @param {?} tree<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DefaultUrlSerializer.prototype.serialize = function (tree) {<\/p><p>        var /** @type {?} */ segment = \"/\" + serializeSegment(tree.root, true);<\/p><p>        var /** @type {?} */ query = serializeQueryParams(tree.queryParams);<\/p><p>        var /** @type {?} */ fragment = typeof tree.fragment === \"string\" ? \"#\" + encodeURI(/** @type {?} */ ((tree.fragment))) : '';<\/p><p>        return \"\" + segment + query + fragment;<\/p><p>    };<\/p><p>    return DefaultUrlSerializer;<\/p><p>}());<\/p><p>var DEFAULT_SERIALIZER = new DefaultUrlSerializer();<\/p><p>/**<\/p><p> * @param {?} segment<\/p><p> * @return {?}<\/p><p> */<\/p><p>function serializePaths(segment) {<\/p><p>    return segment.segments.map(function (p) { return serializePath(p); }).join('/');<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} segment<\/p><p> * @param {?} root<\/p><p> * @return {?}<\/p><p> */<\/p><p>function serializeSegment(segment, root) {<\/p><p>    if (!segment.hasChildren()) {<\/p><p>        return serializePaths(segment);<\/p><p>    }<\/p><p>    if (root) {<\/p><p>        var /** @type {?} */ primary = segment.children[PRIMARY_OUTLET] ?<\/p><p>            serializeSegment(segment.children[PRIMARY_OUTLET], false) :<\/p><p>            '';<\/p><p>        var /** @type {?} */ children_1 = [];<\/p><p>        forEach(segment.children, function (v, k) {<\/p><p>            if (k !== PRIMARY_OUTLET) {<\/p><p>                children_1.push(k + \":\" + serializeSegment(v, false));<\/p><p>            }<\/p><p>        });<\/p><p>        return children_1.length > 0 ? primary + \"(\" + children_1.join('//') + \")\" : primary;<\/p><p>    }<\/p><p>    else {<\/p><p>        var /** @type {?} */ children = mapChildrenIntoArray(segment, function (v, k) {<\/p><p>            if (k === PRIMARY_OUTLET) {<\/p><p>                return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];<\/p><p>            }<\/p><p>            return [k + \":\" + serializeSegment(v, false)];<\/p><p>        });<\/p><p>        return serializePaths(segment) + \"/(\" + children.join('//') + \")\";<\/p><p>    }<\/p><p>}<\/p><p>/**<\/p><p> * This method is intended for encoding *key* or *value* parts of query component. We need a custom<\/p><p> * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be<\/p><p> * encoded per http://tools.ietf.org/html/rfc3986:<\/p><p> *    query         = *( pchar / \"/\" / \"?\" )<\/p><p> *    pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"\\@\"<\/p><p> *    unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"<\/p><p> *    pct-encoded   = \"%\" HEXDIG HEXDIG<\/p><p> *    sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"<\/p><p> *                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"<\/p><p> * @param {?} s<\/p><p> * @return {?}<\/p><p> */<\/p><p>function encode(s) {<\/p><p>    return encodeURIComponent(s)<\/p><p>        .replace(/%40/g, '@')<\/p><p>        .replace(/%3A/gi, ':')<\/p><p>        .replace(/%24/g, '$')<\/p><p>        .replace(/%2C/gi, ',')<\/p><p>        .replace(/%3B/gi, ';');<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} s<\/p><p> * @return {?}<\/p><p> */<\/p><p>function decode(s) {<\/p><p>    return decodeURIComponent(s);<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} path<\/p><p> * @return {?}<\/p><p> */<\/p><p>function serializePath(path) {<\/p><p>    return \"\" + encode(path.path) + serializeParams(path.parameters);<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} params<\/p><p> * @return {?}<\/p><p> */<\/p><p>function serializeParams(params) {<\/p><p>    return Object.keys(params).map(function (key) { return \";\" + encode(key) + \"=\" + encode(params[key]); }).join('');<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} params<\/p><p> * @return {?}<\/p><p> */<\/p><p>function serializeQueryParams(params) {<\/p><p>    var /** @type {?} */ strParams = Object.keys(params).map(function (name) {<\/p><p>        var /** @type {?} */ value = params[name];<\/p><p>        return Array.isArray(value) ? value.map(function (v) { return encode(name) + \"=\" + encode(v); }).join('&') :<\/p><p>            encode(name) + \"=\" + encode(value);<\/p><p>    });<\/p><p>    return strParams.length ? \"?\" + strParams.join(\"&\") : '';<\/p><p>}<\/p><p>var SEGMENT_RE = /^[^\\/()?;=&#]+/;<\/p><p>/**<\/p><p> * @param {?} str<\/p><p> * @return {?}<\/p><p> */<\/p><p>function matchSegments(str) {<\/p><p>    var /** @type {?} */ match = str.match(SEGMENT_RE);<\/p><p>    return match ? match[0] : '';<\/p><p>}<\/p><p>var QUERY_PARAM_RE = /^[^=?&#]+/;<\/p><p>/**<\/p><p> * @param {?} str<\/p><p> * @return {?}<\/p><p> */<\/p><p>function matchQueryParams(str) {<\/p><p>    var /** @type {?} */ match = str.match(QUERY_PARAM_RE);<\/p><p>    return match ? match[0] : '';<\/p><p>}<\/p><p>var QUERY_PARAM_VALUE_RE = /^[^?&#]+/;<\/p><p>/**<\/p><p> * @param {?} str<\/p><p> * @return {?}<\/p><p> */<\/p><p>function matchUrlQueryParamValue(str) {<\/p><p>    var /** @type {?} */ match = str.match(QUERY_PARAM_VALUE_RE);<\/p><p>    return match ? match[0] : '';<\/p><p>}<\/p><p>var UrlParser = (function () {<\/p><p>    /**<\/p><p>     * @param {?} url<\/p><p>     */<\/p><p>    function UrlParser(url) {<\/p><p>        this.url = url;<\/p><p>        this.remaining = url;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    UrlParser.prototype.parseRootSegment = function () {<\/p><p>        this.consumeOptional('/');<\/p><p>        if (this.remaining === '' || this.peekStartsWith('?') || this.peekStartsWith('#')) {<\/p><p>            return new UrlSegmentGroup([], {});<\/p><p>        }<\/p><p>        // The root segment group never has segments<\/p><p>        return new UrlSegmentGroup([], this.parseChildren());<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    UrlParser.prototype.parseQueryParams = function () {<\/p><p>        var /** @type {?} */ params = {};<\/p><p>        if (this.consumeOptional('?')) {<\/p><p>            do {<\/p><p>                this.parseQueryParam(params);<\/p><p>            } while (this.consumeOptional('&'));<\/p><p>        }<\/p><p>        return params;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    UrlParser.prototype.parseFragment = function () {<\/p><p>        return this.consumeOptional('#') ? decodeURI(this.remaining) : null;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    UrlParser.prototype.parseChildren = function () {<\/p><p>        if (this.remaining === '') {<\/p><p>            return {};<\/p><p>        }<\/p><p>        this.consumeOptional('/');<\/p><p>        var /** @type {?} */ segments = [];<\/p><p>        if (!this.peekStartsWith('(')) {<\/p><p>            segments.push(this.parseSegment());<\/p><p>        }<\/p><p>        while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {<\/p><p>            this.capture('/');<\/p><p>            segments.push(this.parseSegment());<\/p><p>        }<\/p><p>        var /** @type {?} */ children = {};<\/p><p>        if (this.peekStartsWith('/(')) {<\/p><p>            this.capture('/');<\/p><p>            children = this.parseParens(true);<\/p><p>        }<\/p><p>        var /** @type {?} */ res = {};<\/p><p>        if (this.peekStartsWith('(')) {<\/p><p>            res = this.parseParens(false);<\/p><p>        }<\/p><p>        if (segments.length > 0 || Object.keys(children).length > 0) {<\/p><p>            res[PRIMARY_OUTLET] = new UrlSegmentGroup(segments, children);<\/p><p>        }<\/p><p>        return res;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    UrlParser.prototype.parseSegment = function () {<\/p><p>        var /** @type {?} */ path = matchSegments(this.remaining);<\/p><p>        if (path === '' && this.peekStartsWith(';')) {<\/p><p>            throw new Error(\"Empty path url segment cannot have parameters: '\" + this.remaining + \"'.\");<\/p><p>        }<\/p><p>        this.capture(path);<\/p><p>        return new UrlSegment(decode(path), this.parseMatrixParams());<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    UrlParser.prototype.parseMatrixParams = function () {<\/p><p>        var /** @type {?} */ params = {};<\/p><p>        while (this.consumeOptional(';')) {<\/p><p>            this.parseParam(params);<\/p><p>        }<\/p><p>        return params;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} params<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    UrlParser.prototype.parseParam = function (params) {<\/p><p>        var /** @type {?} */ key = matchSegments(this.remaining);<\/p><p>        if (!key) {<\/p><p>            return;<\/p><p>        }<\/p><p>        this.capture(key);<\/p><p>        var /** @type {?} */ value = '';<\/p><p>        if (this.consumeOptional('=')) {<\/p><p>            var /** @type {?} */ valueMatch = matchSegments(this.remaining);<\/p><p>            if (valueMatch) {<\/p><p>                value = valueMatch;<\/p><p>                this.capture(value);<\/p><p>            }<\/p><p>        }<\/p><p>        params[decode(key)] = decode(value);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} params<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    UrlParser.prototype.parseQueryParam = function (params) {<\/p><p>        var /** @type {?} */ key = matchQueryParams(this.remaining);<\/p><p>        if (!key) {<\/p><p>            return;<\/p><p>        }<\/p><p>        this.capture(key);<\/p><p>        var /** @type {?} */ value = '';<\/p><p>        if (this.consumeOptional('=')) {<\/p><p>            var /** @type {?} */ valueMatch = matchUrlQueryParamValue(this.remaining);<\/p><p>            if (valueMatch) {<\/p><p>                value = valueMatch;<\/p><p>                this.capture(value);<\/p><p>            }<\/p><p>        }<\/p><p>        var /** @type {?} */ decodedKey = decode(key);<\/p><p>        var /** @type {?} */ decodedVal = decode(value);<\/p><p>        if (params.hasOwnProperty(decodedKey)) {<\/p><p>            // Append to existing values<\/p><p>            var /** @type {?} */ currentVal = params[decodedKey];<\/p><p>            if (!Array.isArray(currentVal)) {<\/p><p>                currentVal = [currentVal];<\/p><p>                params[decodedKey] = currentVal;<\/p><p>            }<\/p><p>            currentVal.push(decodedVal);<\/p><p>        }<\/p><p>        else {<\/p><p>            // Create a new value<\/p><p>            params[decodedKey] = decodedVal;<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} allowPrimary<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    UrlParser.prototype.parseParens = function (allowPrimary) {<\/p><p>        var /** @type {?} */ segments = {};<\/p><p>        this.capture('(');<\/p><p>        while (!this.consumeOptional(')') && this.remaining.length > 0) {<\/p><p>            var /** @type {?} */ path = matchSegments(this.remaining);<\/p><p>            var /** @type {?} */ next = this.remaining[path.length];<\/p><p>            // if is is not one of these characters, then the segment was unescaped<\/p><p>            // or the group was not closed<\/p><p>            if (next !== '/' && next !== ')' && next !== ';') {<\/p><p>                throw new Error(\"Cannot parse url '\" + this.url + \"'\");<\/p><p>            }<\/p><p>            var /** @type {?} */ outletName = ((undefined));<\/p><p>            if (path.indexOf(':') > -1) {<\/p><p>                outletName = path.substr(0, path.indexOf(':'));<\/p><p>                this.capture(outletName);<\/p><p>                this.capture(':');<\/p><p>            }<\/p><p>            else if (allowPrimary) {<\/p><p>                outletName = PRIMARY_OUTLET;<\/p><p>            }<\/p><p>            var /** @type {?} */ children = this.parseChildren();<\/p><p>            segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] :<\/p><p>                new UrlSegmentGroup([], children);<\/p><p>            this.consumeOptional('//');<\/p><p>        }<\/p><p>        return segments;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} str<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    UrlParser.prototype.peekStartsWith = function (str) { return this.remaining.startsWith(str); };<\/p><p>    /**<\/p><p>     * @param {?} str<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    UrlParser.prototype.consumeOptional = function (str) {<\/p><p>        if (this.peekStartsWith(str)) {<\/p><p>            this.remaining = this.remaining.substring(str.length);<\/p><p>            return true;<\/p><p>        }<\/p><p>        return false;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} str<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    UrlParser.prototype.capture = function (str) {<\/p><p>        if (!this.consumeOptional(str)) {<\/p><p>            throw new Error(\"Expected \\\"\" + str + \"\\\".\");<\/p><p>        }<\/p><p>    };<\/p><p>    return UrlParser;<\/p><p>}());<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var NoMatch = (function () {<\/p><p>    /**<\/p><p>     * @param {?=} segmentGroup<\/p><p>     */<\/p><p>    function NoMatch(segmentGroup) {<\/p><p>        this.segmentGroup = segmentGroup || null;<\/p><p>    }<\/p><p>    return NoMatch;<\/p><p>}());<\/p><p>var AbsoluteRedirect = (function () {<\/p><p>    /**<\/p><p>     * @param {?} urlTree<\/p><p>     */<\/p><p>    function AbsoluteRedirect(urlTree) {<\/p><p>        this.urlTree = urlTree;<\/p><p>    }<\/p><p>    return AbsoluteRedirect;<\/p><p>}());<\/p><p>/**<\/p><p> * @param {?} segmentGroup<\/p><p> * @return {?}<\/p><p> */<\/p><p>function noMatch(segmentGroup) {<\/p><p>    return new __WEBPACK_IMPORTED_MODULE_14_rxjs_Observable__[\"Observable\"](function (obs) { return obs.error(new NoMatch(segmentGroup)); });<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} newTree<\/p><p> * @return {?}<\/p><p> */<\/p><p>function absoluteRedirect(newTree) {<\/p><p>    return new __WEBPACK_IMPORTED_MODULE_14_rxjs_Observable__[\"Observable\"](function (obs) { return obs.error(new AbsoluteRedirect(newTree)); });<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} redirectTo<\/p><p> * @return {?}<\/p><p> */<\/p><p>function namedOutletsRedirect(redirectTo) {<\/p><p>    return new __WEBPACK_IMPORTED_MODULE_14_rxjs_Observable__[\"Observable\"](function (obs) { return obs.error(new Error(\"Only absolute redirects can have named outlets. redirectTo: '\" + redirectTo + \"'\")); });<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} route<\/p><p> * @return {?}<\/p><p> */<\/p><p>function canLoadFails(route) {<\/p><p>    return new __WEBPACK_IMPORTED_MODULE_14_rxjs_Observable__[\"Observable\"](function (obs) { return obs.error(navigationCancelingError(\"Cannot load children because the guard of the route \\\"path: '\" + route.path + \"'\\\" returned false\")); });<\/p><p>}<\/p><p>/**<\/p><p> * Returns the `UrlTree` with the redirection applied.<\/p><p> *<\/p><p> * Lazy modules are loaded along the way.<\/p><p> * @param {?} moduleInjector<\/p><p> * @param {?} configLoader<\/p><p> * @param {?} urlSerializer<\/p><p> * @param {?} urlTree<\/p><p> * @param {?} config<\/p><p> * @return {?}<\/p><p> */<\/p><p>function applyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config) {<\/p><p>    return new ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config).apply();<\/p><p>}<\/p><p>var ApplyRedirects = (function () {<\/p><p>    /**<\/p><p>     * @param {?} moduleInjector<\/p><p>     * @param {?} configLoader<\/p><p>     * @param {?} urlSerializer<\/p><p>     * @param {?} urlTree<\/p><p>     * @param {?} config<\/p><p>     */<\/p><p>    function ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config) {<\/p><p>        this.configLoader = configLoader;<\/p><p>        this.urlSerializer = urlSerializer;<\/p><p>        this.urlTree = urlTree;<\/p><p>        this.config = config;<\/p><p>        this.allowRedirects = true;<\/p><p>        this.ngModule = moduleInjector.get(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"NgModuleRef\"]);<\/p><p>    }<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ApplyRedirects.prototype.apply = function () {<\/p><p>        var _this = this;<\/p><p>        var /** @type {?} */ expanded$ = this.expandSegmentGroup(this.ngModule, this.config, this.urlTree.root, PRIMARY_OUTLET);<\/p><p>        var /** @type {?} */ urlTrees$ = __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(expanded$, function (rootSegmentGroup) { return _this.createUrlTree(rootSegmentGroup, _this.urlTree.queryParams, /** @type {?} */ ((_this.urlTree.fragment))); });<\/p><p>        return __WEBPACK_IMPORTED_MODULE_15_rxjs_operator_catch__[\"_catch\"].call(urlTrees$, function (e) {<\/p><p>            if (e instanceof AbsoluteRedirect) {<\/p><p>                // after an absolute redirect we do not apply any more redirects!<\/p><p>                _this.allowRedirects = false;<\/p><p>                // we need to run matching, so we can fetch all lazy-loaded modules<\/p><p>                return _this.match(e.urlTree);<\/p><p>            }<\/p><p>            if (e instanceof NoMatch) {<\/p><p>                throw _this.noMatchError(e);<\/p><p>            }<\/p><p>            throw e;<\/p><p>        });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} tree<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ApplyRedirects.prototype.match = function (tree) {<\/p><p>        var _this = this;<\/p><p>        var /** @type {?} */ expanded$ = this.expandSegmentGroup(this.ngModule, this.config, tree.root, PRIMARY_OUTLET);<\/p><p>        var /** @type {?} */ mapped$ = __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(expanded$, function (rootSegmentGroup) { return _this.createUrlTree(rootSegmentGroup, tree.queryParams, /** @type {?} */ ((tree.fragment))); });<\/p><p>        return __WEBPACK_IMPORTED_MODULE_15_rxjs_operator_catch__[\"_catch\"].call(mapped$, function (e) {<\/p><p>            if (e instanceof NoMatch) {<\/p><p>                throw _this.noMatchError(e);<\/p><p>            }<\/p><p>            throw e;<\/p><p>        });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} e<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ApplyRedirects.prototype.noMatchError = function (e) {<\/p><p>        return new Error(\"Cannot match any routes. URL Segment: '\" + e.segmentGroup + \"'\");<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} rootCandidate<\/p><p>     * @param {?} queryParams<\/p><p>     * @param {?} fragment<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ApplyRedirects.prototype.createUrlTree = function (rootCandidate, queryParams, fragment) {<\/p><p>        var /** @type {?} */ root = rootCandidate.segments.length > 0 ?<\/p><p>            new UrlSegmentGroup([], (_a = {}, _a[PRIMARY_OUTLET] = rootCandidate, _a)) :<\/p><p>            rootCandidate;<\/p><p>        return new UrlTree(root, queryParams, fragment);<\/p><p>        var _a;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} ngModule<\/p><p>     * @param {?} routes<\/p><p>     * @param {?} segmentGroup<\/p><p>     * @param {?} outlet<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ApplyRedirects.prototype.expandSegmentGroup = function (ngModule, routes, segmentGroup, outlet) {<\/p><p>        if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {<\/p><p>            return __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(this.expandChildren(ngModule, routes, segmentGroup), function (children) { return new UrlSegmentGroup([], children); });<\/p><p>        }<\/p><p>        return this.expandSegment(ngModule, segmentGroup, routes, segmentGroup.segments, outlet, true);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} ngModule<\/p><p>     * @param {?} routes<\/p><p>     * @param {?} segmentGroup<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ApplyRedirects.prototype.expandChildren = function (ngModule, routes, segmentGroup) {<\/p><p>        var _this = this;<\/p><p>        return waitForMap(segmentGroup.children, function (childOutlet, child) { return _this.expandSegmentGroup(ngModule, routes, child, childOutlet); });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} ngModule<\/p><p>     * @param {?} segmentGroup<\/p><p>     * @param {?} routes<\/p><p>     * @param {?} segments<\/p><p>     * @param {?} outlet<\/p><p>     * @param {?} allowRedirects<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ApplyRedirects.prototype.expandSegment = function (ngModule, segmentGroup, routes, segments, outlet, allowRedirects) {<\/p><p>        var _this = this;<\/p><p>        var /** @type {?} */ routes$ = __WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"].apply(void 0, routes);<\/p><p>        var /** @type {?} */ processedRoutes$ = __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(routes$, function (r) {<\/p><p>            var /** @type {?} */ expanded$ = _this.expandSegmentAgainstRoute(ngModule, segmentGroup, routes, r, segments, outlet, allowRedirects);<\/p><p>            return __WEBPACK_IMPORTED_MODULE_15_rxjs_operator_catch__[\"_catch\"].call(expanded$, function (e) {<\/p><p>                if (e instanceof NoMatch) {<\/p><p>                    return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(null);<\/p><p>                }<\/p><p>                throw e;<\/p><p>            });<\/p><p>        });<\/p><p>        var /** @type {?} */ concattedProcessedRoutes$ = __WEBPACK_IMPORTED_MODULE_16_rxjs_operator_concatAll__[\"concatAll\"].call(processedRoutes$);<\/p><p>        var /** @type {?} */ first$ = __WEBPACK_IMPORTED_MODULE_9_rxjs_operator_first__[\"first\"].call(concattedProcessedRoutes$, function (s) { return !!s; });<\/p><p>        return __WEBPACK_IMPORTED_MODULE_15_rxjs_operator_catch__[\"_catch\"].call(first$, function (e, _) {<\/p><p>            if (e instanceof __WEBPACK_IMPORTED_MODULE_17_rxjs_util_EmptyError__[\"EmptyError\"]) {<\/p><p>                if (_this.noLeftoversInUrl(segmentGroup, segments, outlet)) {<\/p><p>                    return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(new UrlSegmentGroup([], {}));<\/p><p>                }<\/p><p>                throw new NoMatch(segmentGroup);<\/p><p>            }<\/p><p>            throw e;<\/p><p>        });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} segmentGroup<\/p><p>     * @param {?} segments<\/p><p>     * @param {?} outlet<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ApplyRedirects.prototype.noLeftoversInUrl = function (segmentGroup, segments, outlet) {<\/p><p>        return segments.length === 0 && !segmentGroup.children[outlet];<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} ngModule<\/p><p>     * @param {?} segmentGroup<\/p><p>     * @param {?} routes<\/p><p>     * @param {?} route<\/p><p>     * @param {?} paths<\/p><p>     * @param {?} outlet<\/p><p>     * @param {?} allowRedirects<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ApplyRedirects.prototype.expandSegmentAgainstRoute = function (ngModule, segmentGroup, routes, route, paths, outlet, allowRedirects) {<\/p><p>        if (getOutlet(route) !== outlet) {<\/p><p>            return noMatch(segmentGroup);<\/p><p>        }<\/p><p>        if (route.redirectTo === undefined) {<\/p><p>            return this.matchSegmentAgainstRoute(ngModule, segmentGroup, route, paths);<\/p><p>        }<\/p><p>        if (allowRedirects && this.allowRedirects) {<\/p><p>            return this.expandSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, paths, outlet);<\/p><p>        }<\/p><p>        return noMatch(segmentGroup);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} ngModule<\/p><p>     * @param {?} segmentGroup<\/p><p>     * @param {?} routes<\/p><p>     * @param {?} route<\/p><p>     * @param {?} segments<\/p><p>     * @param {?} outlet<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ApplyRedirects.prototype.expandSegmentAgainstRouteUsingRedirect = function (ngModule, segmentGroup, routes, route, segments, outlet) {<\/p><p>        if (route.path === '**') {<\/p><p>            return this.expandWildCardWithParamsAgainstRouteUsingRedirect(ngModule, routes, route, outlet);<\/p><p>        }<\/p><p>        return this.expandRegularSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} ngModule<\/p><p>     * @param {?} routes<\/p><p>     * @param {?} route<\/p><p>     * @param {?} outlet<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ApplyRedirects.prototype.expandWildCardWithParamsAgainstRouteUsingRedirect = function (ngModule, routes, route, outlet) {<\/p><p>        var _this = this;<\/p><p>        var /** @type {?} */ newTree = this.applyRedirectCommands([], /** @type {?} */ ((route.redirectTo)), {});<\/p><p>        if (((route.redirectTo)).startsWith('/')) {<\/p><p>            return absoluteRedirect(newTree);<\/p><p>        }<\/p><p>        return __WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap__[\"mergeMap\"].call(this.lineralizeSegments(route, newTree), function (newSegments) {<\/p><p>            var /** @type {?} */ group = new UrlSegmentGroup(newSegments, {});<\/p><p>            return _this.expandSegment(ngModule, group, routes, newSegments, outlet, false);<\/p><p>        });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} ngModule<\/p><p>     * @param {?} segmentGroup<\/p><p>     * @param {?} routes<\/p><p>     * @param {?} route<\/p><p>     * @param {?} segments<\/p><p>     * @param {?} outlet<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ApplyRedirects.prototype.expandRegularSegmentAgainstRouteUsingRedirect = function (ngModule, segmentGroup, routes, route, segments, outlet) {<\/p><p>        var _this = this;<\/p><p>        var _a = match(segmentGroup, route, segments), matched = _a.matched, consumedSegments = _a.consumedSegments, lastChild = _a.lastChild, positionalParamSegments = _a.positionalParamSegments;<\/p><p>        if (!matched)<\/p><p>            return noMatch(segmentGroup);<\/p><p>        var /** @type {?} */ newTree = this.applyRedirectCommands(consumedSegments, /** @type {?} */ ((route.redirectTo)), /** @type {?} */ (positionalParamSegments));<\/p><p>        if (((route.redirectTo)).startsWith('/')) {<\/p><p>            return absoluteRedirect(newTree);<\/p><p>        }<\/p><p>        return __WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap__[\"mergeMap\"].call(this.lineralizeSegments(route, newTree), function (newSegments) {<\/p><p>            return _this.expandSegment(ngModule, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet, false);<\/p><p>        });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} ngModule<\/p><p>     * @param {?} rawSegmentGroup<\/p><p>     * @param {?} route<\/p><p>     * @param {?} segments<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ApplyRedirects.prototype.matchSegmentAgainstRoute = function (ngModule, rawSegmentGroup, route, segments) {<\/p><p>        var _this = this;<\/p><p>        if (route.path === '**') {<\/p><p>            if (route.loadChildren) {<\/p><p>                return __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(this.configLoader.load(ngModule.injector, route), function (cfg) {<\/p><p>                    route._loadedConfig = cfg;<\/p><p>                    return new UrlSegmentGroup(segments, {});<\/p><p>                });<\/p><p>            }<\/p><p>            return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(new UrlSegmentGroup(segments, {}));<\/p><p>        }<\/p><p>        var _a = match(rawSegmentGroup, route, segments), matched = _a.matched, consumedSegments = _a.consumedSegments, lastChild = _a.lastChild;<\/p><p>        if (!matched)<\/p><p>            return noMatch(rawSegmentGroup);<\/p><p>        var /** @type {?} */ rawSlicedSegments = segments.slice(lastChild);<\/p><p>        var /** @type {?} */ childConfig$ = this.getChildConfig(ngModule, route);<\/p><p>        return __WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap__[\"mergeMap\"].call(childConfig$, function (routerConfig) {<\/p><p>            var /** @type {?} */ childModule = routerConfig.module;<\/p><p>            var /** @type {?} */ childConfig = routerConfig.routes;<\/p><p>            var _a = split(rawSegmentGroup, consumedSegments, rawSlicedSegments, childConfig), segmentGroup = _a.segmentGroup, slicedSegments = _a.slicedSegments;<\/p><p>            if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {<\/p><p>                var /** @type {?} */ expanded$_1 = _this.expandChildren(childModule, childConfig, segmentGroup);<\/p><p>                return __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(expanded$_1, function (children) { return new UrlSegmentGroup(consumedSegments, children); });<\/p><p>            }<\/p><p>            if (childConfig.length === 0 && slicedSegments.length === 0) {<\/p><p>                return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(new UrlSegmentGroup(consumedSegments, {}));<\/p><p>            }<\/p><p>            var /** @type {?} */ expanded$ = _this.expandSegment(childModule, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, true);<\/p><p>            return __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(expanded$, function (cs) { return new UrlSegmentGroup(consumedSegments.concat(cs.segments), cs.children); });<\/p><p>        });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} ngModule<\/p><p>     * @param {?} route<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ApplyRedirects.prototype.getChildConfig = function (ngModule, route) {<\/p><p>        var _this = this;<\/p><p>        if (route.children) {<\/p><p>            // The children belong to the same module<\/p><p>            return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(new LoadedRouterConfig(route.children, ngModule));<\/p><p>        }<\/p><p>        if (route.loadChildren) {<\/p><p>            // lazy children belong to the loaded module<\/p><p>            if (route._loadedConfig !== undefined) {<\/p><p>                return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(route._loadedConfig);<\/p><p>            }<\/p><p>            return __WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap__[\"mergeMap\"].call(runCanLoadGuard(ngModule.injector, route), function (shouldLoad) {<\/p><p>                if (shouldLoad) {<\/p><p>                    return __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(_this.configLoader.load(ngModule.injector, route), function (cfg) {<\/p><p>                        route._loadedConfig = cfg;<\/p><p>                        return cfg;<\/p><p>                    });<\/p><p>                }<\/p><p>                return canLoadFails(route);<\/p><p>            });<\/p><p>        }<\/p><p>        return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(new LoadedRouterConfig([], ngModule));<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} route<\/p><p>     * @param {?} urlTree<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ApplyRedirects.prototype.lineralizeSegments = function (route, urlTree) {<\/p><p>        var /** @type {?} */ res = [];<\/p><p>        var /** @type {?} */ c = urlTree.root;<\/p><p>        while (true) {<\/p><p>            res = res.concat(c.segments);<\/p><p>            if (c.numberOfChildren === 0) {<\/p><p>                return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(res);<\/p><p>            }<\/p><p>            if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {<\/p><p>                return namedOutletsRedirect(/** @type {?} */ ((route.redirectTo)));<\/p><p>            }<\/p><p>            c = c.children[PRIMARY_OUTLET];<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} segments<\/p><p>     * @param {?} redirectTo<\/p><p>     * @param {?} posParams<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ApplyRedirects.prototype.applyRedirectCommands = function (segments, redirectTo, posParams) {<\/p><p>        return this.applyRedirectCreatreUrlTree(redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} redirectTo<\/p><p>     * @param {?} urlTree<\/p><p>     * @param {?} segments<\/p><p>     * @param {?} posParams<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ApplyRedirects.prototype.applyRedirectCreatreUrlTree = function (redirectTo, urlTree, segments, posParams) {<\/p><p>        var /** @type {?} */ newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);<\/p><p>        return new UrlTree(newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams), urlTree.fragment);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} redirectToParams<\/p><p>     * @param {?} actualParams<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ApplyRedirects.prototype.createQueryParams = function (redirectToParams, actualParams) {<\/p><p>        var /** @type {?} */ res = {};<\/p><p>        forEach(redirectToParams, function (v, k) {<\/p><p>            var /** @type {?} */ copySourceValue = typeof v === 'string' && v.startsWith(':');<\/p><p>            if (copySourceValue) {<\/p><p>                var /** @type {?} */ sourceName = v.substring(1);<\/p><p>                res[k] = actualParams[sourceName];<\/p><p>            }<\/p><p>            else {<\/p><p>                res[k] = v;<\/p><p>            }<\/p><p>        });<\/p><p>        return res;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} redirectTo<\/p><p>     * @param {?} group<\/p><p>     * @param {?} segments<\/p><p>     * @param {?} posParams<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ApplyRedirects.prototype.createSegmentGroup = function (redirectTo, group, segments, posParams) {<\/p><p>        var _this = this;<\/p><p>        var /** @type {?} */ updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);<\/p><p>        var /** @type {?} */ children = {};<\/p><p>        forEach(group.children, function (child, name) {<\/p><p>            children[name] = _this.createSegmentGroup(redirectTo, child, segments, posParams);<\/p><p>        });<\/p><p>        return new UrlSegmentGroup(updatedSegments, children);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} redirectTo<\/p><p>     * @param {?} redirectToSegments<\/p><p>     * @param {?} actualSegments<\/p><p>     * @param {?} posParams<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ApplyRedirects.prototype.createSegments = function (redirectTo, redirectToSegments, actualSegments, posParams) {<\/p><p>        var _this = this;<\/p><p>        return redirectToSegments.map(function (s) { return s.path.startsWith(':') ? _this.findPosParam(redirectTo, s, posParams) :<\/p><p>            _this.findOrReturn(s, actualSegments); });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} redirectTo<\/p><p>     * @param {?} redirectToUrlSegment<\/p><p>     * @param {?} posParams<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ApplyRedirects.prototype.findPosParam = function (redirectTo, redirectToUrlSegment, posParams) {<\/p><p>        var /** @type {?} */ pos = posParams[redirectToUrlSegment.path.substring(1)];<\/p><p>        if (!pos)<\/p><p>            throw new Error(\"Cannot redirect to '\" + redirectTo + \"'. Cannot find '\" + redirectToUrlSegment.path + \"'.\");<\/p><p>        return pos;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} redirectToUrlSegment<\/p><p>     * @param {?} actualSegments<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ApplyRedirects.prototype.findOrReturn = function (redirectToUrlSegment, actualSegments) {<\/p><p>        var /** @type {?} */ idx = 0;<\/p><p>        for (var _i = 0, actualSegments_1 = actualSegments; _i < actualSegments_1.length; _i++) {<\/p><p>            var s = actualSegments_1[_i];<\/p><p>            if (s.path === redirectToUrlSegment.path) {<\/p><p>                actualSegments.splice(idx);<\/p><p>                return s;<\/p><p>            }<\/p><p>            idx++;<\/p><p>        }<\/p><p>        return redirectToUrlSegment;<\/p><p>    };<\/p><p>    return ApplyRedirects;<\/p><p>}());<\/p><p>/**<\/p><p> * @param {?} moduleInjector<\/p><p> * @param {?} route<\/p><p> * @return {?}<\/p><p> */<\/p><p>function runCanLoadGuard(moduleInjector, route) {<\/p><p>    var /** @type {?} */ canLoad = route.canLoad;<\/p><p>    if (!canLoad || canLoad.length === 0)<\/p><p>        return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(true);<\/p><p>    var /** @type {?} */ obs = __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(Object(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_from__[\"from\"])(canLoad), function (injectionToken) {<\/p><p>        var /** @type {?} */ guard = moduleInjector.get(injectionToken);<\/p><p>        return wrapIntoObservable(guard.canLoad ? guard.canLoad(route) : guard(route));<\/p><p>    });<\/p><p>    return andObservables(obs);<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} segmentGroup<\/p><p> * @param {?} route<\/p><p> * @param {?} segments<\/p><p> * @return {?}<\/p><p> */<\/p><p>function match(segmentGroup, route, segments) {<\/p><p>    if (route.path === '') {<\/p><p>        if ((route.pathMatch === 'full') && (segmentGroup.hasChildren() || segments.length > 0)) {<\/p><p>            return { matched: false, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };<\/p><p>        }<\/p><p>        return { matched: true, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };<\/p><p>    }<\/p><p>    var /** @type {?} */ matcher = route.matcher || defaultUrlMatcher;<\/p><p>    var /** @type {?} */ res = matcher(segments, segmentGroup, route);<\/p><p>    if (!res) {<\/p><p>        return {<\/p><p>            matched: false,<\/p><p>            consumedSegments: /** @type {?} */ ([]),<\/p><p>            lastChild: 0,<\/p><p>            positionalParamSegments: {},<\/p><p>        };<\/p><p>    }<\/p><p>    return {<\/p><p>        matched: true,<\/p><p>        consumedSegments: /** @type {?} */ ((res.consumed)),<\/p><p>        lastChild: /** @type {?} */ ((res.consumed.length)),<\/p><p>        positionalParamSegments: /** @type {?} */ ((res.posParams)),<\/p><p>    };<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} segmentGroup<\/p><p> * @param {?} consumedSegments<\/p><p> * @param {?} slicedSegments<\/p><p> * @param {?} config<\/p><p> * @return {?}<\/p><p> */<\/p><p>function split(segmentGroup, consumedSegments, slicedSegments, config) {<\/p><p>    if (slicedSegments.length > 0 &&<\/p><p>        containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {<\/p><p>        var /** @type {?} */ s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptySegments(config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));<\/p><p>        return { segmentGroup: mergeTrivialChildren(s), slicedSegments: [] };<\/p><p>    }<\/p><p>    if (slicedSegments.length === 0 &&<\/p><p>        containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {<\/p><p>        var /** @type {?} */ s = new UrlSegmentGroup(segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));<\/p><p>        return { segmentGroup: mergeTrivialChildren(s), slicedSegments: slicedSegments };<\/p><p>    }<\/p><p>    return { segmentGroup: segmentGroup, slicedSegments: slicedSegments };<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} s<\/p><p> * @return {?}<\/p><p> */<\/p><p>function mergeTrivialChildren(s) {<\/p><p>    if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {<\/p><p>        var /** @type {?} */ c = s.children[PRIMARY_OUTLET];<\/p><p>        return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);<\/p><p>    }<\/p><p>    return s;<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} segmentGroup<\/p><p> * @param {?} slicedSegments<\/p><p> * @param {?} routes<\/p><p> * @param {?} children<\/p><p> * @return {?}<\/p><p> */<\/p><p>function addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {<\/p><p>    var /** @type {?} */ res = {};<\/p><p>    for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {<\/p><p>        var r = routes_1[_i];<\/p><p>        if (isEmptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {<\/p><p>            res[getOutlet(r)] = new UrlSegmentGroup([], {});<\/p><p>        }<\/p><p>    }<\/p><p>    return Object.assign({}, children, res);<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} routes<\/p><p> * @param {?} primarySegmentGroup<\/p><p> * @return {?}<\/p><p> */<\/p><p>function createChildrenForEmptySegments(routes, primarySegmentGroup) {<\/p><p>    var /** @type {?} */ res = {};<\/p><p>    res[PRIMARY_OUTLET] = primarySegmentGroup;<\/p><p>    for (var _i = 0, routes_2 = routes; _i < routes_2.length; _i++) {<\/p><p>        var r = routes_2[_i];<\/p><p>        if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {<\/p><p>            res[getOutlet(r)] = new UrlSegmentGroup([], {});<\/p><p>        }<\/p><p>    }<\/p><p>    return res;<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} segmentGroup<\/p><p> * @param {?} segments<\/p><p> * @param {?} routes<\/p><p> * @return {?}<\/p><p> */<\/p><p>function containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, segments, routes) {<\/p><p>    return routes.some(function (r) { return isEmptyPathRedirect(segmentGroup, segments, r) && getOutlet(r) !== PRIMARY_OUTLET; });<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} segmentGroup<\/p><p> * @param {?} segments<\/p><p> * @param {?} routes<\/p><p> * @return {?}<\/p><p> */<\/p><p>function containsEmptyPathRedirects(segmentGroup, segments, routes) {<\/p><p>    return routes.some(function (r) { return isEmptyPathRedirect(segmentGroup, segments, r); });<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} segmentGroup<\/p><p> * @param {?} segments<\/p><p> * @param {?} r<\/p><p> * @return {?}<\/p><p> */<\/p><p>function isEmptyPathRedirect(segmentGroup, segments, r) {<\/p><p>    if ((segmentGroup.hasChildren() || segments.length > 0) && r.pathMatch === 'full') {<\/p><p>        return false;<\/p><p>    }<\/p><p>    return r.path === '' && r.redirectTo !== undefined;<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} route<\/p><p> * @return {?}<\/p><p> */<\/p><p>function getOutlet(route) {<\/p><p>    return route.outlet || PRIMARY_OUTLET;<\/p><p>}<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var Tree = (function () {<\/p><p>    /**<\/p><p>     * @param {?} root<\/p><p>     */<\/p><p>    function Tree(root) {<\/p><p>        this._root = root;<\/p><p>    }<\/p><p>    Object.defineProperty(Tree.prototype, \"root\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._root.value; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @param {?} t<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Tree.prototype.parent = function (t) {<\/p><p>        var /** @type {?} */ p = this.pathFromRoot(t);<\/p><p>        return p.length > 1 ? p[p.length - 2] : null;<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @param {?} t<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Tree.prototype.children = function (t) {<\/p><p>        var /** @type {?} */ n = findNode(t, this._root);<\/p><p>        return n ? n.children.map(function (t) { return t.value; }) : [];<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @param {?} t<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Tree.prototype.firstChild = function (t) {<\/p><p>        var /** @type {?} */ n = findNode(t, this._root);<\/p><p>        return n && n.children.length > 0 ? n.children[0].value : null;<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @param {?} t<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Tree.prototype.siblings = function (t) {<\/p><p>        var /** @type {?} */ p = findPath(t, this._root);<\/p><p>        if (p.length < 2)<\/p><p>            return [];<\/p><p>        var /** @type {?} */ c = p[p.length - 2].children.map(function (c) { return c.value; });<\/p><p>        return c.filter(function (cc) { return cc !== t; });<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @param {?} t<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Tree.prototype.pathFromRoot = function (t) { return findPath(t, this._root).map(function (s) { return s.value; }); };<\/p><p>    return Tree;<\/p><p>}());<\/p><p>/**<\/p><p> * @template T<\/p><p> * @param {?} value<\/p><p> * @param {?} node<\/p><p> * @return {?}<\/p><p> */<\/p><p>function findNode(value, node) {<\/p><p>    if (value === node.value)<\/p><p>        return node;<\/p><p>    for (var _i = 0, _a = node.children; _i < _a.length; _i++) {<\/p><p>        var child = _a[_i];<\/p><p>        var /** @type {?} */ node_1 = findNode(value, child);<\/p><p>        if (node_1)<\/p><p>            return node_1;<\/p><p>    }<\/p><p>    return null;<\/p><p>}<\/p><p>/**<\/p><p> * @template T<\/p><p> * @param {?} value<\/p><p> * @param {?} node<\/p><p> * @return {?}<\/p><p> */<\/p><p>function findPath(value, node) {<\/p><p>    if (value === node.value)<\/p><p>        return [node];<\/p><p>    for (var _i = 0, _a = node.children; _i < _a.length; _i++) {<\/p><p>        var child = _a[_i];<\/p><p>        var /** @type {?} */ path = findPath(value, child);<\/p><p>        if (path.length) {<\/p><p>            path.unshift(node);<\/p><p>            return path;<\/p><p>        }<\/p><p>    }<\/p><p>    return [];<\/p><p>}<\/p><p>var TreeNode = (function () {<\/p><p>    /**<\/p><p>     * @param {?} value<\/p><p>     * @param {?} children<\/p><p>     */<\/p><p>    function TreeNode(value, children) {<\/p><p>        this.value = value;<\/p><p>        this.children = children;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    TreeNode.prototype.toString = function () { return \"TreeNode(\" + this.value + \")\"; };<\/p><p>    return TreeNode;<\/p><p>}());<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * \\@whatItDoes Represents the state of the router.<\/p><p> *<\/p><p> * \\@howToUse<\/p><p> *<\/p><p> * ```<\/p><p> * \\@Component({templateUrl:'template.html'})<\/p><p> * class MyComponent {<\/p><p> *   constructor(router: Router) {<\/p><p> *     const state: RouterState = router.routerState;<\/p><p> *     const root: ActivatedRoute = state.root;<\/p><p> *     const child = root.firstChild;<\/p><p> *     const id: Observable<string> = child.params.map(p => p.id);<\/p><p> *     //...<\/p><p> *   }<\/p><p> * }<\/p><p> * ```<\/p><p> *<\/p><p> * \\@description<\/p><p> * RouterState is a tree of activated routes. Every node in this tree knows about the \"consumed\" URL<\/p><p> * segments, the extracted parameters, and the resolved data.<\/p><p> *<\/p><p> * See {\\@link ActivatedRoute} for more information.<\/p><p> *<\/p><p> * \\@stable<\/p><p> */<\/p><p>var RouterState = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](RouterState, _super);<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @param {?} root<\/p><p>     * @param {?} snapshot<\/p><p>     */<\/p><p>    function RouterState(root, snapshot) {<\/p><p>        var _this = _super.call(this, root) || this;<\/p><p>        _this.snapshot = snapshot;<\/p><p>        setRouterState(_this, root);<\/p><p>        return _this;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouterState.prototype.toString = function () { return this.snapshot.toString(); };<\/p><p>    return RouterState;<\/p><p>}(Tree));<\/p><p>/**<\/p><p> * @param {?} urlTree<\/p><p> * @param {?} rootComponent<\/p><p> * @return {?}<\/p><p> */<\/p><p>function createEmptyState(urlTree, rootComponent) {<\/p><p>    var /** @type {?} */ snapshot = createEmptyStateSnapshot(urlTree, rootComponent);<\/p><p>    var /** @type {?} */ emptyUrl = new __WEBPACK_IMPORTED_MODULE_3_rxjs_BehaviorSubject__[\"BehaviorSubject\"]([new UrlSegment('', {})]);<\/p><p>    var /** @type {?} */ emptyParams = new __WEBPACK_IMPORTED_MODULE_3_rxjs_BehaviorSubject__[\"BehaviorSubject\"]({});<\/p><p>    var /** @type {?} */ emptyData = new __WEBPACK_IMPORTED_MODULE_3_rxjs_BehaviorSubject__[\"BehaviorSubject\"]({});<\/p><p>    var /** @type {?} */ emptyQueryParams = new __WEBPACK_IMPORTED_MODULE_3_rxjs_BehaviorSubject__[\"BehaviorSubject\"]({});<\/p><p>    var /** @type {?} */ fragment = new __WEBPACK_IMPORTED_MODULE_3_rxjs_BehaviorSubject__[\"BehaviorSubject\"]('');<\/p><p>    var /** @type {?} */ activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);<\/p><p>    activated.snapshot = snapshot.root;<\/p><p>    return new RouterState(new TreeNode(activated, []), snapshot);<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} urlTree<\/p><p> * @param {?} rootComponent<\/p><p> * @return {?}<\/p><p> */<\/p><p>function createEmptyStateSnapshot(urlTree, rootComponent) {<\/p><p>    var /** @type {?} */ emptyParams = {};<\/p><p>    var /** @type {?} */ emptyData = {};<\/p><p>    var /** @type {?} */ emptyQueryParams = {};<\/p><p>    var /** @type {?} */ fragment = '';<\/p><p>    var /** @type {?} */ activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, urlTree.root, -1, {});<\/p><p>    return new RouterStateSnapshot('', new TreeNode(activated, []));<\/p><p>}<\/p><p>/**<\/p><p> * \\@whatItDoes Contains the information about a route associated with a component loaded in an<\/p><p> * outlet.<\/p><p> * An `ActivatedRoute` can also be used to traverse the router state tree.<\/p><p> *<\/p><p> * \\@howToUse<\/p><p> *<\/p><p> * ```<\/p><p> * \\@Component({...})<\/p><p> * class MyComponent {<\/p><p> *   constructor(route: ActivatedRoute) {<\/p><p> *     const id: Observable<string> = route.params.map(p => p.id);<\/p><p> *     const url: Observable<string> = route.url.map(segments => segments.join(''));<\/p><p> *     // route.data includes both `data` and `resolve`<\/p><p> *     const user = route.data.map(d => d.user);<\/p><p> *   }<\/p><p> * }<\/p><p> * ```<\/p><p> *<\/p><p> * \\@stable<\/p><p> */<\/p><p>var ActivatedRoute = (function () {<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @param {?} url<\/p><p>     * @param {?} params<\/p><p>     * @param {?} queryParams<\/p><p>     * @param {?} fragment<\/p><p>     * @param {?} data<\/p><p>     * @param {?} outlet<\/p><p>     * @param {?} component<\/p><p>     * @param {?} futureSnapshot<\/p><p>     */<\/p><p>    function ActivatedRoute(url, params, queryParams, fragment, data, outlet, component, futureSnapshot) {<\/p><p>        this.url = url;<\/p><p>        this.params = params;<\/p><p>        this.queryParams = queryParams;<\/p><p>        this.fragment = fragment;<\/p><p>        this.data = data;<\/p><p>        this.outlet = outlet;<\/p><p>        this.component = component;<\/p><p>        this._futureSnapshot = futureSnapshot;<\/p><p>    }<\/p><p>    Object.defineProperty(ActivatedRoute.prototype, \"routeConfig\", {<\/p><p>        /**<\/p><p>         * The configuration used to match this route<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._futureSnapshot.routeConfig; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(ActivatedRoute.prototype, \"root\", {<\/p><p>        /**<\/p><p>         * The root of the router state<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._routerState.root; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(ActivatedRoute.prototype, \"parent\", {<\/p><p>        /**<\/p><p>         * The parent of this route in the router state tree<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._routerState.parent(this); },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(ActivatedRoute.prototype, \"firstChild\", {<\/p><p>        /**<\/p><p>         * The first child of this route in the router state tree<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._routerState.firstChild(this); },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(ActivatedRoute.prototype, \"children\", {<\/p><p>        /**<\/p><p>         * The children of this route in the router state tree<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._routerState.children(this); },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(ActivatedRoute.prototype, \"pathFromRoot\", {<\/p><p>        /**<\/p><p>         * The path from the root of the router state tree to this route<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._routerState.pathFromRoot(this); },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(ActivatedRoute.prototype, \"paramMap\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () {<\/p><p>            if (!this._paramMap) {<\/p><p>                this._paramMap = __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(this.params, function (p) { return convertToParamMap(p); });<\/p><p>            }<\/p><p>            return this._paramMap;<\/p><p>        },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(ActivatedRoute.prototype, \"queryParamMap\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () {<\/p><p>            if (!this._queryParamMap) {<\/p><p>                this._queryParamMap =<\/p><p>                    __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(this.queryParams, function (p) { return convertToParamMap(p); });<\/p><p>            }<\/p><p>            return this._queryParamMap;<\/p><p>        },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ActivatedRoute.prototype.toString = function () {<\/p><p>        return this.snapshot ? this.snapshot.toString() : \"Future(\" + this._futureSnapshot + \")\";<\/p><p>    };<\/p><p>    return ActivatedRoute;<\/p><p>}());<\/p><p>/**<\/p><p> * \\@internal<\/p><p> * @param {?} route<\/p><p> * @return {?}<\/p><p> */<\/p><p>function inheritedParamsDataResolve(route) {<\/p><p>    var /** @type {?} */ pathToRoot = route.pathFromRoot;<\/p><p>    var /** @type {?} */ inhertingStartingFrom = pathToRoot.length - 1;<\/p><p>    while (inhertingStartingFrom >= 1) {<\/p><p>        var /** @type {?} */ current = pathToRoot[inhertingStartingFrom];<\/p><p>        var /** @type {?} */ parent = pathToRoot[inhertingStartingFrom - 1];<\/p><p>        // current route is an empty path => inherits its parent's params and data<\/p><p>        if (current.routeConfig && current.routeConfig.path === '') {<\/p><p>            inhertingStartingFrom--;<\/p><p>            // parent is componentless => current route should inherit its params and data<\/p><p>        }<\/p><p>        else if (!parent.component) {<\/p><p>            inhertingStartingFrom--;<\/p><p>        }<\/p><p>        else {<\/p><p>            break;<\/p><p>        }<\/p><p>    }<\/p><p>    return pathToRoot.slice(inhertingStartingFrom).reduce(function (res, curr) {<\/p><p>        var /** @type {?} */ params = Object.assign({}, res.params, curr.params);<\/p><p>        var /** @type {?} */ data = Object.assign({}, res.data, curr.data);<\/p><p>        var /** @type {?} */ resolve = Object.assign({}, res.resolve, curr._resolvedData);<\/p><p>        return { params: params, data: data, resolve: resolve };<\/p><p>    }, /** @type {?} */ ({ params: {}, data: {}, resolve: {} }));<\/p><p>}<\/p><p>/**<\/p><p> * \\@whatItDoes Contains the information about a route associated with a component loaded in an<\/p><p> * outlet<\/p><p> * at a particular moment in time. ActivatedRouteSnapshot can also be used to traverse the router<\/p><p> * state tree.<\/p><p> *<\/p><p> * \\@howToUse<\/p><p> *<\/p><p> * ```<\/p><p> * \\@Component({templateUrl:'./my-component.html'})<\/p><p> * class MyComponent {<\/p><p> *   constructor(route: ActivatedRoute) {<\/p><p> *     const id: string = route.snapshot.params.id;<\/p><p> *     const url: string = route.snapshot.url.join('');<\/p><p> *     const user = route.snapshot.data.user;<\/p><p> *   }<\/p><p> * }<\/p><p> * ```<\/p><p> *<\/p><p> * \\@stable<\/p><p> */<\/p><p>var ActivatedRouteSnapshot = (function () {<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @param {?} url<\/p><p>     * @param {?} params<\/p><p>     * @param {?} queryParams<\/p><p>     * @param {?} fragment<\/p><p>     * @param {?} data<\/p><p>     * @param {?} outlet<\/p><p>     * @param {?} component<\/p><p>     * @param {?} routeConfig<\/p><p>     * @param {?} urlSegment<\/p><p>     * @param {?} lastPathIndex<\/p><p>     * @param {?} resolve<\/p><p>     */<\/p><p>    function ActivatedRouteSnapshot(url, params, queryParams, fragment, data, outlet, component, routeConfig, urlSegment, lastPathIndex, resolve) {<\/p><p>        this.url = url;<\/p><p>        this.params = params;<\/p><p>        this.queryParams = queryParams;<\/p><p>        this.fragment = fragment;<\/p><p>        this.data = data;<\/p><p>        this.outlet = outlet;<\/p><p>        this.component = component;<\/p><p>        this._routeConfig = routeConfig;<\/p><p>        this._urlSegment = urlSegment;<\/p><p>        this._lastPathIndex = lastPathIndex;<\/p><p>        this._resolve = resolve;<\/p><p>    }<\/p><p>    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"routeConfig\", {<\/p><p>        /**<\/p><p>         * The configuration used to match this route<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._routeConfig; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"root\", {<\/p><p>        /**<\/p><p>         * The root of the router state<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._routerState.root; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"parent\", {<\/p><p>        /**<\/p><p>         * The parent of this route in the router state tree<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._routerState.parent(this); },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"firstChild\", {<\/p><p>        /**<\/p><p>         * The first child of this route in the router state tree<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._routerState.firstChild(this); },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"children\", {<\/p><p>        /**<\/p><p>         * The children of this route in the router state tree<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._routerState.children(this); },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"pathFromRoot\", {<\/p><p>        /**<\/p><p>         * The path from the root of the router state tree to this route<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this._routerState.pathFromRoot(this); },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"paramMap\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () {<\/p><p>            if (!this._paramMap) {<\/p><p>                this._paramMap = convertToParamMap(this.params);<\/p><p>            }<\/p><p>            return this._paramMap;<\/p><p>        },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"queryParamMap\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () {<\/p><p>            if (!this._queryParamMap) {<\/p><p>                this._queryParamMap = convertToParamMap(this.queryParams);<\/p><p>            }<\/p><p>            return this._queryParamMap;<\/p><p>        },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ActivatedRouteSnapshot.prototype.toString = function () {<\/p><p>        var /** @type {?} */ url = this.url.map(function (segment) { return segment.toString(); }).join('/');<\/p><p>        var /** @type {?} */ matched = this._routeConfig ? this._routeConfig.path : '';<\/p><p>        return \"Route(url:'\" + url + \"', path:'\" + matched + \"')\";<\/p><p>    };<\/p><p>    return ActivatedRouteSnapshot;<\/p><p>}());<\/p><p>/**<\/p><p> * \\@whatItDoes Represents the state of the router at a moment in time.<\/p><p> *<\/p><p> * \\@howToUse<\/p><p> *<\/p><p> * ```<\/p><p> * \\@Component({templateUrl:'template.html'})<\/p><p> * class MyComponent {<\/p><p> *   constructor(router: Router) {<\/p><p> *     const state: RouterState = router.routerState;<\/p><p> *     const snapshot: RouterStateSnapshot = state.snapshot;<\/p><p> *     const root: ActivatedRouteSnapshot = snapshot.root;<\/p><p> *     const child = root.firstChild;<\/p><p> *     const id: Observable<string> = child.params.map(p => p.id);<\/p><p> *     //...<\/p><p> *   }<\/p><p> * }<\/p><p> * ```<\/p><p> *<\/p><p> * \\@description<\/p><p> * RouterStateSnapshot is a tree of activated route snapshots. Every node in this tree knows about<\/p><p> * the \"consumed\" URL segments, the extracted parameters, and the resolved data.<\/p><p> *<\/p><p> * \\@stable<\/p><p> */<\/p><p>var RouterStateSnapshot = (function (_super) {<\/p><p>    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](RouterStateSnapshot, _super);<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @param {?} url<\/p><p>     * @param {?} root<\/p><p>     */<\/p><p>    function RouterStateSnapshot(url, root) {<\/p><p>        var _this = _super.call(this, root) || this;<\/p><p>        _this.url = url;<\/p><p>        setRouterState(_this, root);<\/p><p>        return _this;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouterStateSnapshot.prototype.toString = function () { return serializeNode(this._root); };<\/p><p>    return RouterStateSnapshot;<\/p><p>}(Tree));<\/p><p>/**<\/p><p> * @template U, T<\/p><p> * @param {?} state<\/p><p> * @param {?} node<\/p><p> * @return {?}<\/p><p> */<\/p><p>function setRouterState(state, node) {<\/p><p>    node.value._routerState = state;<\/p><p>    node.children.forEach(function (c) { return setRouterState(state, c); });<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} node<\/p><p> * @return {?}<\/p><p> */<\/p><p>function serializeNode(node) {<\/p><p>    var /** @type {?} */ c = node.children.length > 0 ? \" { \" + node.children.map(serializeNode).join(\", \") + \" } \" : '';<\/p><p>    return \"\" + node.value + c;<\/p><p>}<\/p><p>/**<\/p><p> * The expectation is that the activate route is created with the right set of parameters.<\/p><p> * So we push new values into the observables only when they are not the initial values.<\/p><p> * And we detect that by checking if the snapshot field is set.<\/p><p> * @param {?} route<\/p><p> * @return {?}<\/p><p> */<\/p><p>function advanceActivatedRoute(route) {<\/p><p>    if (route.snapshot) {<\/p><p>        var /** @type {?} */ currentSnapshot = route.snapshot;<\/p><p>        var /** @type {?} */ nextSnapshot = route._futureSnapshot;<\/p><p>        route.snapshot = nextSnapshot;<\/p><p>        if (!shallowEqual(currentSnapshot.queryParams, nextSnapshot.queryParams)) {<\/p><p>            ((route.queryParams)).next(nextSnapshot.queryParams);<\/p><p>        }<\/p><p>        if (currentSnapshot.fragment !== nextSnapshot.fragment) {<\/p><p>            ((route.fragment)).next(nextSnapshot.fragment);<\/p><p>        }<\/p><p>        if (!shallowEqual(currentSnapshot.params, nextSnapshot.params)) {<\/p><p>            ((route.params)).next(nextSnapshot.params);<\/p><p>        }<\/p><p>        if (!shallowEqualArrays(currentSnapshot.url, nextSnapshot.url)) {<\/p><p>            ((route.url)).next(nextSnapshot.url);<\/p><p>        }<\/p><p>        if (!shallowEqual(currentSnapshot.data, nextSnapshot.data)) {<\/p><p>            ((route.data)).next(nextSnapshot.data);<\/p><p>        }<\/p><p>    }<\/p><p>    else {<\/p><p>        route.snapshot = route._futureSnapshot;<\/p><p>        // this is for resolved data<\/p><p>        ((route.data)).next(route._futureSnapshot.data);<\/p><p>    }<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} a<\/p><p> * @param {?} b<\/p><p> * @return {?}<\/p><p> */<\/p><p>function equalParamsAndUrlSegments(a, b) {<\/p><p>    var /** @type {?} */ equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);<\/p><p>    var /** @type {?} */ parentsMismatch = !a.parent !== !b.parent;<\/p><p>    return equalUrlParams && !parentsMismatch &&<\/p><p>        (!a.parent || equalParamsAndUrlSegments(a.parent, /** @type {?} */ ((b.parent))));<\/p><p>}<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * @param {?} routeReuseStrategy<\/p><p> * @param {?} curr<\/p><p> * @param {?} prevState<\/p><p> * @return {?}<\/p><p> */<\/p><p>function createRouterState(routeReuseStrategy, curr, prevState) {<\/p><p>    var /** @type {?} */ root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);<\/p><p>    return new RouterState(root, curr);<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} routeReuseStrategy<\/p><p> * @param {?} curr<\/p><p> * @param {?=} prevState<\/p><p> * @return {?}<\/p><p> */<\/p><p>function createNode(routeReuseStrategy, curr, prevState) {<\/p><p>    // reuse an activated route that is currently displayed on the screen<\/p><p>    if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {<\/p><p>        var /** @type {?} */ value = prevState.value;<\/p><p>        value._futureSnapshot = curr.value;<\/p><p>        var /** @type {?} */ children = createOrReuseChildren(routeReuseStrategy, curr, prevState);<\/p><p>        return new TreeNode(value, children);<\/p><p>        // retrieve an activated route that is used to be displayed, but is not currently displayed<\/p><p>    }<\/p><p>    else if (routeReuseStrategy.retrieve(curr.value)) {<\/p><p>        var /** @type {?} */ tree_1 = ((routeReuseStrategy.retrieve(curr.value))).route;<\/p><p>        setFutureSnapshotsOfActivatedRoutes(curr, tree_1);<\/p><p>        return tree_1;<\/p><p>    }<\/p><p>    else {<\/p><p>        var /** @type {?} */ value = createActivatedRoute(curr.value);<\/p><p>        var /** @type {?} */ children = curr.children.map(function (c) { return createNode(routeReuseStrategy, c); });<\/p><p>        return new TreeNode(value, children);<\/p><p>    }<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} curr<\/p><p> * @param {?} result<\/p><p> * @return {?}<\/p><p> */<\/p><p>function setFutureSnapshotsOfActivatedRoutes(curr, result) {<\/p><p>    if (curr.value.routeConfig !== result.value.routeConfig) {<\/p><p>        throw new Error('Cannot reattach ActivatedRouteSnapshot created from a different route');<\/p><p>    }<\/p><p>    if (curr.children.length !== result.children.length) {<\/p><p>        throw new Error('Cannot reattach ActivatedRouteSnapshot with a different number of children');<\/p><p>    }<\/p><p>    result.value._futureSnapshot = curr.value;<\/p><p>    for (var /** @type {?} */ i = 0; i < curr.children.length; ++i) {<\/p><p>        setFutureSnapshotsOfActivatedRoutes(curr.children[i], result.children[i]);<\/p><p>    }<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} routeReuseStrategy<\/p><p> * @param {?} curr<\/p><p> * @param {?} prevState<\/p><p> * @return {?}<\/p><p> */<\/p><p>function createOrReuseChildren(routeReuseStrategy, curr, prevState) {<\/p><p>    return curr.children.map(function (child) {<\/p><p>        for (var _i = 0, _a = prevState.children; _i < _a.length; _i++) {<\/p><p>            var p = _a[_i];<\/p><p>            if (routeReuseStrategy.shouldReuseRoute(p.value.snapshot, child.value)) {<\/p><p>                return createNode(routeReuseStrategy, child, p);<\/p><p>            }<\/p><p>        }<\/p><p>        return createNode(routeReuseStrategy, child);<\/p><p>    });<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} c<\/p><p> * @return {?}<\/p><p> */<\/p><p>function createActivatedRoute(c) {<\/p><p>    return new ActivatedRoute(new __WEBPACK_IMPORTED_MODULE_3_rxjs_BehaviorSubject__[\"BehaviorSubject\"](c.url), new __WEBPACK_IMPORTED_MODULE_3_rxjs_BehaviorSubject__[\"BehaviorSubject\"](c.params), new __WEBPACK_IMPORTED_MODULE_3_rxjs_BehaviorSubject__[\"BehaviorSubject\"](c.queryParams), new __WEBPACK_IMPORTED_MODULE_3_rxjs_BehaviorSubject__[\"BehaviorSubject\"](c.fragment), new __WEBPACK_IMPORTED_MODULE_3_rxjs_BehaviorSubject__[\"BehaviorSubject\"](c.data), c.outlet, c.component, c);<\/p><p>}<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * @param {?} route<\/p><p> * @param {?} urlTree<\/p><p> * @param {?} commands<\/p><p> * @param {?} queryParams<\/p><p> * @param {?} fragment<\/p><p> * @return {?}<\/p><p> */<\/p><p>function createUrlTree(route, urlTree, commands, queryParams, fragment) {<\/p><p>    if (commands.length === 0) {<\/p><p>        return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);<\/p><p>    }<\/p><p>    var /** @type {?} */ nav = computeNavigation(commands);<\/p><p>    if (nav.toRoot()) {<\/p><p>        return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);<\/p><p>    }<\/p><p>    var /** @type {?} */ startingPosition = findStartingPosition(nav, urlTree, route);<\/p><p>    var /** @type {?} */ segmentGroup = startingPosition.processChildren ?<\/p><p>        updateSegmentGroupChildren(startingPosition.segmentGroup, startingPosition.index, nav.commands) :<\/p><p>        updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, nav.commands);<\/p><p>    return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} command<\/p><p> * @return {?}<\/p><p> */<\/p><p>function isMatrixParams(command) {<\/p><p>    return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} oldSegmentGroup<\/p><p> * @param {?} newSegmentGroup<\/p><p> * @param {?} urlTree<\/p><p> * @param {?} queryParams<\/p><p> * @param {?} fragment<\/p><p> * @return {?}<\/p><p> */<\/p><p>function tree(oldSegmentGroup, newSegmentGroup, urlTree, queryParams, fragment) {<\/p><p>    var /** @type {?} */ qp = {};<\/p><p>    if (queryParams) {<\/p><p>        forEach(queryParams, function (value, name) {<\/p><p>            qp[name] = Array.isArray(value) ? value.map(function (v) { return \"\" + v; }) : \"\" + value;<\/p><p>        });<\/p><p>    }<\/p><p>    if (urlTree.root === oldSegmentGroup) {<\/p><p>        return new UrlTree(newSegmentGroup, qp, fragment);<\/p><p>    }<\/p><p>    return new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), qp, fragment);<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} current<\/p><p> * @param {?} oldSegment<\/p><p> * @param {?} newSegment<\/p><p> * @return {?}<\/p><p> */<\/p><p>function replaceSegment(current, oldSegment, newSegment) {<\/p><p>    var /** @type {?} */ children = {};<\/p><p>    forEach(current.children, function (c, outletName) {<\/p><p>        if (c === oldSegment) {<\/p><p>            children[outletName] = newSegment;<\/p><p>        }<\/p><p>        else {<\/p><p>            children[outletName] = replaceSegment(c, oldSegment, newSegment);<\/p><p>        }<\/p><p>    });<\/p><p>    return new UrlSegmentGroup(current.segments, children);<\/p><p>}<\/p><p>var Navigation = (function () {<\/p><p>    /**<\/p><p>     * @param {?} isAbsolute<\/p><p>     * @param {?} numberOfDoubleDots<\/p><p>     * @param {?} commands<\/p><p>     */<\/p><p>    function Navigation(isAbsolute, numberOfDoubleDots, commands) {<\/p><p>        this.isAbsolute = isAbsolute;<\/p><p>        this.numberOfDoubleDots = numberOfDoubleDots;<\/p><p>        this.commands = commands;<\/p><p>        if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {<\/p><p>            throw new Error('Root segment cannot have matrix parameters');<\/p><p>        }<\/p><p>        var cmdWithOutlet = commands.find(function (c) { return typeof c === 'object' && c != null && c.outlets; });<\/p><p>        if (cmdWithOutlet && cmdWithOutlet !== last$1(commands)) {<\/p><p>            throw new Error('{outlets:{}} has to be the last command');<\/p><p>        }<\/p><p>    }<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Navigation.prototype.toRoot = function () {<\/p><p>        return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';<\/p><p>    };<\/p><p>    return Navigation;<\/p><p>}());<\/p><p>/**<\/p><p> * Transforms commands to a normalized `Navigation`<\/p><p> * @param {?} commands<\/p><p> * @return {?}<\/p><p> */<\/p><p>function computeNavigation(commands) {<\/p><p>    if ((typeof commands[0] === 'string') && commands.length === 1 && commands[0] === '/') {<\/p><p>        return new Navigation(true, 0, commands);<\/p><p>    }<\/p><p>    var /** @type {?} */ numberOfDoubleDots = 0;<\/p><p>    var /** @type {?} */ isAbsolute = false;<\/p><p>    var /** @type {?} */ res = commands.reduce(function (res, cmd, cmdIdx) {<\/p><p>        if (typeof cmd === 'object' && cmd != null) {<\/p><p>            if (cmd.outlets) {<\/p><p>                var /** @type {?} */ outlets_1 = {};<\/p><p>                forEach(cmd.outlets, function (commands, name) {<\/p><p>                    outlets_1[name] = typeof commands === 'string' ? commands.split('/') : commands;<\/p><p>                });<\/p><p>                return res.concat([{ outlets: outlets_1 }]);<\/p><p>            }<\/p><p>            if (cmd.segmentPath) {<\/p><p>                return res.concat([cmd.segmentPath]);<\/p><p>            }<\/p><p>        }<\/p><p>        if (!(typeof cmd === 'string')) {<\/p><p>            return res.concat([cmd]);<\/p><p>        }<\/p><p>        if (cmdIdx === 0) {<\/p><p>            cmd.split('/').forEach(function (urlPart, partIndex) {<\/p><p>                if (partIndex == 0 && urlPart === '.') {<\/p><p>                    // skip './a'<\/p><p>                }<\/p><p>                else if (partIndex == 0 && urlPart === '') {<\/p><p>                    isAbsolute = true;<\/p><p>                }<\/p><p>                else if (urlPart === '..') {<\/p><p>                    numberOfDoubleDots++;<\/p><p>                }<\/p><p>                else if (urlPart != '') {<\/p><p>                    res.push(urlPart);<\/p><p>                }<\/p><p>            });<\/p><p>            return res;<\/p><p>        }<\/p><p>        return res.concat([cmd]);<\/p><p>    }, []);<\/p><p>    return new Navigation(isAbsolute, numberOfDoubleDots, res);<\/p><p>}<\/p><p>var Position = (function () {<\/p><p>    /**<\/p><p>     * @param {?} segmentGroup<\/p><p>     * @param {?} processChildren<\/p><p>     * @param {?} index<\/p><p>     */<\/p><p>    function Position(segmentGroup, processChildren, index) {<\/p><p>        this.segmentGroup = segmentGroup;<\/p><p>        this.processChildren = processChildren;<\/p><p>        this.index = index;<\/p><p>    }<\/p><p>    return Position;<\/p><p>}());<\/p><p>/**<\/p><p> * @param {?} nav<\/p><p> * @param {?} tree<\/p><p> * @param {?} route<\/p><p> * @return {?}<\/p><p> */<\/p><p>function findStartingPosition(nav, tree, route) {<\/p><p>    if (nav.isAbsolute) {<\/p><p>        return new Position(tree.root, true, 0);<\/p><p>    }<\/p><p>    if (route.snapshot._lastPathIndex === -1) {<\/p><p>        return new Position(route.snapshot._urlSegment, true, 0);<\/p><p>    }<\/p><p>    var /** @type {?} */ modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;<\/p><p>    var /** @type {?} */ index = route.snapshot._lastPathIndex + modifier;<\/p><p>    return createPositionApplyingDoubleDots(route.snapshot._urlSegment, index, nav.numberOfDoubleDots);<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} group<\/p><p> * @param {?} index<\/p><p> * @param {?} numberOfDoubleDots<\/p><p> * @return {?}<\/p><p> */<\/p><p>function createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {<\/p><p>    var /** @type {?} */ g = group;<\/p><p>    var /** @type {?} */ ci = index;<\/p><p>    var /** @type {?} */ dd = numberOfDoubleDots;<\/p><p>    while (dd > ci) {<\/p><p>        dd -= ci;<\/p><p>        g = ((g.parent));<\/p><p>        if (!g) {<\/p><p>            throw new Error('Invalid number of \\'../\\'');<\/p><p>        }<\/p><p>        ci = g.segments.length;<\/p><p>    }<\/p><p>    return new Position(g, false, ci - dd);<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} command<\/p><p> * @return {?}<\/p><p> */<\/p><p>function getPath(command) {<\/p><p>    if (typeof command === 'object' && command != null && command.outlets) {<\/p><p>        return command.outlets[PRIMARY_OUTLET];<\/p><p>    }<\/p><p>    return \"\" + command;<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} commands<\/p><p> * @return {?}<\/p><p> */<\/p><p>function getOutlets(commands) {<\/p><p>    if (!(typeof commands[0] === 'object'))<\/p><p>        return _a = {}, _a[PRIMARY_OUTLET] = commands, _a;<\/p><p>    if (commands[0].outlets === undefined)<\/p><p>        return _b = {}, _b[PRIMARY_OUTLET] = commands, _b;<\/p><p>    return commands[0].outlets;<\/p><p>    var _a, _b;<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} segmentGroup<\/p><p> * @param {?} startIndex<\/p><p> * @param {?} commands<\/p><p> * @return {?}<\/p><p> */<\/p><p>function updateSegmentGroup(segmentGroup, startIndex, commands) {<\/p><p>    if (!segmentGroup) {<\/p><p>        segmentGroup = new UrlSegmentGroup([], {});<\/p><p>    }<\/p><p>    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {<\/p><p>        return updateSegmentGroupChildren(segmentGroup, startIndex, commands);<\/p><p>    }<\/p><p>    var /** @type {?} */ m = prefixedWith(segmentGroup, startIndex, commands);<\/p><p>    var /** @type {?} */ slicedCommands = commands.slice(m.commandIndex);<\/p><p>    if (m.match && m.pathIndex < segmentGroup.segments.length) {<\/p><p>        var /** @type {?} */ g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});<\/p><p>        g.children[PRIMARY_OUTLET] =<\/p><p>            new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);<\/p><p>        return updateSegmentGroupChildren(g, 0, slicedCommands);<\/p><p>    }<\/p><p>    else if (m.match && slicedCommands.length === 0) {<\/p><p>        return new UrlSegmentGroup(segmentGroup.segments, {});<\/p><p>    }<\/p><p>    else if (m.match && !segmentGroup.hasChildren()) {<\/p><p>        return createNewSegmentGroup(segmentGroup, startIndex, commands);<\/p><p>    }<\/p><p>    else if (m.match) {<\/p><p>        return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);<\/p><p>    }<\/p><p>    else {<\/p><p>        return createNewSegmentGroup(segmentGroup, startIndex, commands);<\/p><p>    }<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} segmentGroup<\/p><p> * @param {?} startIndex<\/p><p> * @param {?} commands<\/p><p> * @return {?}<\/p><p> */<\/p><p>function updateSegmentGroupChildren(segmentGroup, startIndex, commands) {<\/p><p>    if (commands.length === 0) {<\/p><p>        return new UrlSegmentGroup(segmentGroup.segments, {});<\/p><p>    }<\/p><p>    else {<\/p><p>        var /** @type {?} */ outlets_2 = getOutlets(commands);<\/p><p>        var /** @type {?} */ children_2 = {};<\/p><p>        forEach(outlets_2, function (commands, outlet) {<\/p><p>            if (commands !== null) {<\/p><p>                children_2[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);<\/p><p>            }<\/p><p>        });<\/p><p>        forEach(segmentGroup.children, function (child, childOutlet) {<\/p><p>            if (outlets_2[childOutlet] === undefined) {<\/p><p>                children_2[childOutlet] = child;<\/p><p>            }<\/p><p>        });<\/p><p>        return new UrlSegmentGroup(segmentGroup.segments, children_2);<\/p><p>    }<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} segmentGroup<\/p><p> * @param {?} startIndex<\/p><p> * @param {?} commands<\/p><p> * @return {?}<\/p><p> */<\/p><p>function prefixedWith(segmentGroup, startIndex, commands) {<\/p><p>    var /** @type {?} */ currentCommandIndex = 0;<\/p><p>    var /** @type {?} */ currentPathIndex = startIndex;<\/p><p>    var /** @type {?} */ noMatch = { match: false, pathIndex: 0, commandIndex: 0 };<\/p><p>    while (currentPathIndex < segmentGroup.segments.length) {<\/p><p>        if (currentCommandIndex >= commands.length)<\/p><p>            return noMatch;<\/p><p>        var /** @type {?} */ path = segmentGroup.segments[currentPathIndex];<\/p><p>        var /** @type {?} */ curr = getPath(commands[currentCommandIndex]);<\/p><p>        var /** @type {?} */ next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;<\/p><p>        if (currentPathIndex > 0 && curr === undefined)<\/p><p>            break;<\/p><p>        if (curr && next && (typeof next === 'object') && next.outlets === undefined) {<\/p><p>            if (!compare(curr, next, path))<\/p><p>                return noMatch;<\/p><p>            currentCommandIndex += 2;<\/p><p>        }<\/p><p>        else {<\/p><p>            if (!compare(curr, {}, path))<\/p><p>                return noMatch;<\/p><p>            currentCommandIndex++;<\/p><p>        }<\/p><p>        currentPathIndex++;<\/p><p>    }<\/p><p>    return { match: true, pathIndex: currentPathIndex, commandIndex: currentCommandIndex };<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} segmentGroup<\/p><p> * @param {?} startIndex<\/p><p> * @param {?} commands<\/p><p> * @return {?}<\/p><p> */<\/p><p>function createNewSegmentGroup(segmentGroup, startIndex, commands) {<\/p><p>    var /** @type {?} */ paths = segmentGroup.segments.slice(0, startIndex);<\/p><p>    var /** @type {?} */ i = 0;<\/p><p>    while (i < commands.length) {<\/p><p>        if (typeof commands[i] === 'object' && commands[i].outlets !== undefined) {<\/p><p>            var /** @type {?} */ children = createNewSegmentChildren(commands[i].outlets);<\/p><p>            return new UrlSegmentGroup(paths, children);<\/p><p>        }<\/p><p>        // if we start with an object literal, we need to reuse the path part from the segment<\/p><p>        if (i === 0 && isMatrixParams(commands[0])) {<\/p><p>            var /** @type {?} */ p = segmentGroup.segments[startIndex];<\/p><p>            paths.push(new UrlSegment(p.path, commands[0]));<\/p><p>            i++;<\/p><p>            continue;<\/p><p>        }<\/p><p>        var /** @type {?} */ curr = getPath(commands[i]);<\/p><p>        var /** @type {?} */ next = (i < commands.length - 1) ? commands[i + 1] : null;<\/p><p>        if (curr && next && isMatrixParams(next)) {<\/p><p>            paths.push(new UrlSegment(curr, stringify(next)));<\/p><p>            i += 2;<\/p><p>        }<\/p><p>        else {<\/p><p>            paths.push(new UrlSegment(curr, {}));<\/p><p>            i++;<\/p><p>        }<\/p><p>    }<\/p><p>    return new UrlSegmentGroup(paths, {});<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} outlets<\/p><p> * @return {?}<\/p><p> */<\/p><p>function createNewSegmentChildren(outlets) {<\/p><p>    var /** @type {?} */ children = {};<\/p><p>    forEach(outlets, function (commands, outlet) {<\/p><p>        if (commands !== null) {<\/p><p>            children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);<\/p><p>        }<\/p><p>    });<\/p><p>    return children;<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} params<\/p><p> * @return {?}<\/p><p> */<\/p><p>function stringify(params) {<\/p><p>    var /** @type {?} */ res = {};<\/p><p>    forEach(params, function (v, k) { return res[k] = \"\" + v; });<\/p><p>    return res;<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} path<\/p><p> * @param {?} params<\/p><p> * @param {?} segment<\/p><p> * @return {?}<\/p><p> */<\/p><p>function compare(path, params, segment) {<\/p><p>    return path == segment.path && shallowEqual(params, segment.parameters);<\/p><p>}<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>var NoMatch$1 = (function () {<\/p><p>    function NoMatch$1() {<\/p><p>    }<\/p><p>    return NoMatch$1;<\/p><p>}());<\/p><p>/**<\/p><p> * @param {?} rootComponentType<\/p><p> * @param {?} config<\/p><p> * @param {?} urlTree<\/p><p> * @param {?} url<\/p><p> * @return {?}<\/p><p> */<\/p><p>function recognize(rootComponentType, config, urlTree, url) {<\/p><p>    return new Recognizer(rootComponentType, config, urlTree, url).recognize();<\/p><p>}<\/p><p>var Recognizer = (function () {<\/p><p>    /**<\/p><p>     * @param {?} rootComponentType<\/p><p>     * @param {?} config<\/p><p>     * @param {?} urlTree<\/p><p>     * @param {?} url<\/p><p>     */<\/p><p>    function Recognizer(rootComponentType, config, urlTree, url) {<\/p><p>        this.rootComponentType = rootComponentType;<\/p><p>        this.config = config;<\/p><p>        this.urlTree = urlTree;<\/p><p>        this.url = url;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Recognizer.prototype.recognize = function () {<\/p><p>        try {<\/p><p>            var /** @type {?} */ rootSegmentGroup = split$1(this.urlTree.root, [], [], this.config).segmentGroup;<\/p><p>            var /** @type {?} */ children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);<\/p><p>            var /** @type {?} */ root = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze(this.urlTree.queryParams), /** @type {?} */ ((this.urlTree.fragment)), {}, PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {});<\/p><p>            var /** @type {?} */ rootNode = new TreeNode(root, children);<\/p><p>            var /** @type {?} */ routeState = new RouterStateSnapshot(this.url, rootNode);<\/p><p>            this.inheritParamsAndData(routeState._root);<\/p><p>            return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(routeState);<\/p><p>        }<\/p><p>        catch (e) {<\/p><p>            return new __WEBPACK_IMPORTED_MODULE_14_rxjs_Observable__[\"Observable\"](function (obs) { return obs.error(e); });<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} routeNode<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Recognizer.prototype.inheritParamsAndData = function (routeNode) {<\/p><p>        var _this = this;<\/p><p>        var /** @type {?} */ route = routeNode.value;<\/p><p>        var /** @type {?} */ i = inheritedParamsDataResolve(route);<\/p><p>        route.params = Object.freeze(i.params);<\/p><p>        route.data = Object.freeze(i.data);<\/p><p>        routeNode.children.forEach(function (n) { return _this.inheritParamsAndData(n); });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} config<\/p><p>     * @param {?} segmentGroup<\/p><p>     * @param {?} outlet<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Recognizer.prototype.processSegmentGroup = function (config, segmentGroup, outlet) {<\/p><p>        if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {<\/p><p>            return this.processChildren(config, segmentGroup);<\/p><p>        }<\/p><p>        return this.processSegment(config, segmentGroup, segmentGroup.segments, outlet);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} config<\/p><p>     * @param {?} segmentGroup<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Recognizer.prototype.processChildren = function (config, segmentGroup) {<\/p><p>        var _this = this;<\/p><p>        var /** @type {?} */ children = mapChildrenIntoArray(segmentGroup, function (child, childOutlet) { return _this.processSegmentGroup(config, child, childOutlet); });<\/p><p>        checkOutletNameUniqueness(children);<\/p><p>        sortActivatedRouteSnapshots(children);<\/p><p>        return children;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} config<\/p><p>     * @param {?} segmentGroup<\/p><p>     * @param {?} segments<\/p><p>     * @param {?} outlet<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Recognizer.prototype.processSegment = function (config, segmentGroup, segments, outlet) {<\/p><p>        for (var _i = 0, config_1 = config; _i < config_1.length; _i++) {<\/p><p>            var r = config_1[_i];<\/p><p>            try {<\/p><p>                return this.processSegmentAgainstRoute(r, segmentGroup, segments, outlet);<\/p><p>            }<\/p><p>            catch (e) {<\/p><p>                if (!(e instanceof NoMatch$1))<\/p><p>                    throw e;<\/p><p>            }<\/p><p>        }<\/p><p>        if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {<\/p><p>            return [];<\/p><p>        }<\/p><p>        throw new NoMatch$1();<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} segmentGroup<\/p><p>     * @param {?} segments<\/p><p>     * @param {?} outlet<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Recognizer.prototype.noLeftoversInUrl = function (segmentGroup, segments, outlet) {<\/p><p>        return segments.length === 0 && !segmentGroup.children[outlet];<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} route<\/p><p>     * @param {?} rawSegment<\/p><p>     * @param {?} segments<\/p><p>     * @param {?} outlet<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Recognizer.prototype.processSegmentAgainstRoute = function (route, rawSegment, segments, outlet) {<\/p><p>        if (route.redirectTo)<\/p><p>            throw new NoMatch$1();<\/p><p>        if ((route.outlet || PRIMARY_OUTLET) !== outlet)<\/p><p>            throw new NoMatch$1();<\/p><p>        if (route.path === '**') {<\/p><p>            var /** @type {?} */ params = segments.length > 0 ? ((last$1(segments))).parameters : {};<\/p><p>            var /** @type {?} */ snapshot_1 = new ActivatedRouteSnapshot(segments, params, Object.freeze(this.urlTree.queryParams), /** @type {?} */ ((this.urlTree.fragment)), getData(route), outlet, /** @type {?} */ ((route.component)), route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + segments.length, getResolve(route));<\/p><p>            return [new TreeNode(snapshot_1, [])];<\/p><p>        }<\/p><p>        var _a = match$1(rawSegment, route, segments), consumedSegments = _a.consumedSegments, parameters = _a.parameters, lastChild = _a.lastChild;<\/p><p>        var /** @type {?} */ rawSlicedSegments = segments.slice(lastChild);<\/p><p>        var /** @type {?} */ childConfig = getChildConfig(route);<\/p><p>        var _b = split$1(rawSegment, consumedSegments, rawSlicedSegments, childConfig), segmentGroup = _b.segmentGroup, slicedSegments = _b.slicedSegments;<\/p><p>        var /** @type {?} */ snapshot = new ActivatedRouteSnapshot(consumedSegments, parameters, Object.freeze(this.urlTree.queryParams), /** @type {?} */ ((this.urlTree.fragment)), getData(route), outlet, /** @type {?} */ ((route.component)), route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length, getResolve(route));<\/p><p>        if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {<\/p><p>            var /** @type {?} */ children_3 = this.processChildren(childConfig, segmentGroup);<\/p><p>            return [new TreeNode(snapshot, children_3)];<\/p><p>        }<\/p><p>        if (childConfig.length === 0 && slicedSegments.length === 0) {<\/p><p>            return [new TreeNode(snapshot, [])];<\/p><p>        }<\/p><p>        var /** @type {?} */ children = this.processSegment(childConfig, segmentGroup, slicedSegments, PRIMARY_OUTLET);<\/p><p>        return [new TreeNode(snapshot, children)];<\/p><p>    };<\/p><p>    return Recognizer;<\/p><p>}());<\/p><p>/**<\/p><p> * @param {?} nodes<\/p><p> * @return {?}<\/p><p> */<\/p><p>function sortActivatedRouteSnapshots(nodes) {<\/p><p>    nodes.sort(function (a, b) {<\/p><p>        if (a.value.outlet === PRIMARY_OUTLET)<\/p><p>            return -1;<\/p><p>        if (b.value.outlet === PRIMARY_OUTLET)<\/p><p>            return 1;<\/p><p>        return a.value.outlet.localeCompare(b.value.outlet);<\/p><p>    });<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} route<\/p><p> * @return {?}<\/p><p> */<\/p><p>function getChildConfig(route) {<\/p><p>    if (route.children) {<\/p><p>        return route.children;<\/p><p>    }<\/p><p>    if (route.loadChildren) {<\/p><p>        return ((route._loadedConfig)).routes;<\/p><p>    }<\/p><p>    return [];<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} segmentGroup<\/p><p> * @param {?} route<\/p><p> * @param {?} segments<\/p><p> * @return {?}<\/p><p> */<\/p><p>function match$1(segmentGroup, route, segments) {<\/p><p>    if (route.path === '') {<\/p><p>        if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {<\/p><p>            throw new NoMatch$1();<\/p><p>        }<\/p><p>        return { consumedSegments: [], lastChild: 0, parameters: {} };<\/p><p>    }<\/p><p>    var /** @type {?} */ matcher = route.matcher || defaultUrlMatcher;<\/p><p>    var /** @type {?} */ res = matcher(segments, segmentGroup, route);<\/p><p>    if (!res)<\/p><p>        throw new NoMatch$1();<\/p><p>    var /** @type {?} */ posParams = {};<\/p><p>    forEach(/** @type {?} */ ((res.posParams)), function (v, k) { posParams[k] = v.path; });<\/p><p>    var /** @type {?} */ parameters = res.consumed.length > 0 ? Object.assign({}, posParams, res.consumed[res.consumed.length - 1].parameters) :<\/p><p>        posParams;<\/p><p>    return { consumedSegments: res.consumed, lastChild: res.consumed.length, parameters: parameters };<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} nodes<\/p><p> * @return {?}<\/p><p> */<\/p><p>function checkOutletNameUniqueness(nodes) {<\/p><p>    var /** @type {?} */ names = {};<\/p><p>    nodes.forEach(function (n) {<\/p><p>        var /** @type {?} */ routeWithSameOutletName = names[n.value.outlet];<\/p><p>        if (routeWithSameOutletName) {<\/p><p>            var /** @type {?} */ p = routeWithSameOutletName.url.map(function (s) { return s.toString(); }).join('/');<\/p><p>            var /** @type {?} */ c = n.value.url.map(function (s) { return s.toString(); }).join('/');<\/p><p>            throw new Error(\"Two segments cannot have the same outlet name: '\" + p + \"' and '\" + c + \"'.\");<\/p><p>        }<\/p><p>        names[n.value.outlet] = n.value;<\/p><p>    });<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} segmentGroup<\/p><p> * @return {?}<\/p><p> */<\/p><p>function getSourceSegmentGroup(segmentGroup) {<\/p><p>    var /** @type {?} */ s = segmentGroup;<\/p><p>    while (s._sourceSegment) {<\/p><p>        s = s._sourceSegment;<\/p><p>    }<\/p><p>    return s;<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} segmentGroup<\/p><p> * @return {?}<\/p><p> */<\/p><p>function getPathIndexShift(segmentGroup) {<\/p><p>    var /** @type {?} */ s = segmentGroup;<\/p><p>    var /** @type {?} */ res = (s._segmentIndexShift ? s._segmentIndexShift : 0);<\/p><p>    while (s._sourceSegment) {<\/p><p>        s = s._sourceSegment;<\/p><p>        res += (s._segmentIndexShift ? s._segmentIndexShift : 0);<\/p><p>    }<\/p><p>    return res - 1;<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} segmentGroup<\/p><p> * @param {?} consumedSegments<\/p><p> * @param {?} slicedSegments<\/p><p> * @param {?} config<\/p><p> * @return {?}<\/p><p> */<\/p><p>function split$1(segmentGroup, consumedSegments, slicedSegments, config) {<\/p><p>    if (slicedSegments.length > 0 &&<\/p><p>        containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {<\/p><p>        var /** @type {?} */ s_1 = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(segmentGroup, consumedSegments, config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));<\/p><p>        s_1._sourceSegment = segmentGroup;<\/p><p>        s_1._segmentIndexShift = consumedSegments.length;<\/p><p>        return { segmentGroup: s_1, slicedSegments: [] };<\/p><p>    }<\/p><p>    if (slicedSegments.length === 0 &&<\/p><p>        containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {<\/p><p>        var /** @type {?} */ s_2 = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));<\/p><p>        s_2._sourceSegment = segmentGroup;<\/p><p>        s_2._segmentIndexShift = consumedSegments.length;<\/p><p>        return { segmentGroup: s_2, slicedSegments: slicedSegments };<\/p><p>    }<\/p><p>    var /** @type {?} */ s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);<\/p><p>    s._sourceSegment = segmentGroup;<\/p><p>    s._segmentIndexShift = consumedSegments.length;<\/p><p>    return { segmentGroup: s, slicedSegments: slicedSegments };<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} segmentGroup<\/p><p> * @param {?} slicedSegments<\/p><p> * @param {?} routes<\/p><p> * @param {?} children<\/p><p> * @return {?}<\/p><p> */<\/p><p>function addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {<\/p><p>    var /** @type {?} */ res = {};<\/p><p>    for (var _i = 0, routes_3 = routes; _i < routes_3.length; _i++) {<\/p><p>        var r = routes_3[_i];<\/p><p>        if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet$1(r)]) {<\/p><p>            var /** @type {?} */ s = new UrlSegmentGroup([], {});<\/p><p>            s._sourceSegment = segmentGroup;<\/p><p>            s._segmentIndexShift = segmentGroup.segments.length;<\/p><p>            res[getOutlet$1(r)] = s;<\/p><p>        }<\/p><p>    }<\/p><p>    return Object.assign({}, children, res);<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} segmentGroup<\/p><p> * @param {?} consumedSegments<\/p><p> * @param {?} routes<\/p><p> * @param {?} primarySegment<\/p><p> * @return {?}<\/p><p> */<\/p><p>function createChildrenForEmptyPaths(segmentGroup, consumedSegments, routes, primarySegment) {<\/p><p>    var /** @type {?} */ res = {};<\/p><p>    res[PRIMARY_OUTLET] = primarySegment;<\/p><p>    primarySegment._sourceSegment = segmentGroup;<\/p><p>    primarySegment._segmentIndexShift = consumedSegments.length;<\/p><p>    for (var _i = 0, routes_4 = routes; _i < routes_4.length; _i++) {<\/p><p>        var r = routes_4[_i];<\/p><p>        if (r.path === '' && getOutlet$1(r) !== PRIMARY_OUTLET) {<\/p><p>            var /** @type {?} */ s = new UrlSegmentGroup([], {});<\/p><p>            s._sourceSegment = segmentGroup;<\/p><p>            s._segmentIndexShift = consumedSegments.length;<\/p><p>            res[getOutlet$1(r)] = s;<\/p><p>        }<\/p><p>    }<\/p><p>    return res;<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} segmentGroup<\/p><p> * @param {?} slicedSegments<\/p><p> * @param {?} routes<\/p><p> * @return {?}<\/p><p> */<\/p><p>function containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {<\/p><p>    return routes.some(function (r) { return emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet$1(r) !== PRIMARY_OUTLET; });<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} segmentGroup<\/p><p> * @param {?} slicedSegments<\/p><p> * @param {?} routes<\/p><p> * @return {?}<\/p><p> */<\/p><p>function containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {<\/p><p>    return routes.some(function (r) { return emptyPathMatch(segmentGroup, slicedSegments, r); });<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} segmentGroup<\/p><p> * @param {?} slicedSegments<\/p><p> * @param {?} r<\/p><p> * @return {?}<\/p><p> */<\/p><p>function emptyPathMatch(segmentGroup, slicedSegments, r) {<\/p><p>    if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full') {<\/p><p>        return false;<\/p><p>    }<\/p><p>    return r.path === '' && r.redirectTo === undefined;<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} route<\/p><p> * @return {?}<\/p><p> */<\/p><p>function getOutlet$1(route) {<\/p><p>    return route.outlet || PRIMARY_OUTLET;<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} route<\/p><p> * @return {?}<\/p><p> */<\/p><p>function getData(route) {<\/p><p>    return route.data || {};<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} route<\/p><p> * @return {?}<\/p><p> */<\/p><p>function getResolve(route) {<\/p><p>    return route.resolve || {};<\/p><p>}<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * \\@whatItDoes Provides a way to customize when activated routes get reused.<\/p><p> *<\/p><p> * \\@experimental<\/p><p> * @abstract<\/p><p> */<\/p><p>var RouteReuseStrategy = (function () {<\/p><p>    function RouteReuseStrategy() {<\/p><p>    }<\/p><p>    /**<\/p><p>     * Determines if this route (and its subtree) should be detached to be reused later<\/p><p>     * @abstract<\/p><p>     * @param {?} route<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouteReuseStrategy.prototype.shouldDetach = function (route) { };<\/p><p>    /**<\/p><p>     * Stores the detached route.<\/p><p>     *<\/p><p>     * Storing a `null` value should erase the previously stored value.<\/p><p>     * @abstract<\/p><p>     * @param {?} route<\/p><p>     * @param {?} handle<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouteReuseStrategy.prototype.store = function (route, handle) { };<\/p><p>    /**<\/p><p>     * Determines if this route (and its subtree) should be reattached<\/p><p>     * @abstract<\/p><p>     * @param {?} route<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouteReuseStrategy.prototype.shouldAttach = function (route) { };<\/p><p>    /**<\/p><p>     * Retrieves the previously stored route<\/p><p>     * @abstract<\/p><p>     * @param {?} route<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouteReuseStrategy.prototype.retrieve = function (route) { };<\/p><p>    /**<\/p><p>     * Determines if a route should be reused<\/p><p>     * @abstract<\/p><p>     * @param {?} future<\/p><p>     * @param {?} curr<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouteReuseStrategy.prototype.shouldReuseRoute = function (future, curr) { };<\/p><p>    return RouteReuseStrategy;<\/p><p>}());<\/p><p>/**<\/p><p> * Does not detach any subtrees. Reuses routes as long as their route config is the same.<\/p><p> */<\/p><p>var DefaultRouteReuseStrategy = (function () {<\/p><p>    function DefaultRouteReuseStrategy() {<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} route<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DefaultRouteReuseStrategy.prototype.shouldDetach = function (route) { return false; };<\/p><p>    /**<\/p><p>     * @param {?} route<\/p><p>     * @param {?} detachedTree<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DefaultRouteReuseStrategy.prototype.store = function (route, detachedTree) { };<\/p><p>    /**<\/p><p>     * @param {?} route<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DefaultRouteReuseStrategy.prototype.shouldAttach = function (route) { return false; };<\/p><p>    /**<\/p><p>     * @param {?} route<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DefaultRouteReuseStrategy.prototype.retrieve = function (route) { return null; };<\/p><p>    /**<\/p><p>     * @param {?} future<\/p><p>     * @param {?} curr<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DefaultRouteReuseStrategy.prototype.shouldReuseRoute = function (future, curr) {<\/p><p>        return future.routeConfig === curr.routeConfig;<\/p><p>    };<\/p><p>    return DefaultRouteReuseStrategy;<\/p><p>}());<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * \\@docsNotRequired<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var ROUTES = new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"InjectionToken\"]('ROUTES');<\/p><p>var RouterConfigLoader = (function () {<\/p><p>    /**<\/p><p>     * @param {?} loader<\/p><p>     * @param {?} compiler<\/p><p>     * @param {?=} onLoadStartListener<\/p><p>     * @param {?=} onLoadEndListener<\/p><p>     */<\/p><p>    function RouterConfigLoader(loader, compiler, onLoadStartListener, onLoadEndListener) {<\/p><p>        this.loader = loader;<\/p><p>        this.compiler = compiler;<\/p><p>        this.onLoadStartListener = onLoadStartListener;<\/p><p>        this.onLoadEndListener = onLoadEndListener;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} parentInjector<\/p><p>     * @param {?} route<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouterConfigLoader.prototype.load = function (parentInjector, route) {<\/p><p>        var _this = this;<\/p><p>        if (this.onLoadStartListener) {<\/p><p>            this.onLoadStartListener(route);<\/p><p>        }<\/p><p>        var /** @type {?} */ moduleFactory$ = this.loadModuleFactory(/** @type {?} */ ((route.loadChildren)));<\/p><p>        return __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(moduleFactory$, function (factory) {<\/p><p>            if (_this.onLoadEndListener) {<\/p><p>                _this.onLoadEndListener(route);<\/p><p>            }<\/p><p>            var /** @type {?} */ module = factory.create(parentInjector);<\/p><p>            return new LoadedRouterConfig(flatten(module.injector.get(ROUTES)), module);<\/p><p>        });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} loadChildren<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouterConfigLoader.prototype.loadModuleFactory = function (loadChildren) {<\/p><p>        var _this = this;<\/p><p>        if (typeof loadChildren === 'string') {<\/p><p>            return Object(__WEBPACK_IMPORTED_MODULE_18_rxjs_observable_fromPromise__[\"fromPromise\"])(this.loader.load(loadChildren));<\/p><p>        }<\/p><p>        else {<\/p><p>            return __WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap__[\"mergeMap\"].call(wrapIntoObservable(loadChildren()), function (t) {<\/p><p>                if (t instanceof __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"NgModuleFactory\"]) {<\/p><p>                    return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(t);<\/p><p>                }<\/p><p>                else {<\/p><p>                    return Object(__WEBPACK_IMPORTED_MODULE_18_rxjs_observable_fromPromise__[\"fromPromise\"])(_this.compiler.compileModuleAsync(t));<\/p><p>                }<\/p><p>            });<\/p><p>        }<\/p><p>    };<\/p><p>    return RouterConfigLoader;<\/p><p>}());<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * \\@whatItDoes Provides a way to migrate AngularJS applications to Angular.<\/p><p> *<\/p><p> * \\@experimental<\/p><p> * @abstract<\/p><p> */<\/p><p>var UrlHandlingStrategy = (function () {<\/p><p>    function UrlHandlingStrategy() {<\/p><p>    }<\/p><p>    /**<\/p><p>     * Tells the router if this URL should be processed.<\/p><p>     *<\/p><p>     * When it returns true, the router will execute the regular navigation.<\/p><p>     * When it returns false, the router will set the router state to an empty state.<\/p><p>     * As a result, all the active components will be destroyed.<\/p><p>     *<\/p><p>     * @abstract<\/p><p>     * @param {?} url<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    UrlHandlingStrategy.prototype.shouldProcessUrl = function (url) { };<\/p><p>    /**<\/p><p>     * Extracts the part of the URL that should be handled by the router.<\/p><p>     * The rest of the URL will remain untouched.<\/p><p>     * @abstract<\/p><p>     * @param {?} url<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    UrlHandlingStrategy.prototype.extract = function (url) { };<\/p><p>    /**<\/p><p>     * Merges the URL fragment with the rest of the URL.<\/p><p>     * @abstract<\/p><p>     * @param {?} newUrlPart<\/p><p>     * @param {?} rawUrl<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    UrlHandlingStrategy.prototype.merge = function (newUrlPart, rawUrl) { };<\/p><p>    return UrlHandlingStrategy;<\/p><p>}());<\/p><p>/**<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var DefaultUrlHandlingStrategy = (function () {<\/p><p>    function DefaultUrlHandlingStrategy() {<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} url<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DefaultUrlHandlingStrategy.prototype.shouldProcessUrl = function (url) { return true; };<\/p><p>    /**<\/p><p>     * @param {?} url<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DefaultUrlHandlingStrategy.prototype.extract = function (url) { return url; };<\/p><p>    /**<\/p><p>     * @param {?} newUrlPart<\/p><p>     * @param {?} wholeUrl<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    DefaultUrlHandlingStrategy.prototype.merge = function (newUrlPart, wholeUrl) { return newUrlPart; };<\/p><p>    return DefaultUrlHandlingStrategy;<\/p><p>}());<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * @param {?} error<\/p><p> * @return {?}<\/p><p> */<\/p><p>function defaultErrorHandler(error) {<\/p><p>    throw error;<\/p><p>}<\/p><p>/**<\/p><p> * \\@internal<\/p><p> * @param {?} snapshot<\/p><p> * @return {?}<\/p><p> */<\/p><p>function defaultRouterHook(snapshot) {<\/p><p>    return (Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(null));<\/p><p>}<\/p><p>/**<\/p><p> * \\@whatItDoes Provides the navigation and url manipulation capabilities.<\/p><p> *<\/p><p> * See {\\@link Routes} for more details and examples.<\/p><p> *<\/p><p> * \\@ngModule RouterModule<\/p><p> *<\/p><p> * \\@stable<\/p><p> */<\/p><p>var Router = (function () {<\/p><p>    /**<\/p><p>     * @param {?} rootComponentType<\/p><p>     * @param {?} urlSerializer<\/p><p>     * @param {?} rootContexts<\/p><p>     * @param {?} location<\/p><p>     * @param {?} injector<\/p><p>     * @param {?} loader<\/p><p>     * @param {?} compiler<\/p><p>     * @param {?} config<\/p><p>     */<\/p><p>    function Router(rootComponentType, urlSerializer, rootContexts, location, injector, loader, compiler, config) {<\/p><p>        var _this = this;<\/p><p>        this.rootComponentType = rootComponentType;<\/p><p>        this.urlSerializer = urlSerializer;<\/p><p>        this.rootContexts = rootContexts;<\/p><p>        this.location = location;<\/p><p>        this.config = config;<\/p><p>        this.navigations = new __WEBPACK_IMPORTED_MODULE_3_rxjs_BehaviorSubject__[\"BehaviorSubject\"](/** @type {?} */ ((null)));<\/p><p>        this.routerEvents = new __WEBPACK_IMPORTED_MODULE_4_rxjs_Subject__[\"Subject\"]();<\/p><p>        this.navigationId = 0;<\/p><p>        /**<\/p><p>         * Error handler that is invoked when a navigation errors.<\/p><p>         *<\/p><p>         * See {\\@link ErrorHandler} for more information.<\/p><p>         */<\/p><p>        this.errorHandler = defaultErrorHandler;<\/p><p>        /**<\/p><p>         * Indicates if at least one navigation happened.<\/p><p>         */<\/p><p>        this.navigated = false;<\/p><p>        /**<\/p><p>         * Used by RouterModule. This allows us to<\/p><p>         * pause the navigation either before preactivation or after it.<\/p><p>         * \\@internal<\/p><p>         */<\/p><p>        this.hooks = {<\/p><p>            beforePreactivation: defaultRouterHook,<\/p><p>            afterPreactivation: defaultRouterHook<\/p><p>        };<\/p><p>        /**<\/p><p>         * Extracts and merges URLs. Used for AngularJS to Angular migrations.<\/p><p>         */<\/p><p>        this.urlHandlingStrategy = new DefaultUrlHandlingStrategy();<\/p><p>        this.routeReuseStrategy = new DefaultRouteReuseStrategy();<\/p><p>        var onLoadStart = function (r) { return _this.triggerEvent(new RouteConfigLoadStart(r)); };<\/p><p>        var onLoadEnd = function (r) { return _this.triggerEvent(new RouteConfigLoadEnd(r)); };<\/p><p>        this.ngModule = injector.get(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"NgModuleRef\"]);<\/p><p>        this.resetConfig(config);<\/p><p>        this.currentUrlTree = createEmptyUrlTree();<\/p><p>        this.rawUrlTree = this.currentUrlTree;<\/p><p>        this.configLoader = new RouterConfigLoader(loader, compiler, onLoadStart, onLoadEnd);<\/p><p>        this.currentRouterState = createEmptyState(this.currentUrlTree, this.rootComponentType);<\/p><p>        this.processNavigations();<\/p><p>    }<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * TODO: this should be removed once the constructor of the router made internal<\/p><p>     * @param {?} rootComponentType<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Router.prototype.resetRootComponentType = function (rootComponentType) {<\/p><p>        this.rootComponentType = rootComponentType;<\/p><p>        // TODO: vsavkin router 4.0 should make the root component set to null<\/p><p>        // this will simplify the lifecycle of the router.<\/p><p>        this.currentRouterState.root.component = this.rootComponentType;<\/p><p>    };<\/p><p>    /**<\/p><p>     * Sets up the location change listener and performs the initial navigation.<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Router.prototype.initialNavigation = function () {<\/p><p>        this.setUpLocationChangeListener();<\/p><p>        if (this.navigationId === 0) {<\/p><p>            this.navigateByUrl(this.location.path(true), { replaceUrl: true });<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * Sets up the location change listener.<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Router.prototype.setUpLocationChangeListener = function () {<\/p><p>        var _this = this;<\/p><p>        // Zone.current.wrap is needed because of the issue with RxJS scheduler,<\/p><p>        // which does not work properly with zone.js in IE and Safari<\/p><p>        if (!this.locationSubscription) {<\/p><p>            this.locationSubscription = (this.location.subscribe(Zone.current.wrap(function (change) {<\/p><p>                var /** @type {?} */ rawUrlTree = _this.urlSerializer.parse(change['url']);<\/p><p>                var /** @type {?} */ source = change['type'] === 'popstate' ? 'popstate' : 'hashchange';<\/p><p>                setTimeout(function () { _this.scheduleNavigation(rawUrlTree, source, { replaceUrl: true }); }, 0);<\/p><p>            })));<\/p><p>        }<\/p><p>    };<\/p><p>    Object.defineProperty(Router.prototype, \"routerState\", {<\/p><p>        /**<\/p><p>         * The current route state<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this.currentRouterState; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(Router.prototype, \"url\", {<\/p><p>        /**<\/p><p>         * The current url<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this.serializeUrl(this.currentUrlTree); },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(Router.prototype, \"events\", {<\/p><p>        /**<\/p><p>         * An observable of router events<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this.routerEvents; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    /**<\/p><p>     * \\@internal<\/p><p>     * @param {?} e<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Router.prototype.triggerEvent = function (e) { this.routerEvents.next(e); };<\/p><p>    /**<\/p><p>     * Resets the configuration used for navigation and generating links.<\/p><p>     *<\/p><p>     * ### Usage<\/p><p>     *<\/p><p>     * ```<\/p><p>     * router.resetConfig([<\/p><p>     *  { path: 'team/:id', component: TeamCmp, children: [<\/p><p>     *    { path: 'simple', component: SimpleCmp },<\/p><p>     *    { path: 'user/:name', component: UserCmp }<\/p><p>     *  ]}<\/p><p>     * ]);<\/p><p>     * ```<\/p><p>     * @param {?} config<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Router.prototype.resetConfig = function (config) {<\/p><p>        validateConfig(config);<\/p><p>        this.config = config;<\/p><p>        this.navigated = false;<\/p><p>    };<\/p><p>    /**<\/p><p>     * \\@docsNotRequired<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Router.prototype.ngOnDestroy = function () { this.dispose(); };<\/p><p>    /**<\/p><p>     * Disposes of the router<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Router.prototype.dispose = function () {<\/p><p>        if (this.locationSubscription) {<\/p><p>            this.locationSubscription.unsubscribe();<\/p><p>            this.locationSubscription = ((null));<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * Applies an array of commands to the current url tree and creates a new url tree.<\/p><p>     *<\/p><p>     * When given an activate route, applies the given commands starting from the route.<\/p><p>     * When not given a route, applies the given command starting from the root.<\/p><p>     *<\/p><p>     * ### Usage<\/p><p>     *<\/p><p>     * ```<\/p><p>     * // create /team/33/user/11<\/p><p>     * router.createUrlTree(['/team', 33, 'user', 11]);<\/p><p>     *<\/p><p>     * // create /team/33;expand=true/user/11<\/p><p>     * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);<\/p><p>     *<\/p><p>     * // you can collapse static segments like this (this works only with the first passed-in value):<\/p><p>     * router.createUrlTree(['/team/33/user', userId]);<\/p><p>     *<\/p><p>     * // If the first segment can contain slashes, and you do not want the router to split it, you<\/p><p>     * // can do the following:<\/p><p>     *<\/p><p>     * router.createUrlTree([{segmentPath: '/one/two'}]);<\/p><p>     *<\/p><p>     * // create /team/33/(user/11//right:chat)<\/p><p>     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);<\/p><p>     *<\/p><p>     * // remove the right secondary node<\/p><p>     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);<\/p><p>     *<\/p><p>     * // assuming the current url is `/team/33/user/11` and the route points to `user/11`<\/p><p>     *<\/p><p>     * // navigate to /team/33/user/11/details<\/p><p>     * router.createUrlTree(['details'], {relativeTo: route});<\/p><p>     *<\/p><p>     * // navigate to /team/33/user/22<\/p><p>     * router.createUrlTree(['../22'], {relativeTo: route});<\/p><p>     *<\/p><p>     * // navigate to /team/44/user/22<\/p><p>     * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});<\/p><p>     * ```<\/p><p>     * @param {?} commands<\/p><p>     * @param {?=} navigationExtras<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Router.prototype.createUrlTree = function (commands, navigationExtras) {<\/p><p>        if (navigationExtras === void 0) { navigationExtras = {}; }<\/p><p>        var relativeTo = navigationExtras.relativeTo, queryParams = navigationExtras.queryParams, fragment = navigationExtras.fragment, preserveQueryParams = navigationExtras.preserveQueryParams, queryParamsHandling = navigationExtras.queryParamsHandling, preserveFragment = navigationExtras.preserveFragment;<\/p><p>        if (Object(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"isDevMode\"])() && preserveQueryParams && (console) && (console.warn)) {<\/p><p>            console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');<\/p><p>        }<\/p><p>        var /** @type {?} */ a = relativeTo || this.routerState.root;<\/p><p>        var /** @type {?} */ f = preserveFragment ? this.currentUrlTree.fragment : fragment;<\/p><p>        var /** @type {?} */ q = null;<\/p><p>        if (queryParamsHandling) {<\/p><p>            switch (queryParamsHandling) {<\/p><p>                case 'merge':<\/p><p>                    q = Object.assign({}, this.currentUrlTree.queryParams, queryParams);<\/p><p>                    break;<\/p><p>                case 'preserve':<\/p><p>                    q = this.currentUrlTree.queryParams;<\/p><p>                    break;<\/p><p>                default:<\/p><p>                    q = queryParams || null;<\/p><p>            }<\/p><p>        }<\/p><p>        else {<\/p><p>            q = preserveQueryParams ? this.currentUrlTree.queryParams : queryParams || null;<\/p><p>        }<\/p><p>        return createUrlTree(a, this.currentUrlTree, commands, /** @type {?} */ ((q)), /** @type {?} */ ((f)));<\/p><p>    };<\/p><p>    /**<\/p><p>     * Navigate based on the provided url. This navigation is always absolute.<\/p><p>     *<\/p><p>     * Returns a promise that:<\/p><p>     * - resolves to 'true' when navigation succeeds,<\/p><p>     * - resolves to 'false' when navigation fails,<\/p><p>     * - is rejected when an error happens.<\/p><p>     *<\/p><p>     * ### Usage<\/p><p>     *<\/p><p>     * ```<\/p><p>     * router.navigateByUrl(\"/team/33/user/11\");<\/p><p>     *<\/p><p>     * // Navigate without updating the URL<\/p><p>     * router.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });<\/p><p>     * ```<\/p><p>     *<\/p><p>     * In opposite to `navigate`, `navigateByUrl` takes a whole URL<\/p><p>     * and does not apply any delta to the current one.<\/p><p>     * @param {?} url<\/p><p>     * @param {?=} extras<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Router.prototype.navigateByUrl = function (url, extras) {<\/p><p>        if (extras === void 0) { extras = { skipLocationChange: false }; }<\/p><p>        var /** @type {?} */ urlTree = url instanceof UrlTree ? url : this.parseUrl(url);<\/p><p>        var /** @type {?} */ mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);<\/p><p>        return this.scheduleNavigation(mergedTree, 'imperative', extras);<\/p><p>    };<\/p><p>    /**<\/p><p>     * Navigate based on the provided array of commands and a starting point.<\/p><p>     * If no starting route is provided, the navigation is absolute.<\/p><p>     *<\/p><p>     * Returns a promise that:<\/p><p>     * - resolves to 'true' when navigation succeeds,<\/p><p>     * - resolves to 'false' when navigation fails,<\/p><p>     * - is rejected when an error happens.<\/p><p>     *<\/p><p>     * ### Usage<\/p><p>     *<\/p><p>     * ```<\/p><p>     * router.navigate(['team', 33, 'user', 11], {relativeTo: route});<\/p><p>     *<\/p><p>     * // Navigate without updating the URL<\/p><p>     * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});<\/p><p>     * ```<\/p><p>     *<\/p><p>     * In opposite to `navigateByUrl`, `navigate` always takes a delta that is applied to the current<\/p><p>     * URL.<\/p><p>     * @param {?} commands<\/p><p>     * @param {?=} extras<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Router.prototype.navigate = function (commands, extras) {<\/p><p>        if (extras === void 0) { extras = { skipLocationChange: false }; }<\/p><p>        validateCommands(commands);<\/p><p>        if (typeof extras.queryParams === 'object' && extras.queryParams !== null) {<\/p><p>            extras.queryParams = this.removeEmptyProps(extras.queryParams);<\/p><p>        }<\/p><p>        return this.navigateByUrl(this.createUrlTree(commands, extras), extras);<\/p><p>    };<\/p><p>    /**<\/p><p>     * Serializes a {\\@link UrlTree} into a string<\/p><p>     * @param {?} url<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Router.prototype.serializeUrl = function (url) { return this.urlSerializer.serialize(url); };<\/p><p>    /**<\/p><p>     * Parses a string into a {\\@link UrlTree}<\/p><p>     * @param {?} url<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Router.prototype.parseUrl = function (url) { return this.urlSerializer.parse(url); };<\/p><p>    /**<\/p><p>     * Returns whether the url is activated<\/p><p>     * @param {?} url<\/p><p>     * @param {?} exact<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Router.prototype.isActive = function (url, exact) {<\/p><p>        if (url instanceof UrlTree) {<\/p><p>            return containsTree(this.currentUrlTree, url, exact);<\/p><p>        }<\/p><p>        var /** @type {?} */ urlTree = this.urlSerializer.parse(url);<\/p><p>        return containsTree(this.currentUrlTree, urlTree, exact);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} params<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Router.prototype.removeEmptyProps = function (params) {<\/p><p>        return Object.keys(params).reduce(function (result, key) {<\/p><p>            var /** @type {?} */ value = params[key];<\/p><p>            if (value !== null && value !== undefined) {<\/p><p>                result[key] = value;<\/p><p>            }<\/p><p>            return result;<\/p><p>        }, {});<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Router.prototype.processNavigations = function () {<\/p><p>        var _this = this;<\/p><p>        __WEBPACK_IMPORTED_MODULE_7_rxjs_operator_concatMap__[\"concatMap\"]<\/p><p>            .call(this.navigations, function (nav) {<\/p><p>            if (nav) {<\/p><p>                _this.executeScheduledNavigation(nav);<\/p><p>                // a failed navigation should not stop the router from processing<\/p><p>                // further navigations => the catch<\/p><p>                return nav.promise.catch(function () { });<\/p><p>            }<\/p><p>            else {<\/p><p>                return (Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(null));<\/p><p>            }<\/p><p>        })<\/p><p>            .subscribe(function () { });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} rawUrl<\/p><p>     * @param {?} source<\/p><p>     * @param {?} extras<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Router.prototype.scheduleNavigation = function (rawUrl, source, extras) {<\/p><p>        var /** @type {?} */ lastNavigation = this.navigations.value;<\/p><p>        // If the user triggers a navigation imperatively (e.g., by using navigateByUrl),<\/p><p>        // and that navigation results in 'replaceState' that leads to the same URL,<\/p><p>        // we should skip those.<\/p><p>        if (lastNavigation && source !== 'imperative' && lastNavigation.source === 'imperative' &&<\/p><p>            lastNavigation.rawUrl.toString() === rawUrl.toString()) {<\/p><p>            return Promise.resolve(true); // return value is not used<\/p><p>        }<\/p><p>        // Because of a bug in IE and Edge, the location class fires two events (popstate and<\/p><p>        // hashchange) every single time. The second one should be ignored. Otherwise, the URL will<\/p><p>        // flicker.<\/p><p>        if (lastNavigation && source == 'hashchange' && lastNavigation.source === 'popstate' &&<\/p><p>            lastNavigation.rawUrl.toString() === rawUrl.toString()) {<\/p><p>            return Promise.resolve(true); // return value is not used<\/p><p>        }<\/p><p>        var /** @type {?} */ resolve = null;<\/p><p>        var /** @type {?} */ reject = null;<\/p><p>        var /** @type {?} */ promise = new Promise(function (res, rej) {<\/p><p>            resolve = res;<\/p><p>            reject = rej;<\/p><p>        });<\/p><p>        var /** @type {?} */ id = ++this.navigationId;<\/p><p>        this.navigations.next({ id: id, source: source, rawUrl: rawUrl, extras: extras, resolve: resolve, reject: reject, promise: promise });<\/p><p>        // Make sure that the error is propagated even though `processNavigations` catch<\/p><p>        // handler does not rethrow<\/p><p>        return promise.catch(function (e) { return Promise.reject(e); });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} __0<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Router.prototype.executeScheduledNavigation = function (_a) {<\/p><p>        var _this = this;<\/p><p>        var id = _a.id, rawUrl = _a.rawUrl, extras = _a.extras, resolve = _a.resolve, reject = _a.reject;<\/p><p>        var /** @type {?} */ url = this.urlHandlingStrategy.extract(rawUrl);<\/p><p>        var /** @type {?} */ urlTransition = !this.navigated || url.toString() !== this.currentUrlTree.toString();<\/p><p>        if (urlTransition && this.urlHandlingStrategy.shouldProcessUrl(rawUrl)) {<\/p><p>            this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));<\/p><p>            Promise.resolve()<\/p><p>                .then(function (_) { return _this.runNavigate(url, rawUrl, !!extras.skipLocationChange, !!extras.replaceUrl, id, null); })<\/p><p>                .then(resolve, reject);<\/p><p>            // we cannot process the current URL, but we could process the previous one =><\/p><p>            // we need to do some cleanup<\/p><p>        }<\/p><p>        else if (urlTransition && this.rawUrlTree &&<\/p><p>            this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree)) {<\/p><p>            this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));<\/p><p>            Promise.resolve()<\/p><p>                .then(function (_) { return _this.runNavigate(url, rawUrl, false, false, id, createEmptyState(url, _this.rootComponentType).snapshot); })<\/p><p>                .then(resolve, reject);<\/p><p>        }<\/p><p>        else {<\/p><p>            this.rawUrlTree = rawUrl;<\/p><p>            resolve(null);<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} url<\/p><p>     * @param {?} rawUrl<\/p><p>     * @param {?} shouldPreventPushState<\/p><p>     * @param {?} shouldReplaceUrl<\/p><p>     * @param {?} id<\/p><p>     * @param {?} precreatedState<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Router.prototype.runNavigate = function (url, rawUrl, shouldPreventPushState, shouldReplaceUrl, id, precreatedState) {<\/p><p>        var _this = this;<\/p><p>        if (id !== this.navigationId) {<\/p><p>            this.location.go(this.urlSerializer.serialize(this.currentUrlTree));<\/p><p>            this.routerEvents.next(new NavigationCancel(id, this.serializeUrl(url), \"Navigation ID \" + id + \" is not equal to the current navigation id \" + this.navigationId));<\/p><p>            return Promise.resolve(false);<\/p><p>        }<\/p><p>        return new Promise(function (resolvePromise, rejectPromise) {<\/p><p>            // create an observable of the url and route state snapshot<\/p><p>            // this operation do not result in any side effects<\/p><p>            var /** @type {?} */ urlAndSnapshot$;<\/p><p>            if (!precreatedState) {<\/p><p>                var /** @type {?} */ moduleInjector = _this.ngModule.injector;<\/p><p>                var /** @type {?} */ redirectsApplied$ = applyRedirects(moduleInjector, _this.configLoader, _this.urlSerializer, url, _this.config);<\/p><p>                urlAndSnapshot$ = __WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap__[\"mergeMap\"].call(redirectsApplied$, function (appliedUrl) {<\/p><p>                    return __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(recognize(_this.rootComponentType, _this.config, appliedUrl, _this.serializeUrl(appliedUrl)), function (snapshot) {<\/p><p>                        _this.routerEvents.next(new RoutesRecognized(id, _this.serializeUrl(url), _this.serializeUrl(appliedUrl), snapshot));<\/p><p>                        return { appliedUrl: appliedUrl, snapshot: snapshot };<\/p><p>                    });<\/p><p>                });<\/p><p>            }<\/p><p>            else {<\/p><p>                urlAndSnapshot$ = Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])({ appliedUrl: url, snapshot: precreatedState });<\/p><p>            }<\/p><p>            var /** @type {?} */ beforePreactivationDone$ = __WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap__[\"mergeMap\"].call(urlAndSnapshot$, function (p) {<\/p><p>                return __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(_this.hooks.beforePreactivation(p.snapshot), function () { return p; });<\/p><p>            });<\/p><p>            // run preactivation: guards and data resolvers<\/p><p>            var /** @type {?} */ preActivation;<\/p><p>            var /** @type {?} */ preactivationTraverse$ = __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(beforePreactivationDone$, function (_a) {<\/p><p>                var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot;<\/p><p>                var /** @type {?} */ moduleInjector = _this.ngModule.injector;<\/p><p>                preActivation =<\/p><p>                    new PreActivation(snapshot, _this.currentRouterState.snapshot, moduleInjector);<\/p><p>                preActivation.traverse(_this.rootContexts);<\/p><p>                return { appliedUrl: appliedUrl, snapshot: snapshot };<\/p><p>            });<\/p><p>            var /** @type {?} */ preactivationCheckGuards$ = __WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap__[\"mergeMap\"].call(preactivationTraverse$, function (_a) {<\/p><p>                var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot;<\/p><p>                if (_this.navigationId !== id)<\/p><p>                    return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(false);<\/p><p>                _this.triggerEvent(new GuardsCheckStart(id, _this.serializeUrl(url), appliedUrl, snapshot));<\/p><p>                return __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(preActivation.checkGuards(), function (shouldActivate) {<\/p><p>                    _this.triggerEvent(new GuardsCheckEnd(id, _this.serializeUrl(url), appliedUrl, snapshot, shouldActivate));<\/p><p>                    return { appliedUrl: appliedUrl, snapshot: snapshot, shouldActivate: shouldActivate };<\/p><p>                });<\/p><p>            });<\/p><p>            var /** @type {?} */ preactivationResolveData$ = __WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap__[\"mergeMap\"].call(preactivationCheckGuards$, function (p) {<\/p><p>                if (_this.navigationId !== id)<\/p><p>                    return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(false);<\/p><p>                if (p.shouldActivate && preActivation.isActivating()) {<\/p><p>                    _this.triggerEvent(new ResolveStart(id, _this.serializeUrl(url), p.appliedUrl, p.snapshot));<\/p><p>                    return __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(preActivation.resolveData(), function () {<\/p><p>                        _this.triggerEvent(new ResolveEnd(id, _this.serializeUrl(url), p.appliedUrl, p.snapshot));<\/p><p>                        return p;<\/p><p>                    });<\/p><p>                }<\/p><p>                else {<\/p><p>                    return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(p);<\/p><p>                }<\/p><p>            });<\/p><p>            var /** @type {?} */ preactivationDone$ = __WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap__[\"mergeMap\"].call(preactivationResolveData$, function (p) {<\/p><p>                return __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(_this.hooks.afterPreactivation(p.snapshot), function () { return p; });<\/p><p>            });<\/p><p>            // create router state<\/p><p>            // this operation has side effects => route state is being affected<\/p><p>            var /** @type {?} */ routerState$ = __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(preactivationDone$, function (_a) {<\/p><p>                var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot, shouldActivate = _a.shouldActivate;<\/p><p>                if (shouldActivate) {<\/p><p>                    var /** @type {?} */ state = createRouterState(_this.routeReuseStrategy, snapshot, _this.currentRouterState);<\/p><p>                    return { appliedUrl: appliedUrl, state: state, shouldActivate: shouldActivate };<\/p><p>                }<\/p><p>                else {<\/p><p>                    return { appliedUrl: appliedUrl, state: null, shouldActivate: shouldActivate };<\/p><p>                }<\/p><p>            });<\/p><p>            // applied the new router state<\/p><p>            // this operation has side effects<\/p><p>            var /** @type {?} */ navigationIsSuccessful;<\/p><p>            var /** @type {?} */ storedState = _this.currentRouterState;<\/p><p>            var /** @type {?} */ storedUrl = _this.currentUrlTree;<\/p><p>            routerState$<\/p><p>                .forEach(function (_a) {<\/p><p>                var appliedUrl = _a.appliedUrl, state = _a.state, shouldActivate = _a.shouldActivate;<\/p><p>                if (!shouldActivate || id !== _this.navigationId) {<\/p><p>                    navigationIsSuccessful = false;<\/p><p>                    return;<\/p><p>                }<\/p><p>                _this.currentUrlTree = appliedUrl;<\/p><p>                _this.rawUrlTree = _this.urlHandlingStrategy.merge(_this.currentUrlTree, rawUrl);<\/p><p>                _this.currentRouterState = state;<\/p><p>                if (!shouldPreventPushState) {<\/p><p>                    var /** @type {?} */ path = _this.urlSerializer.serialize(_this.rawUrlTree);<\/p><p>                    if (_this.location.isCurrentPathEqualTo(path) || shouldReplaceUrl) {<\/p><p>                        _this.location.replaceState(path);<\/p><p>                    }<\/p><p>                    else {<\/p><p>                        _this.location.go(path);<\/p><p>                    }<\/p><p>                }<\/p><p>                new ActivateRoutes(_this.routeReuseStrategy, state, storedState)<\/p><p>                    .activate(_this.rootContexts);<\/p><p>                navigationIsSuccessful = true;<\/p><p>            })<\/p><p>                .then(function () {<\/p><p>                if (navigationIsSuccessful) {<\/p><p>                    _this.navigated = true;<\/p><p>                    _this.routerEvents.next(new NavigationEnd(id, _this.serializeUrl(url), _this.serializeUrl(_this.currentUrlTree)));<\/p><p>                    resolvePromise(true);<\/p><p>                }<\/p><p>                else {<\/p><p>                    _this.resetUrlToCurrentUrlTree();<\/p><p>                    _this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url), ''));<\/p><p>                    resolvePromise(false);<\/p><p>                }<\/p><p>            }, function (e) {<\/p><p>                if (isNavigationCancelingError(e)) {<\/p><p>                    _this.resetUrlToCurrentUrlTree();<\/p><p>                    _this.navigated = true;<\/p><p>                    _this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url), e.message));<\/p><p>                    resolvePromise(false);<\/p><p>                }<\/p><p>                else {<\/p><p>                    _this.routerEvents.next(new NavigationError(id, _this.serializeUrl(url), e));<\/p><p>                    try {<\/p><p>                        resolvePromise(_this.errorHandler(e));<\/p><p>                    }<\/p><p>                    catch (ee) {<\/p><p>                        rejectPromise(ee);<\/p><p>                    }<\/p><p>                }<\/p><p>                _this.currentRouterState = storedState;<\/p><p>                _this.currentUrlTree = storedUrl;<\/p><p>                _this.rawUrlTree = _this.urlHandlingStrategy.merge(_this.currentUrlTree, rawUrl);<\/p><p>                _this.location.replaceState(_this.serializeUrl(_this.rawUrlTree));<\/p><p>            });<\/p><p>        });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    Router.prototype.resetUrlToCurrentUrlTree = function () {<\/p><p>        var /** @type {?} */ path = this.urlSerializer.serialize(this.rawUrlTree);<\/p><p>        this.location.replaceState(path);<\/p><p>    };<\/p><p>    return Router;<\/p><p>}());<\/p><p>var CanActivate = (function () {<\/p><p>    /**<\/p><p>     * @param {?} path<\/p><p>     */<\/p><p>    function CanActivate(path) {<\/p><p>        this.path = path;<\/p><p>    }<\/p><p>    Object.defineProperty(CanActivate.prototype, \"route\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this.path[this.path.length - 1]; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    return CanActivate;<\/p><p>}());<\/p><p>var CanDeactivate = (function () {<\/p><p>    /**<\/p><p>     * @param {?} component<\/p><p>     * @param {?} route<\/p><p>     */<\/p><p>    function CanDeactivate(component, route) {<\/p><p>        this.component = component;<\/p><p>        this.route = route;<\/p><p>    }<\/p><p>    return CanDeactivate;<\/p><p>}());<\/p><p>var PreActivation = (function () {<\/p><p>    /**<\/p><p>     * @param {?} future<\/p><p>     * @param {?} curr<\/p><p>     * @param {?} moduleInjector<\/p><p>     */<\/p><p>    function PreActivation(future, curr, moduleInjector) {<\/p><p>        this.future = future;<\/p><p>        this.curr = curr;<\/p><p>        this.moduleInjector = moduleInjector;<\/p><p>        this.canActivateChecks = [];<\/p><p>        this.canDeactivateChecks = [];<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} parentContexts<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    PreActivation.prototype.traverse = function (parentContexts) {<\/p><p>        var /** @type {?} */ futureRoot = this.future._root;<\/p><p>        var /** @type {?} */ currRoot = this.curr ? this.curr._root : null;<\/p><p>        this.traverseChildRoutes(futureRoot, currRoot, parentContexts, [futureRoot.value]);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    PreActivation.prototype.checkGuards = function () {<\/p><p>        var _this = this;<\/p><p>        if (!this.isDeactivating() && !this.isActivating()) {<\/p><p>            return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(true);<\/p><p>        }<\/p><p>        var /** @type {?} */ canDeactivate$ = this.runCanDeactivateChecks();<\/p><p>        return __WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap__[\"mergeMap\"].call(canDeactivate$, function (canDeactivate) { return canDeactivate ? _this.runCanActivateChecks() : Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(false); });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    PreActivation.prototype.resolveData = function () {<\/p><p>        var _this = this;<\/p><p>        if (!this.isActivating())<\/p><p>            return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(null);<\/p><p>        var /** @type {?} */ checks$ = Object(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_from__[\"from\"])(this.canActivateChecks);<\/p><p>        var /** @type {?} */ runningChecks$ = __WEBPACK_IMPORTED_MODULE_7_rxjs_operator_concatMap__[\"concatMap\"].call(checks$, function (check) { return _this.runResolve(check.route); });<\/p><p>        return __WEBPACK_IMPORTED_MODULE_13_rxjs_operator_reduce__[\"reduce\"].call(runningChecks$, function (_, __) { return _; });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    PreActivation.prototype.isDeactivating = function () { return this.canDeactivateChecks.length !== 0; };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    PreActivation.prototype.isActivating = function () { return this.canActivateChecks.length !== 0; };<\/p><p>    /**<\/p><p>     * @param {?} futureNode<\/p><p>     * @param {?} currNode<\/p><p>     * @param {?} contexts<\/p><p>     * @param {?} futurePath<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    PreActivation.prototype.traverseChildRoutes = function (futureNode, currNode, contexts, futurePath) {<\/p><p>        var _this = this;<\/p><p>        var /** @type {?} */ prevChildren = nodeChildrenAsMap(currNode);<\/p><p>        // Process the children of the future route<\/p><p>        futureNode.children.forEach(function (c) {<\/p><p>            _this.traverseRoutes(c, prevChildren[c.value.outlet], contexts, futurePath.concat([c.value]));<\/p><p>            delete prevChildren[c.value.outlet];<\/p><p>        });<\/p><p>        // Process any children left from the current route (not active for the future route)<\/p><p>        forEach(prevChildren, function (v, k) { return _this.deactivateRouteAndItsChildren(v, /** @type {?} */ ((contexts)).getContext(k)); });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} futureNode<\/p><p>     * @param {?} currNode<\/p><p>     * @param {?} parentContexts<\/p><p>     * @param {?} futurePath<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    PreActivation.prototype.traverseRoutes = function (futureNode, currNode, parentContexts, futurePath) {<\/p><p>        var /** @type {?} */ future = futureNode.value;<\/p><p>        var /** @type {?} */ curr = currNode ? currNode.value : null;<\/p><p>        var /** @type {?} */ context = parentContexts ? parentContexts.getContext(futureNode.value.outlet) : null;<\/p><p>        // reusing the node<\/p><p>        if (curr && future._routeConfig === curr._routeConfig) {<\/p><p>            var /** @type {?} */ shouldRunGuardsAndResolvers = this.shouldRunGuardsAndResolvers(curr, future, /** @type {?} */ ((future._routeConfig)).runGuardsAndResolvers);<\/p><p>            if (shouldRunGuardsAndResolvers) {<\/p><p>                this.canActivateChecks.push(new CanActivate(futurePath));<\/p><p>            }<\/p><p>            else {<\/p><p>                // we need to set the data<\/p><p>                future.data = curr.data;<\/p><p>                future._resolvedData = curr._resolvedData;<\/p><p>            }<\/p><p>            // If we have a component, we need to go through an outlet.<\/p><p>            if (future.component) {<\/p><p>                this.traverseChildRoutes(futureNode, currNode, context ? context.children : null, futurePath);<\/p><p>                // if we have a componentless route, we recurse but keep the same outlet map.<\/p><p>            }<\/p><p>            else {<\/p><p>                this.traverseChildRoutes(futureNode, currNode, parentContexts, futurePath);<\/p><p>            }<\/p><p>            if (shouldRunGuardsAndResolvers) {<\/p><p>                var /** @type {?} */ outlet = ((((context)).outlet));<\/p><p>                this.canDeactivateChecks.push(new CanDeactivate(outlet.component, curr));<\/p><p>            }<\/p><p>        }<\/p><p>        else {<\/p><p>            if (curr) {<\/p><p>                this.deactivateRouteAndItsChildren(currNode, context);<\/p><p>            }<\/p><p>            this.canActivateChecks.push(new CanActivate(futurePath));<\/p><p>            // If we have a component, we need to go through an outlet.<\/p><p>            if (future.component) {<\/p><p>                this.traverseChildRoutes(futureNode, null, context ? context.children : null, futurePath);<\/p><p>                // if we have a componentless route, we recurse but keep the same outlet map.<\/p><p>            }<\/p><p>            else {<\/p><p>                this.traverseChildRoutes(futureNode, null, parentContexts, futurePath);<\/p><p>            }<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} curr<\/p><p>     * @param {?} future<\/p><p>     * @param {?} mode<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    PreActivation.prototype.shouldRunGuardsAndResolvers = function (curr, future, mode) {<\/p><p>        switch (mode) {<\/p><p>            case 'always':<\/p><p>                return true;<\/p><p>            case 'paramsOrQueryParamsChange':<\/p><p>                return !equalParamsAndUrlSegments(curr, future) ||<\/p><p>                    !shallowEqual(curr.queryParams, future.queryParams);<\/p><p>            case 'paramsChange':<\/p><p>            default:<\/p><p>                return !equalParamsAndUrlSegments(curr, future);<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} route<\/p><p>     * @param {?} context<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    PreActivation.prototype.deactivateRouteAndItsChildren = function (route, context) {<\/p><p>        var _this = this;<\/p><p>        var /** @type {?} */ children = nodeChildrenAsMap(route);<\/p><p>        var /** @type {?} */ r = route.value;<\/p><p>        forEach(children, function (node, childName) {<\/p><p>            if (!r.component) {<\/p><p>                _this.deactivateRouteAndItsChildren(node, context);<\/p><p>            }<\/p><p>            else if (context) {<\/p><p>                _this.deactivateRouteAndItsChildren(node, context.children.getContext(childName));<\/p><p>            }<\/p><p>            else {<\/p><p>                _this.deactivateRouteAndItsChildren(node, null);<\/p><p>            }<\/p><p>        });<\/p><p>        if (!r.component) {<\/p><p>            this.canDeactivateChecks.push(new CanDeactivate(null, r));<\/p><p>        }<\/p><p>        else if (context && context.outlet && context.outlet.isActivated) {<\/p><p>            this.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, r));<\/p><p>        }<\/p><p>        else {<\/p><p>            this.canDeactivateChecks.push(new CanDeactivate(null, r));<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    PreActivation.prototype.runCanDeactivateChecks = function () {<\/p><p>        var _this = this;<\/p><p>        var /** @type {?} */ checks$ = Object(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_from__[\"from\"])(this.canDeactivateChecks);<\/p><p>        var /** @type {?} */ runningChecks$ = __WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap__[\"mergeMap\"].call(checks$, function (check) { return _this.runCanDeactivate(check.component, check.route); });<\/p><p>        return __WEBPACK_IMPORTED_MODULE_8_rxjs_operator_every__[\"every\"].call(runningChecks$, function (result) { return result === true; });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    PreActivation.prototype.runCanActivateChecks = function () {<\/p><p>        var _this = this;<\/p><p>        var /** @type {?} */ checks$ = Object(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_from__[\"from\"])(this.canActivateChecks);<\/p><p>        var /** @type {?} */ runningChecks$ = __WEBPACK_IMPORTED_MODULE_7_rxjs_operator_concatMap__[\"concatMap\"].call(checks$, function (check) { return andObservables(Object(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_from__[\"from\"])([_this.runCanActivateChild(check.path), _this.runCanActivate(check.route)])); });<\/p><p>        return __WEBPACK_IMPORTED_MODULE_8_rxjs_operator_every__[\"every\"].call(runningChecks$, function (result) { return result === true; });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} future<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    PreActivation.prototype.runCanActivate = function (future) {<\/p><p>        var _this = this;<\/p><p>        var /** @type {?} */ canActivate = future._routeConfig ? future._routeConfig.canActivate : null;<\/p><p>        if (!canActivate || canActivate.length === 0)<\/p><p>            return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(true);<\/p><p>        var /** @type {?} */ obs = __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(Object(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_from__[\"from\"])(canActivate), function (c) {<\/p><p>            var /** @type {?} */ guard = _this.getToken(c, future);<\/p><p>            var /** @type {?} */ observable;<\/p><p>            if (guard.canActivate) {<\/p><p>                observable = wrapIntoObservable(guard.canActivate(future, _this.future));<\/p><p>            }<\/p><p>            else {<\/p><p>                observable = wrapIntoObservable(guard(future, _this.future));<\/p><p>            }<\/p><p>            return __WEBPACK_IMPORTED_MODULE_9_rxjs_operator_first__[\"first\"].call(observable);<\/p><p>        });<\/p><p>        return andObservables(obs);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} path<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    PreActivation.prototype.runCanActivateChild = function (path) {<\/p><p>        var _this = this;<\/p><p>        var /** @type {?} */ future = path[path.length - 1];<\/p><p>        var /** @type {?} */ canActivateChildGuards = path.slice(0, path.length - 1)<\/p><p>            .reverse()<\/p><p>            .map(function (p) { return _this.extractCanActivateChild(p); })<\/p><p>            .filter(function (_) { return _ !== null; });<\/p><p>        return andObservables(__WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(Object(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_from__[\"from\"])(canActivateChildGuards), function (d) {<\/p><p>            var /** @type {?} */ obs = __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(Object(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_from__[\"from\"])(d.guards), function (c) {<\/p><p>                var /** @type {?} */ guard = _this.getToken(c, d.node);<\/p><p>                var /** @type {?} */ observable;<\/p><p>                if (guard.canActivateChild) {<\/p><p>                    observable = wrapIntoObservable(guard.canActivateChild(future, _this.future));<\/p><p>                }<\/p><p>                else {<\/p><p>                    observable = wrapIntoObservable(guard(future, _this.future));<\/p><p>                }<\/p><p>                return __WEBPACK_IMPORTED_MODULE_9_rxjs_operator_first__[\"first\"].call(observable);<\/p><p>            });<\/p><p>            return andObservables(obs);<\/p><p>        }));<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} p<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    PreActivation.prototype.extractCanActivateChild = function (p) {<\/p><p>        var /** @type {?} */ canActivateChild = p._routeConfig ? p._routeConfig.canActivateChild : null;<\/p><p>        if (!canActivateChild || canActivateChild.length === 0)<\/p><p>            return null;<\/p><p>        return { node: p, guards: canActivateChild };<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} component<\/p><p>     * @param {?} curr<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    PreActivation.prototype.runCanDeactivate = function (component, curr) {<\/p><p>        var _this = this;<\/p><p>        var /** @type {?} */ canDeactivate = curr && curr._routeConfig ? curr._routeConfig.canDeactivate : null;<\/p><p>        if (!canDeactivate || canDeactivate.length === 0)<\/p><p>            return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(true);<\/p><p>        var /** @type {?} */ canDeactivate$ = __WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap__[\"mergeMap\"].call(Object(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_from__[\"from\"])(canDeactivate), function (c) {<\/p><p>            var /** @type {?} */ guard = _this.getToken(c, curr);<\/p><p>            var /** @type {?} */ observable;<\/p><p>            if (guard.canDeactivate) {<\/p><p>                observable =<\/p><p>                    wrapIntoObservable(guard.canDeactivate(component, curr, _this.curr, _this.future));<\/p><p>            }<\/p><p>            else {<\/p><p>                observable = wrapIntoObservable(guard(component, curr, _this.curr, _this.future));<\/p><p>            }<\/p><p>            return __WEBPACK_IMPORTED_MODULE_9_rxjs_operator_first__[\"first\"].call(observable);<\/p><p>        });<\/p><p>        return __WEBPACK_IMPORTED_MODULE_8_rxjs_operator_every__[\"every\"].call(canDeactivate$, function (result) { return result === true; });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} future<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    PreActivation.prototype.runResolve = function (future) {<\/p><p>        var /** @type {?} */ resolve = future._resolve;<\/p><p>        return __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(this.resolveNode(resolve, future), function (resolvedData) {<\/p><p>            future._resolvedData = resolvedData;<\/p><p>            future.data = Object.assign({}, future.data, inheritedParamsDataResolve(future).resolve);<\/p><p>            return null;<\/p><p>        });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} resolve<\/p><p>     * @param {?} future<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    PreActivation.prototype.resolveNode = function (resolve, future) {<\/p><p>        var _this = this;<\/p><p>        var /** @type {?} */ keys = Object.keys(resolve);<\/p><p>        if (keys.length === 0) {<\/p><p>            return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])({});<\/p><p>        }<\/p><p>        if (keys.length === 1) {<\/p><p>            var /** @type {?} */ key_1 = keys[0];<\/p><p>            return __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(this.getResolver(resolve[key_1], future), function (value) {<\/p><p>                return _a = {}, _a[key_1] = value, _a;<\/p><p>                var _a;<\/p><p>            });<\/p><p>        }<\/p><p>        var /** @type {?} */ data = {};<\/p><p>        var /** @type {?} */ runningResolvers$ = __WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap__[\"mergeMap\"].call(Object(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_from__[\"from\"])(keys), function (key) {<\/p><p>            return __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(_this.getResolver(resolve[key], future), function (value) {<\/p><p>                data[key] = value;<\/p><p>                return value;<\/p><p>            });<\/p><p>        });<\/p><p>        return __WEBPACK_IMPORTED_MODULE_11_rxjs_operator_map__[\"map\"].call(__WEBPACK_IMPORTED_MODULE_10_rxjs_operator_last__[\"last\"].call(runningResolvers$), function () { return data; });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} injectionToken<\/p><p>     * @param {?} future<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    PreActivation.prototype.getResolver = function (injectionToken, future) {<\/p><p>        var /** @type {?} */ resolver = this.getToken(injectionToken, future);<\/p><p>        return resolver.resolve ? wrapIntoObservable(resolver.resolve(future, this.future)) :<\/p><p>            wrapIntoObservable(resolver(future, this.future));<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} token<\/p><p>     * @param {?} snapshot<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    PreActivation.prototype.getToken = function (token, snapshot) {<\/p><p>        var /** @type {?} */ config = closestLoadedConfig(snapshot);<\/p><p>        var /** @type {?} */ injector = config ? config.module.injector : this.moduleInjector;<\/p><p>        return injector.get(token);<\/p><p>    };<\/p><p>    return PreActivation;<\/p><p>}());<\/p><p>var ActivateRoutes = (function () {<\/p><p>    /**<\/p><p>     * @param {?} routeReuseStrategy<\/p><p>     * @param {?} futureState<\/p><p>     * @param {?} currState<\/p><p>     */<\/p><p>    function ActivateRoutes(routeReuseStrategy, futureState, currState) {<\/p><p>        this.routeReuseStrategy = routeReuseStrategy;<\/p><p>        this.futureState = futureState;<\/p><p>        this.currState = currState;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} parentContexts<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ActivateRoutes.prototype.activate = function (parentContexts) {<\/p><p>        var /** @type {?} */ futureRoot = this.futureState._root;<\/p><p>        var /** @type {?} */ currRoot = this.currState ? this.currState._root : null;<\/p><p>        this.deactivateChildRoutes(futureRoot, currRoot, parentContexts);<\/p><p>        advanceActivatedRoute(this.futureState.root);<\/p><p>        this.activateChildRoutes(futureRoot, currRoot, parentContexts);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} futureNode<\/p><p>     * @param {?} currNode<\/p><p>     * @param {?} contexts<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ActivateRoutes.prototype.deactivateChildRoutes = function (futureNode, currNode, contexts) {<\/p><p>        var _this = this;<\/p><p>        var /** @type {?} */ children = nodeChildrenAsMap(currNode);<\/p><p>        // Recurse on the routes active in the future state to de-activate deeper children<\/p><p>        futureNode.children.forEach(function (futureChild) {<\/p><p>            var /** @type {?} */ childOutletName = futureChild.value.outlet;<\/p><p>            _this.deactivateRoutes(futureChild, children[childOutletName], contexts);<\/p><p>            delete children[childOutletName];<\/p><p>        });<\/p><p>        // De-activate the routes that will not be re-used<\/p><p>        forEach(children, function (v, childName) {<\/p><p>            _this.deactivateRouteAndItsChildren(v, contexts);<\/p><p>        });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} futureNode<\/p><p>     * @param {?} currNode<\/p><p>     * @param {?} parentContext<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ActivateRoutes.prototype.deactivateRoutes = function (futureNode, currNode, parentContext) {<\/p><p>        var /** @type {?} */ future = futureNode.value;<\/p><p>        var /** @type {?} */ curr = currNode ? currNode.value : null;<\/p><p>        if (future === curr) {<\/p><p>            // Reusing the node, check to see if the children need to be de-activated<\/p><p>            if (future.component) {<\/p><p>                // If we have a normal route, we need to go through an outlet.<\/p><p>                var /** @type {?} */ context = parentContext.getContext(future.outlet);<\/p><p>                if (context) {<\/p><p>                    this.deactivateChildRoutes(futureNode, currNode, context.children);<\/p><p>                }<\/p><p>            }<\/p><p>            else {<\/p><p>                // if we have a componentless route, we recurse but keep the same outlet map.<\/p><p>                this.deactivateChildRoutes(futureNode, currNode, parentContext);<\/p><p>            }<\/p><p>        }<\/p><p>        else {<\/p><p>            if (curr) {<\/p><p>                // Deactivate the current route which will not be re-used<\/p><p>                this.deactivateRouteAndItsChildren(currNode, parentContext);<\/p><p>            }<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} route<\/p><p>     * @param {?} parentContexts<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ActivateRoutes.prototype.deactivateRouteAndItsChildren = function (route, parentContexts) {<\/p><p>        if (this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {<\/p><p>            this.detachAndStoreRouteSubtree(route, parentContexts);<\/p><p>        }<\/p><p>        else {<\/p><p>            this.deactivateRouteAndOutlet(route, parentContexts);<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} route<\/p><p>     * @param {?} parentContexts<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ActivateRoutes.prototype.detachAndStoreRouteSubtree = function (route, parentContexts) {<\/p><p>        var /** @type {?} */ context = parentContexts.getContext(route.value.outlet);<\/p><p>        if (context && context.outlet) {<\/p><p>            var /** @type {?} */ componentRef = context.outlet.detach();<\/p><p>            var /** @type {?} */ contexts = context.children.onOutletDeactivated();<\/p><p>            this.routeReuseStrategy.store(route.value.snapshot, { componentRef: componentRef, route: route, contexts: contexts });<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} route<\/p><p>     * @param {?} parentContexts<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ActivateRoutes.prototype.deactivateRouteAndOutlet = function (route, parentContexts) {<\/p><p>        var _this = this;<\/p><p>        var /** @type {?} */ context = parentContexts.getContext(route.value.outlet);<\/p><p>        if (context) {<\/p><p>            var /** @type {?} */ children = nodeChildrenAsMap(route);<\/p><p>            var /** @type {?} */ contexts_1 = route.value.component ? context.children : parentContexts;<\/p><p>            forEach(children, function (v, k) { return _this.deactivateRouteAndItsChildren(v, contexts_1); });<\/p><p>            if (context.outlet) {<\/p><p>                // Destroy the component<\/p><p>                context.outlet.deactivate();<\/p><p>                // Destroy the contexts for all the outlets that were in the component<\/p><p>                context.children.onOutletDeactivated();<\/p><p>            }<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} futureNode<\/p><p>     * @param {?} currNode<\/p><p>     * @param {?} contexts<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ActivateRoutes.prototype.activateChildRoutes = function (futureNode, currNode, contexts) {<\/p><p>        var _this = this;<\/p><p>        var /** @type {?} */ children = nodeChildrenAsMap(currNode);<\/p><p>        futureNode.children.forEach(function (c) { _this.activateRoutes(c, children[c.value.outlet], contexts); });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} futureNode<\/p><p>     * @param {?} currNode<\/p><p>     * @param {?} parentContexts<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ActivateRoutes.prototype.activateRoutes = function (futureNode, currNode, parentContexts) {<\/p><p>        var /** @type {?} */ future = futureNode.value;<\/p><p>        var /** @type {?} */ curr = currNode ? currNode.value : null;<\/p><p>        advanceActivatedRoute(future);<\/p><p>        // reusing the node<\/p><p>        if (future === curr) {<\/p><p>            if (future.component) {<\/p><p>                // If we have a normal route, we need to go through an outlet.<\/p><p>                var /** @type {?} */ context = parentContexts.getOrCreateContext(future.outlet);<\/p><p>                this.activateChildRoutes(futureNode, currNode, context.children);<\/p><p>            }<\/p><p>            else {<\/p><p>                // if we have a componentless route, we recurse but keep the same outlet map.<\/p><p>                this.activateChildRoutes(futureNode, currNode, parentContexts);<\/p><p>            }<\/p><p>        }<\/p><p>        else {<\/p><p>            if (future.component) {<\/p><p>                // if we have a normal route, we need to place the component into the outlet and recurse.<\/p><p>                var /** @type {?} */ context = parentContexts.getOrCreateContext(future.outlet);<\/p><p>                if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {<\/p><p>                    var /** @type {?} */ stored = ((this.routeReuseStrategy.retrieve(future.snapshot)));<\/p><p>                    this.routeReuseStrategy.store(future.snapshot, null);<\/p><p>                    context.children.onOutletReAttached(stored.contexts);<\/p><p>                    context.attachRef = stored.componentRef;<\/p><p>                    context.route = stored.route.value;<\/p><p>                    if (context.outlet) {<\/p><p>                        // Attach right away when the outlet has already been instantiated<\/p><p>                        // Otherwise attach from `RouterOutlet.ngOnInit` when it is instantiated<\/p><p>                        context.outlet.attach(stored.componentRef, stored.route.value);<\/p><p>                    }<\/p><p>                    advanceActivatedRouteNodeAndItsChildren(stored.route);<\/p><p>                }<\/p><p>                else {<\/p><p>                    var /** @type {?} */ config = parentLoadedConfig(future.snapshot);<\/p><p>                    var /** @type {?} */ cmpFactoryResolver = config ? config.module.componentFactoryResolver : null;<\/p><p>                    context.route = future;<\/p><p>                    context.resolver = cmpFactoryResolver;<\/p><p>                    if (context.outlet) {<\/p><p>                        // Activate the outlet when it has already been instantiated<\/p><p>                        // Otherwise it will get activated from its `ngOnInit` when instantiated<\/p><p>                        context.outlet.activateWith(future, cmpFactoryResolver);<\/p><p>                    }<\/p><p>                    this.activateChildRoutes(futureNode, null, context.children);<\/p><p>                }<\/p><p>            }<\/p><p>            else {<\/p><p>                // if we have a componentless route, we recurse but keep the same outlet map.<\/p><p>                this.activateChildRoutes(futureNode, null, parentContexts);<\/p><p>            }<\/p><p>        }<\/p><p>    };<\/p><p>    return ActivateRoutes;<\/p><p>}());<\/p><p>/**<\/p><p> * @param {?} node<\/p><p> * @return {?}<\/p><p> */<\/p><p>function advanceActivatedRouteNodeAndItsChildren(node) {<\/p><p>    advanceActivatedRoute(node.value);<\/p><p>    node.children.forEach(advanceActivatedRouteNodeAndItsChildren);<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} snapshot<\/p><p> * @return {?}<\/p><p> */<\/p><p>function parentLoadedConfig(snapshot) {<\/p><p>    for (var /** @type {?} */ s = snapshot.parent; s; s = s.parent) {<\/p><p>        var /** @type {?} */ route = s._routeConfig;<\/p><p>        if (route && route._loadedConfig)<\/p><p>            return route._loadedConfig;<\/p><p>        if (route && route.component)<\/p><p>            return null;<\/p><p>    }<\/p><p>    return null;<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} snapshot<\/p><p> * @return {?}<\/p><p> */<\/p><p>function closestLoadedConfig(snapshot) {<\/p><p>    if (!snapshot)<\/p><p>        return null;<\/p><p>    for (var /** @type {?} */ s = snapshot.parent; s; s = s.parent) {<\/p><p>        var /** @type {?} */ route = s._routeConfig;<\/p><p>        if (route && route._loadedConfig)<\/p><p>            return route._loadedConfig;<\/p><p>    }<\/p><p>    return null;<\/p><p>}<\/p><p>/**<\/p><p> * @template T<\/p><p> * @param {?} node<\/p><p> * @return {?}<\/p><p> */<\/p><p>function nodeChildrenAsMap(node) {<\/p><p>    var /** @type {?} */ map$$1 = {};<\/p><p>    if (node) {<\/p><p>        node.children.forEach(function (child) { return map$$1[child.value.outlet] = child; });<\/p><p>    }<\/p><p>    return map$$1;<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} commands<\/p><p> * @return {?}<\/p><p> */<\/p><p>function validateCommands(commands) {<\/p><p>    for (var /** @type {?} */ i = 0; i < commands.length; i++) {<\/p><p>        var /** @type {?} */ cmd = commands[i];<\/p><p>        if (cmd == null) {<\/p><p>            throw new Error(\"The requested path contains \" + cmd + \" segment at index \" + i);<\/p><p>        }<\/p><p>    }<\/p><p>}<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * \\@whatItDoes Lets you link to specific parts of your app.<\/p><p> *<\/p><p> * \\@howToUse<\/p><p> *<\/p><p> * Consider the following route configuration:<\/p><p> * `[{ path: 'user/:name', component: UserCmp }]`<\/p><p> *<\/p><p> * When linking to this `user/:name` route, you can write:<\/p><p> * `<a routerLink='/user/bob'>link to user component<\/a>`<\/p><p> *<\/p><p> * \\@description<\/p><p> *<\/p><p> * The RouterLink directives let you link to specific parts of your app.<\/p><p> *<\/p><p> * When the link is static, you can use the directive as follows:<\/p><p> * `<a routerLink=\"/user/bob\">link to user component<\/a>`<\/p><p> *<\/p><p> * If you use dynamic values to generate the link, you can pass an array of path<\/p><p> * segments, followed by the params for each segment.<\/p><p> *<\/p><p> * For instance `['/team', teamId, 'user', userName, {details: true}]`<\/p><p> * means that we want to generate a link to `/team/11/user/bob;details=true`.<\/p><p> *<\/p><p> * Multiple static segments can be merged into one<\/p><p> * (e.g., `['/team/11/user', userName, {details: true}]`).<\/p><p> *<\/p><p> * The first segment name can be prepended with `/`, `./`, or `../`:<\/p><p> * * If the first segment begins with `/`, the router will look up the route from the root of the<\/p><p> *   app.<\/p><p> * * If the first segment begins with `./`, or doesn't begin with a slash, the router will<\/p><p> *   instead look in the children of the current activated route.<\/p><p> * * And if the first segment begins with `../`, the router will go up one level.<\/p><p> *<\/p><p> * You can set query params and fragment as follows:<\/p><p> *<\/p><p> * ```<\/p><p> * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\"><\/p><p> *   link to user component<\/p><p> * <\/a><\/p><p> * ```<\/p><p> * RouterLink will use these to generate this link: `/user/bob#education?debug=true`.<\/p><p> *<\/p><p> * (Deprecated in v4.0.0 use `queryParamsHandling` instead) You can also tell the<\/p><p> * directive to preserve the current query params and fragment:<\/p><p> *<\/p><p> * ```<\/p><p> * <a [routerLink]=\"['/user/bob']\" preserveQueryParams preserveFragment><\/p><p> *   link to user component<\/p><p> * <\/a><\/p><p> * ```<\/p><p> *<\/p><p> * You can tell the directive to how to handle queryParams, available options are:<\/p><p> *  - 'merge' merge the queryParams into the current queryParams<\/p><p> *  - 'preserve' preserve the current queryParams<\/p><p> *  - default / '' use the queryParams only<\/p><p> *  same options for {\\@link NavigationExtras#queryParamsHandling}<\/p><p> *<\/p><p> * ```<\/p><p> * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" queryParamsHandling=\"merge\"><\/p><p> *   link to user component<\/p><p> * <\/a><\/p><p> * ```<\/p><p> *<\/p><p> * The router link directive always treats the provided input as a delta to the current url.<\/p><p> *<\/p><p> * For instance, if the current url is `/user/(box//aux:team)`.<\/p><p> *<\/p><p> * Then the following link `<a [routerLink]=\"['/user/jim']\">Jim<\/a>` will generate the link<\/p><p> * `/user/(jim//aux:team)`.<\/p><p> *<\/p><p> * \\@ngModule RouterModule<\/p><p> *<\/p><p> * See {\\@link Router#createUrlTree} for more information.<\/p><p> *<\/p><p> * \\@stable<\/p><p> */<\/p><p>var RouterLink = (function () {<\/p><p>    /**<\/p><p>     * @param {?} router<\/p><p>     * @param {?} route<\/p><p>     * @param {?} tabIndex<\/p><p>     * @param {?} renderer<\/p><p>     * @param {?} el<\/p><p>     */<\/p><p>    function RouterLink(router, route, tabIndex, renderer, el) {<\/p><p>        this.router = router;<\/p><p>        this.route = route;<\/p><p>        this.commands = [];<\/p><p>        if (tabIndex == null) {<\/p><p>            renderer.setAttribute(el.nativeElement, 'tabindex', '0');<\/p><p>        }<\/p><p>    }<\/p><p>    Object.defineProperty(RouterLink.prototype, \"routerLink\", {<\/p><p>        /**<\/p><p>         * @param {?} commands<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        set: function (commands) {<\/p><p>            if (commands != null) {<\/p><p>                this.commands = Array.isArray(commands) ? commands : [commands];<\/p><p>            }<\/p><p>            else {<\/p><p>                this.commands = [];<\/p><p>            }<\/p><p>        },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(RouterLink.prototype, \"preserveQueryParams\", {<\/p><p>        /**<\/p><p>         * @deprecated 4.0.0 use `queryParamsHandling` instead.<\/p><p>         * @param {?} value<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        set: function (value) {<\/p><p>            if (Object(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"isDevMode\"])() && (console) && (console.warn)) {<\/p><p>                console.warn('preserveQueryParams is deprecated!, use queryParamsHandling instead.');<\/p><p>            }<\/p><p>            this.preserve = value;<\/p><p>        },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouterLink.prototype.onClick = function () {<\/p><p>        var /** @type {?} */ extras = {<\/p><p>            skipLocationChange: attrBoolValue(this.skipLocationChange),<\/p><p>            replaceUrl: attrBoolValue(this.replaceUrl),<\/p><p>        };<\/p><p>        this.router.navigateByUrl(this.urlTree, extras);<\/p><p>        return true;<\/p><p>    };<\/p><p>    Object.defineProperty(RouterLink.prototype, \"urlTree\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () {<\/p><p>            return this.router.createUrlTree(this.commands, {<\/p><p>                relativeTo: this.route,<\/p><p>                queryParams: this.queryParams,<\/p><p>                fragment: this.fragment,<\/p><p>                preserveQueryParams: attrBoolValue(this.preserve),<\/p><p>                queryParamsHandling: this.queryParamsHandling,<\/p><p>                preserveFragment: attrBoolValue(this.preserveFragment),<\/p><p>            });<\/p><p>        },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    return RouterLink;<\/p><p>}());<\/p><p>RouterLink.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Directive\"], args: [{ selector: ':not(a)[routerLink]' },] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>RouterLink.ctorParameters = function () { return [<\/p><p>    { type: Router, },<\/p><p>    { type: ActivatedRoute, },<\/p><p>    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Attribute\"], args: ['tabindex',] },] },<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Renderer2\"], },<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ElementRef\"], },<\/p><p>]; };<\/p><p>RouterLink.propDecorators = {<\/p><p>    'queryParams': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],<\/p><p>    'fragment': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],<\/p><p>    'queryParamsHandling': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],<\/p><p>    'preserveFragment': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],<\/p><p>    'skipLocationChange': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],<\/p><p>    'replaceUrl': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],<\/p><p>    'routerLink': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],<\/p><p>    'preserveQueryParams': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],<\/p><p>    'onClick': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"HostListener\"], args: ['click',] },],<\/p><p>};<\/p><p>/**<\/p><p> * \\@whatItDoes Lets you link to specific parts of your app.<\/p><p> *<\/p><p> * See {\\@link RouterLink} for more information.<\/p><p> *<\/p><p> * \\@ngModule RouterModule<\/p><p> *<\/p><p> * \\@stable<\/p><p> */<\/p><p>var RouterLinkWithHref = (function () {<\/p><p>    /**<\/p><p>     * @param {?} router<\/p><p>     * @param {?} route<\/p><p>     * @param {?} locationStrategy<\/p><p>     */<\/p><p>    function RouterLinkWithHref(router, route, locationStrategy) {<\/p><p>        var _this = this;<\/p><p>        this.router = router;<\/p><p>        this.route = route;<\/p><p>        this.locationStrategy = locationStrategy;<\/p><p>        this.commands = [];<\/p><p>        this.subscription = router.events.subscribe(function (s) {<\/p><p>            if (s instanceof NavigationEnd) {<\/p><p>                _this.updateTargetUrlAndHref();<\/p><p>            }<\/p><p>        });<\/p><p>    }<\/p><p>    Object.defineProperty(RouterLinkWithHref.prototype, \"routerLink\", {<\/p><p>        /**<\/p><p>         * @param {?} commands<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        set: function (commands) {<\/p><p>            if (commands != null) {<\/p><p>                this.commands = Array.isArray(commands) ? commands : [commands];<\/p><p>            }<\/p><p>            else {<\/p><p>                this.commands = [];<\/p><p>            }<\/p><p>        },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(RouterLinkWithHref.prototype, \"preserveQueryParams\", {<\/p><p>        /**<\/p><p>         * @param {?} value<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        set: function (value) {<\/p><p>            if (Object(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"isDevMode\"])() && (console) && (console.warn)) {<\/p><p>                console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');<\/p><p>            }<\/p><p>            this.preserve = value;<\/p><p>        },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    /**<\/p><p>     * @param {?} changes<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouterLinkWithHref.prototype.ngOnChanges = function (changes) { this.updateTargetUrlAndHref(); };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouterLinkWithHref.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };<\/p><p>    /**<\/p><p>     * @param {?} button<\/p><p>     * @param {?} ctrlKey<\/p><p>     * @param {?} metaKey<\/p><p>     * @param {?} shiftKey<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouterLinkWithHref.prototype.onClick = function (button, ctrlKey, metaKey, shiftKey) {<\/p><p>        if (button !== 0 || ctrlKey || metaKey || shiftKey) {<\/p><p>            return true;<\/p><p>        }<\/p><p>        if (typeof this.target === 'string' && this.target != '_self') {<\/p><p>            return true;<\/p><p>        }<\/p><p>        var /** @type {?} */ extras = {<\/p><p>            skipLocationChange: attrBoolValue(this.skipLocationChange),<\/p><p>            replaceUrl: attrBoolValue(this.replaceUrl),<\/p><p>        };<\/p><p>        this.router.navigateByUrl(this.urlTree, extras);<\/p><p>        return false;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouterLinkWithHref.prototype.updateTargetUrlAndHref = function () {<\/p><p>        this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));<\/p><p>    };<\/p><p>    Object.defineProperty(RouterLinkWithHref.prototype, \"urlTree\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () {<\/p><p>            return this.router.createUrlTree(this.commands, {<\/p><p>                relativeTo: this.route,<\/p><p>                queryParams: this.queryParams,<\/p><p>                fragment: this.fragment,<\/p><p>                preserveQueryParams: attrBoolValue(this.preserve),<\/p><p>                queryParamsHandling: this.queryParamsHandling,<\/p><p>                preserveFragment: attrBoolValue(this.preserveFragment),<\/p><p>            });<\/p><p>        },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    return RouterLinkWithHref;<\/p><p>}());<\/p><p>RouterLinkWithHref.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Directive\"], args: [{ selector: 'a[routerLink]' },] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>RouterLinkWithHref.ctorParameters = function () { return [<\/p><p>    { type: Router, },<\/p><p>    { type: ActivatedRoute, },<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_1__angular_common__[\"LocationStrategy\"], },<\/p><p>]; };<\/p><p>RouterLinkWithHref.propDecorators = {<\/p><p>    'target': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"HostBinding\"], args: ['attr.target',] }, { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],<\/p><p>    'queryParams': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],<\/p><p>    'fragment': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],<\/p><p>    'queryParamsHandling': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],<\/p><p>    'preserveFragment': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],<\/p><p>    'skipLocationChange': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],<\/p><p>    'replaceUrl': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],<\/p><p>    'href': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"HostBinding\"] },],<\/p><p>    'routerLink': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],<\/p><p>    'preserveQueryParams': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],<\/p><p>    'onClick': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"HostListener\"], args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey', '$event.shiftKey'],] },],<\/p><p>};<\/p><p>/**<\/p><p> * @param {?} s<\/p><p> * @return {?}<\/p><p> */<\/p><p>function attrBoolValue(s) {<\/p><p>    return s === '' || !!s;<\/p><p>}<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * \\@whatItDoes Lets you add a CSS class to an element when the link's route becomes active.<\/p><p> *<\/p><p> * \\@howToUse<\/p><p> *<\/p><p> * ```<\/p><p> * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob<\/a><\/p><p> * ```<\/p><p> *<\/p><p> * \\@description<\/p><p> *<\/p><p> * The RouterLinkActive directive lets you add a CSS class to an element when the link's route<\/p><p> * becomes active.<\/p><p> *<\/p><p> * Consider the following example:<\/p><p> *<\/p><p> * ```<\/p><p> * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob<\/a><\/p><p> * ```<\/p><p> *<\/p><p> * When the url is either '/user' or '/user/bob', the active-link class will<\/p><p> * be added to the `a` tag. If the url changes, the class will be removed.<\/p><p> *<\/p><p> * You can set more than one class, as follows:<\/p><p> *<\/p><p> * ```<\/p><p> * <a routerLink=\"/user/bob\" routerLinkActive=\"class1 class2\">Bob<\/a><\/p><p> * <a routerLink=\"/user/bob\" [routerLinkActive]=\"['class1', 'class2']\">Bob<\/a><\/p><p> * ```<\/p><p> *<\/p><p> * You can configure RouterLinkActive by passing `exact: true`. This will add the classes<\/p><p> * only when the url matches the link exactly.<\/p><p> *<\/p><p> * ```<\/p><p> * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact:<\/p><p> * true}\">Bob<\/a><\/p><p> * ```<\/p><p> *<\/p><p> * You can assign the RouterLinkActive instance to a template variable and directly check<\/p><p> * the `isActive` status.<\/p><p> * ```<\/p><p> * <a routerLink=\"/user/bob\" routerLinkActive #rla=\"routerLinkActive\"><\/p><p> *   Bob {{ rla.isActive ? '(already open)' : ''}}<\/p><p> * <\/a><\/p><p> * ```<\/p><p> *<\/p><p> * Finally, you can apply the RouterLinkActive directive to an ancestor of a RouterLink.<\/p><p> *<\/p><p> * ```<\/p><p> * <div routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact: true}\"><\/p><p> *   <a routerLink=\"/user/jim\">Jim<\/a><\/p><p> *   <a routerLink=\"/user/bob\">Bob<\/a><\/p><p> * <\/div><\/p><p> * ```<\/p><p> *<\/p><p> * This will set the active-link class on the div tag if the url is either '/user/jim' or<\/p><p> * '/user/bob'.<\/p><p> *<\/p><p> * \\@ngModule RouterModule<\/p><p> *<\/p><p> * \\@stable<\/p><p> */<\/p><p>var RouterLinkActive = (function () {<\/p><p>    /**<\/p><p>     * @param {?} router<\/p><p>     * @param {?} element<\/p><p>     * @param {?} renderer<\/p><p>     * @param {?} cdr<\/p><p>     */<\/p><p>    function RouterLinkActive(router, element, renderer, cdr) {<\/p><p>        var _this = this;<\/p><p>        this.router = router;<\/p><p>        this.element = element;<\/p><p>        this.renderer = renderer;<\/p><p>        this.cdr = cdr;<\/p><p>        this.classes = [];<\/p><p>        this.active = false;<\/p><p>        this.routerLinkActiveOptions = { exact: false };<\/p><p>        this.subscription = router.events.subscribe(function (s) {<\/p><p>            if (s instanceof NavigationEnd) {<\/p><p>                _this.update();<\/p><p>            }<\/p><p>        });<\/p><p>    }<\/p><p>    Object.defineProperty(RouterLinkActive.prototype, \"isActive\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this.active; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouterLinkActive.prototype.ngAfterContentInit = function () {<\/p><p>        var _this = this;<\/p><p>        this.links.changes.subscribe(function (_) { return _this.update(); });<\/p><p>        this.linksWithHrefs.changes.subscribe(function (_) { return _this.update(); });<\/p><p>        this.update();<\/p><p>    };<\/p><p>    Object.defineProperty(RouterLinkActive.prototype, \"routerLinkActive\", {<\/p><p>        /**<\/p><p>         * @param {?} data<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        set: function (data) {<\/p><p>            var /** @type {?} */ classes = Array.isArray(data) ? data : data.split(' ');<\/p><p>            this.classes = classes.filter(function (c) { return !!c; });<\/p><p>        },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    /**<\/p><p>     * @param {?} changes<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouterLinkActive.prototype.ngOnChanges = function (changes) { this.update(); };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouterLinkActive.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouterLinkActive.prototype.update = function () {<\/p><p>        var _this = this;<\/p><p>        if (!this.links || !this.linksWithHrefs || !this.router.navigated)<\/p><p>            return;<\/p><p>        var /** @type {?} */ hasActiveLinks = this.hasActiveLinks();<\/p><p>        // react only when status has changed to prevent unnecessary dom updates<\/p><p>        if (this.active !== hasActiveLinks) {<\/p><p>            this.classes.forEach(function (c) {<\/p><p>                if (hasActiveLinks) {<\/p><p>                    _this.renderer.addClass(_this.element.nativeElement, c);<\/p><p>                }<\/p><p>                else {<\/p><p>                    _this.renderer.removeClass(_this.element.nativeElement, c);<\/p><p>                }<\/p><p>            });<\/p><p>            Promise.resolve(hasActiveLinks).then(function (active) { return _this.active = active; });<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} router<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouterLinkActive.prototype.isLinkActive = function (router) {<\/p><p>        var _this = this;<\/p><p>        return function (link) { return router.isActive(link.urlTree, _this.routerLinkActiveOptions.exact); };<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouterLinkActive.prototype.hasActiveLinks = function () {<\/p><p>        return this.links.some(this.isLinkActive(this.router)) ||<\/p><p>            this.linksWithHrefs.some(this.isLinkActive(this.router));<\/p><p>    };<\/p><p>    return RouterLinkActive;<\/p><p>}());<\/p><p>RouterLinkActive.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Directive\"], args: [{<\/p><p>                selector: '[routerLinkActive]',<\/p><p>                exportAs: 'routerLinkActive',<\/p><p>            },] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>RouterLinkActive.ctorParameters = function () { return [<\/p><p>    { type: Router, },<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ElementRef\"], },<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Renderer2\"], },<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ChangeDetectorRef\"], },<\/p><p>]; };<\/p><p>RouterLinkActive.propDecorators = {<\/p><p>    'links': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ContentChildren\"], args: [RouterLink, { descendants: true },] },],<\/p><p>    'linksWithHrefs': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ContentChildren\"], args: [RouterLinkWithHref, { descendants: true },] },],<\/p><p>    'routerLinkActiveOptions': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],<\/p><p>    'routerLinkActive': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Input\"] },],<\/p><p>};<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * Store contextual information about a {\\@link RouterOutlet}<\/p><p> *<\/p><p> * \\@stable<\/p><p> */<\/p><p>var OutletContext = (function () {<\/p><p>    function OutletContext() {<\/p><p>        this.outlet = null;<\/p><p>        this.route = null;<\/p><p>        this.resolver = null;<\/p><p>        this.children = new ChildrenOutletContexts();<\/p><p>        this.attachRef = null;<\/p><p>    }<\/p><p>    return OutletContext;<\/p><p>}());<\/p><p>/**<\/p><p> * Store contextual information about the children (= nested) {\\@link RouterOutlet}<\/p><p> *<\/p><p> * \\@stable<\/p><p> */<\/p><p>var ChildrenOutletContexts = (function () {<\/p><p>    function ChildrenOutletContexts() {<\/p><p>        this.contexts = new Map();<\/p><p>    }<\/p><p>    /**<\/p><p>     * Called when a `RouterOutlet` directive is instantiated<\/p><p>     * @param {?} childName<\/p><p>     * @param {?} outlet<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ChildrenOutletContexts.prototype.onChildOutletCreated = function (childName, outlet) {<\/p><p>        var /** @type {?} */ context = this.getOrCreateContext(childName);<\/p><p>        context.outlet = outlet;<\/p><p>        this.contexts.set(childName, context);<\/p><p>    };<\/p><p>    /**<\/p><p>     * Called when a `RouterOutlet` directive is destroyed.<\/p><p>     * We need to keep the context as the outlet could be destroyed inside a NgIf and might be<\/p><p>     * re-created later.<\/p><p>     * @param {?} childName<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ChildrenOutletContexts.prototype.onChildOutletDestroyed = function (childName) {<\/p><p>        var /** @type {?} */ context = this.getContext(childName);<\/p><p>        if (context) {<\/p><p>            context.outlet = null;<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * Called when the corresponding route is deactivated during navigation.<\/p><p>     * Because the component get destroyed, all children outlet are destroyed.<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ChildrenOutletContexts.prototype.onOutletDeactivated = function () {<\/p><p>        var /** @type {?} */ contexts = this.contexts;<\/p><p>        this.contexts = new Map();<\/p><p>        return contexts;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} contexts<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ChildrenOutletContexts.prototype.onOutletReAttached = function (contexts) { this.contexts = contexts; };<\/p><p>    /**<\/p><p>     * @param {?} childName<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ChildrenOutletContexts.prototype.getOrCreateContext = function (childName) {<\/p><p>        var /** @type {?} */ context = this.getContext(childName);<\/p><p>        if (!context) {<\/p><p>            context = new OutletContext();<\/p><p>            this.contexts.set(childName, context);<\/p><p>        }<\/p><p>        return context;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} childName<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    ChildrenOutletContexts.prototype.getContext = function (childName) { return this.contexts.get(childName) || null; };<\/p><p>    return ChildrenOutletContexts;<\/p><p>}());<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * \\@whatItDoes Acts as a placeholder that Angular dynamically fills based on the current router<\/p><p> * state.<\/p><p> *<\/p><p> * \\@howToUse<\/p><p> *<\/p><p> * ```<\/p><p> * <router-outlet><\/router-outlet><\/p><p> * <router-outlet name='left'><\/router-outlet><\/p><p> * <router-outlet name='right'><\/router-outlet><\/p><p> * ```<\/p><p> *<\/p><p> * A router outlet will emit an activate event any time a new component is being instantiated,<\/p><p> * and a deactivate event when it is being destroyed.<\/p><p> *<\/p><p> * ```<\/p><p> * <router-outlet<\/p><p> *   (activate)='onActivate($event)'<\/p><p> *   (deactivate)='onDeactivate($event)'><\/router-outlet><\/p><p> * ```<\/p><p> * \\@ngModule RouterModule<\/p><p> *<\/p><p> * \\@stable<\/p><p> */<\/p><p>var RouterOutlet = (function () {<\/p><p>    /**<\/p><p>     * @param {?} parentContexts<\/p><p>     * @param {?} location<\/p><p>     * @param {?} resolver<\/p><p>     * @param {?} name<\/p><p>     * @param {?} changeDetector<\/p><p>     */<\/p><p>    function RouterOutlet(parentContexts, location, resolver, name, changeDetector) {<\/p><p>        this.parentContexts = parentContexts;<\/p><p>        this.location = location;<\/p><p>        this.resolver = resolver;<\/p><p>        this.changeDetector = changeDetector;<\/p><p>        this.activated = null;<\/p><p>        this._activatedRoute = null;<\/p><p>        this.activateEvents = new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"EventEmitter\"]();<\/p><p>        this.deactivateEvents = new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"EventEmitter\"]();<\/p><p>        this.name = name || PRIMARY_OUTLET;<\/p><p>        parentContexts.onChildOutletCreated(this.name, this);<\/p><p>    }<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouterOutlet.prototype.ngOnDestroy = function () { this.parentContexts.onChildOutletDestroyed(this.name); };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouterOutlet.prototype.ngOnInit = function () {<\/p><p>        if (!this.activated) {<\/p><p>            // If the outlet was not instantiated at the time the route got activated we need to populate<\/p><p>            // the outlet when it is initialized (ie inside a NgIf)<\/p><p>            var /** @type {?} */ context = this.parentContexts.getContext(this.name);<\/p><p>            if (context && context.route) {<\/p><p>                if (context.attachRef) {<\/p><p>                    // `attachRef` is populated when there is an existing component to mount<\/p><p>                    this.attach(context.attachRef, context.route);<\/p><p>                }<\/p><p>                else {<\/p><p>                    // otherwise the component defined in the configuration is created<\/p><p>                    this.activateWith(context.route, context.resolver || null);<\/p><p>                }<\/p><p>            }<\/p><p>        }<\/p><p>    };<\/p><p>    Object.defineProperty(RouterOutlet.prototype, \"locationInjector\", {<\/p><p>        /**<\/p><p>         * @deprecated since v4 *<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this.location.injector; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(RouterOutlet.prototype, \"locationFactoryResolver\", {<\/p><p>        /**<\/p><p>         * @deprecated since v4 *<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return this.resolver; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(RouterOutlet.prototype, \"isActivated\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () { return !!this.activated; },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(RouterOutlet.prototype, \"component\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () {<\/p><p>            if (!this.activated)<\/p><p>                throw new Error('Outlet is not activated');<\/p><p>            return this.activated.instance;<\/p><p>        },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(RouterOutlet.prototype, \"activatedRoute\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () {<\/p><p>            if (!this.activated)<\/p><p>                throw new Error('Outlet is not activated');<\/p><p>            return (this._activatedRoute);<\/p><p>        },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    Object.defineProperty(RouterOutlet.prototype, \"activatedRouteData\", {<\/p><p>        /**<\/p><p>         * @return {?}<\/p><p>         */<\/p><p>        get: function () {<\/p><p>            if (this._activatedRoute) {<\/p><p>                return this._activatedRoute.snapshot.data;<\/p><p>            }<\/p><p>            return {};<\/p><p>        },<\/p><p>        enumerable: true,<\/p><p>        configurable: true<\/p><p>    });<\/p><p>    /**<\/p><p>     * Called when the `RouteReuseStrategy` instructs to detach the subtree<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouterOutlet.prototype.detach = function () {<\/p><p>        if (!this.activated)<\/p><p>            throw new Error('Outlet is not activated');<\/p><p>        this.location.detach();<\/p><p>        var /** @type {?} */ cmp = this.activated;<\/p><p>        this.activated = null;<\/p><p>        this._activatedRoute = null;<\/p><p>        return cmp;<\/p><p>    };<\/p><p>    /**<\/p><p>     * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree<\/p><p>     * @param {?} ref<\/p><p>     * @param {?} activatedRoute<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouterOutlet.prototype.attach = function (ref, activatedRoute) {<\/p><p>        this.activated = ref;<\/p><p>        this._activatedRoute = activatedRoute;<\/p><p>        this.location.insert(ref.hostView);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouterOutlet.prototype.deactivate = function () {<\/p><p>        if (this.activated) {<\/p><p>            var /** @type {?} */ c = this.component;<\/p><p>            this.activated.destroy();<\/p><p>            this.activated = null;<\/p><p>            this._activatedRoute = null;<\/p><p>            this.deactivateEvents.emit(c);<\/p><p>        }<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} activatedRoute<\/p><p>     * @param {?} resolver<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouterOutlet.prototype.activateWith = function (activatedRoute, resolver) {<\/p><p>        if (this.isActivated) {<\/p><p>            throw new Error('Cannot activate an already activated outlet');<\/p><p>        }<\/p><p>        this._activatedRoute = activatedRoute;<\/p><p>        var /** @type {?} */ snapshot = activatedRoute._futureSnapshot;<\/p><p>        var /** @type {?} */ component = (((snapshot._routeConfig)).component);<\/p><p>        resolver = resolver || this.resolver;<\/p><p>        var /** @type {?} */ factory = resolver.resolveComponentFactory(component);<\/p><p>        var /** @type {?} */ childContexts = this.parentContexts.getOrCreateContext(this.name).children;<\/p><p>        var /** @type {?} */ injector = new OutletInjector(activatedRoute, childContexts, this.location.injector);<\/p><p>        this.activated = this.location.createComponent(factory, this.location.length, injector);<\/p><p>        // Calling `markForCheck` to make sure we will run the change detection when the<\/p><p>        // `RouterOutlet` is inside a `ChangeDetectionStrategy.OnPush` component.<\/p><p>        this.changeDetector.markForCheck();<\/p><p>        this.activateEvents.emit(this.activated.instance);<\/p><p>    };<\/p><p>    return RouterOutlet;<\/p><p>}());<\/p><p>RouterOutlet.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Directive\"], args: [{ selector: 'router-outlet', exportAs: 'outlet' },] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>RouterOutlet.ctorParameters = function () { return [<\/p><p>    { type: ChildrenOutletContexts, },<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ViewContainerRef\"], },<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ComponentFactoryResolver\"], },<\/p><p>    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Attribute\"], args: ['name',] },] },<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ChangeDetectorRef\"], },<\/p><p>]; };<\/p><p>RouterOutlet.propDecorators = {<\/p><p>    'activateEvents': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Output\"], args: ['activate',] },],<\/p><p>    'deactivateEvents': [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Output\"], args: ['deactivate',] },],<\/p><p>};<\/p><p>var OutletInjector = (function () {<\/p><p>    /**<\/p><p>     * @param {?} route<\/p><p>     * @param {?} childContexts<\/p><p>     * @param {?} parent<\/p><p>     */<\/p><p>    function OutletInjector(route, childContexts, parent) {<\/p><p>        this.route = route;<\/p><p>        this.childContexts = childContexts;<\/p><p>        this.parent = parent;<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} token<\/p><p>     * @param {?=} notFoundValue<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    OutletInjector.prototype.get = function (token, notFoundValue) {<\/p><p>        if (token === ActivatedRoute) {<\/p><p>            return this.route;<\/p><p>        }<\/p><p>        if (token === ChildrenOutletContexts) {<\/p><p>            return this.childContexts;<\/p><p>        }<\/p><p>        return this.parent.get(token, notFoundValue);<\/p><p>    };<\/p><p>    return OutletInjector;<\/p><p>}());<\/p><p>/**<\/p><p>*@license<\/p><p>*Copyright Google Inc. All Rights Reserved.<\/p><p>*<\/p><p>*Use of this source code is governed by an MIT-style license that can be<\/p><p>*found in the LICENSE file at https://angular.io/license<\/p><p>*/<\/p><p>/**<\/p><p> * \\@whatItDoes Provides a preloading strategy.<\/p><p> *<\/p><p> * \\@experimental<\/p><p> * @abstract<\/p><p> */<\/p><p>var PreloadingStrategy = (function () {<\/p><p>    function PreloadingStrategy() {<\/p><p>    }<\/p><p>    /**<\/p><p>     * @abstract<\/p><p>     * @param {?} route<\/p><p>     * @param {?} fn<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    PreloadingStrategy.prototype.preload = function (route, fn) { };<\/p><p>    return PreloadingStrategy;<\/p><p>}());<\/p><p>/**<\/p><p> * \\@whatItDoes Provides a preloading strategy that preloads all modules as quickly as possible.<\/p><p> *<\/p><p> * \\@howToUse<\/p><p> *<\/p><p> * ```<\/p><p> * RouteModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})<\/p><p> * ```<\/p><p> *<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var PreloadAllModules = (function () {<\/p><p>    function PreloadAllModules() {<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} route<\/p><p>     * @param {?} fn<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    PreloadAllModules.prototype.preload = function (route, fn) {<\/p><p>        return __WEBPACK_IMPORTED_MODULE_15_rxjs_operator_catch__[\"_catch\"].call(fn(), function () { return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(null); });<\/p><p>    };<\/p><p>    return PreloadAllModules;<\/p><p>}());<\/p><p>/**<\/p><p> * \\@whatItDoes Provides a preloading strategy that does not preload any modules.<\/p><p> *<\/p><p> * \\@description<\/p><p> *<\/p><p> * This strategy is enabled by default.<\/p><p> *<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var NoPreloading = (function () {<\/p><p>    function NoPreloading() {<\/p><p>    }<\/p><p>    /**<\/p><p>     * @param {?} route<\/p><p>     * @param {?} fn<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    NoPreloading.prototype.preload = function (route, fn) { return Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(null); };<\/p><p>    return NoPreloading;<\/p><p>}());<\/p><p>/**<\/p><p> * The preloader optimistically loads all router configurations to<\/p><p> * make navigations into lazily-loaded sections of the application faster.<\/p><p> *<\/p><p> * The preloader runs in the background. When the router bootstraps, the preloader<\/p><p> * starts listening to all navigation events. After every such event, the preloader<\/p><p> * will check if any configurations can be loaded lazily.<\/p><p> *<\/p><p> * If a route is protected by `canLoad` guards, the preloaded will not load it.<\/p><p> *<\/p><p> * \\@stable<\/p><p> */<\/p><p>var RouterPreloader = (function () {<\/p><p>    /**<\/p><p>     * @param {?} router<\/p><p>     * @param {?} moduleLoader<\/p><p>     * @param {?} compiler<\/p><p>     * @param {?} injector<\/p><p>     * @param {?} preloadingStrategy<\/p><p>     */<\/p><p>    function RouterPreloader(router, moduleLoader, compiler, injector, preloadingStrategy) {<\/p><p>        this.router = router;<\/p><p>        this.injector = injector;<\/p><p>        this.preloadingStrategy = preloadingStrategy;<\/p><p>        var onStartLoad = function (r) { return router.triggerEvent(new RouteConfigLoadStart(r)); };<\/p><p>        var onEndLoad = function (r) { return router.triggerEvent(new RouteConfigLoadEnd(r)); };<\/p><p>        this.loader = new RouterConfigLoader(moduleLoader, compiler, onStartLoad, onEndLoad);<\/p><p>    }<\/p><p>    ;<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouterPreloader.prototype.setUpPreloading = function () {<\/p><p>        var _this = this;<\/p><p>        var /** @type {?} */ navigations$ = __WEBPACK_IMPORTED_MODULE_21_rxjs_operator_filter__[\"filter\"].call(this.router.events, function (e) { return e instanceof NavigationEnd; });<\/p><p>        this.subscription = __WEBPACK_IMPORTED_MODULE_7_rxjs_operator_concatMap__[\"concatMap\"].call(navigations$, function () { return _this.preload(); }).subscribe(function () { });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouterPreloader.prototype.preload = function () {<\/p><p>        var /** @type {?} */ ngModule = this.injector.get(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"NgModuleRef\"]);<\/p><p>        return this.processRoutes(ngModule, this.router.config);<\/p><p>    };<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouterPreloader.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };<\/p><p>    /**<\/p><p>     * @param {?} ngModule<\/p><p>     * @param {?} routes<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouterPreloader.prototype.processRoutes = function (ngModule, routes) {<\/p><p>        var /** @type {?} */ res = [];<\/p><p>        for (var _i = 0, routes_5 = routes; _i < routes_5.length; _i++) {<\/p><p>            var route = routes_5[_i];<\/p><p>            // we already have the config loaded, just recurse<\/p><p>            if (route.loadChildren && !route.canLoad && route._loadedConfig) {<\/p><p>                var /** @type {?} */ childConfig = route._loadedConfig;<\/p><p>                res.push(this.processRoutes(childConfig.module, childConfig.routes));<\/p><p>                // no config loaded, fetch the config<\/p><p>            }<\/p><p>            else if (route.loadChildren && !route.canLoad) {<\/p><p>                res.push(this.preloadConfig(ngModule, route));<\/p><p>                // recurse into children<\/p><p>            }<\/p><p>            else if (route.children) {<\/p><p>                res.push(this.processRoutes(ngModule, route.children));<\/p><p>            }<\/p><p>        }<\/p><p>        return __WEBPACK_IMPORTED_MODULE_19_rxjs_operator_mergeAll__[\"mergeAll\"].call(Object(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_from__[\"from\"])(res));<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} ngModule<\/p><p>     * @param {?} route<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouterPreloader.prototype.preloadConfig = function (ngModule, route) {<\/p><p>        var _this = this;<\/p><p>        return this.preloadingStrategy.preload(route, function () {<\/p><p>            var /** @type {?} */ loaded$ = _this.loader.load(ngModule.injector, route);<\/p><p>            return __WEBPACK_IMPORTED_MODULE_12_rxjs_operator_mergeMap__[\"mergeMap\"].call(loaded$, function (config) {<\/p><p>                route._loadedConfig = config;<\/p><p>                return _this.processRoutes(config.module, config.routes);<\/p><p>            });<\/p><p>        });<\/p><p>    };<\/p><p>    return RouterPreloader;<\/p><p>}());<\/p><p>RouterPreloader.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injectable\"] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>RouterPreloader.ctorParameters = function () { return [<\/p><p>    { type: Router, },<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"NgModuleFactoryLoader\"], },<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Compiler\"], },<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injector\"], },<\/p><p>    { type: PreloadingStrategy, },<\/p><p>]; };<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * \\@whatItDoes Contains a list of directives<\/p><p> * \\@stable<\/p><p> */<\/p><p>var ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive];<\/p><p>/**<\/p><p> * \\@whatItDoes Is used in DI to configure the router.<\/p><p> * \\@stable<\/p><p> */<\/p><p>var ROUTER_CONFIGURATION = new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"InjectionToken\"]('ROUTER_CONFIGURATION');<\/p><p>/**<\/p><p> * \\@docsNotRequired<\/p><p> */<\/p><p>var ROUTER_FORROOT_GUARD = new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"InjectionToken\"]('ROUTER_FORROOT_GUARD');<\/p><p>var ROUTER_PROVIDERS = [<\/p><p>    __WEBPACK_IMPORTED_MODULE_1__angular_common__[\"Location\"],<\/p><p>    { provide: UrlSerializer, useClass: DefaultUrlSerializer },<\/p><p>    {<\/p><p>        provide: Router,<\/p><p>        useFactory: setupRouter,<\/p><p>        deps: [<\/p><p>            __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ApplicationRef\"], UrlSerializer, ChildrenOutletContexts, __WEBPACK_IMPORTED_MODULE_1__angular_common__[\"Location\"], __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injector\"],<\/p><p>            __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"NgModuleFactoryLoader\"], __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Compiler\"], ROUTES, ROUTER_CONFIGURATION,<\/p><p>            [UrlHandlingStrategy, new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Optional\"]()], [RouteReuseStrategy, new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Optional\"]()]<\/p><p>        ]<\/p><p>    },<\/p><p>    ChildrenOutletContexts,<\/p><p>    { provide: ActivatedRoute, useFactory: rootRoute, deps: [Router] },<\/p><p>    { provide: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"NgModuleFactoryLoader\"], useClass: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"SystemJsNgModuleLoader\"] },<\/p><p>    RouterPreloader,<\/p><p>    NoPreloading,<\/p><p>    PreloadAllModules,<\/p><p>    { provide: ROUTER_CONFIGURATION, useValue: { enableTracing: false } },<\/p><p>];<\/p><p>/**<\/p><p> * @return {?}<\/p><p> */<\/p><p>function routerNgProbeToken() {<\/p><p>    return new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"NgProbeToken\"]('Router', Router);<\/p><p>}<\/p><p>/**<\/p><p> * \\@whatItDoes Adds router directives and providers.<\/p><p> *<\/p><p> * \\@howToUse<\/p><p> *<\/p><p> * RouterModule can be imported multiple times: once per lazily-loaded bundle.<\/p><p> * Since the router deals with a global shared resource--location, we cannot have<\/p><p> * more than one router service active.<\/p><p> *<\/p><p> * That is why there are two ways to create the module: `RouterModule.forRoot` and<\/p><p> * `RouterModule.forChild`.<\/p><p> *<\/p><p> * * `forRoot` creates a module that contains all the directives, the given routes, and the router<\/p><p> *   service itself.<\/p><p> * * `forChild` creates a module that contains all the directives and the given routes, but does not<\/p><p> *   include the router service.<\/p><p> *<\/p><p> * When registered at the root, the module should be used as follows<\/p><p> *<\/p><p> * ```<\/p><p> * \\@NgModule({<\/p><p> *   imports: [RouterModule.forRoot(ROUTES)]<\/p><p> * })<\/p><p> * class MyNgModule {}<\/p><p> * ```<\/p><p> *<\/p><p> * For submodules and lazy loaded submodules the module should be used as follows:<\/p><p> *<\/p><p> * ```<\/p><p> * \\@NgModule({<\/p><p> *   imports: [RouterModule.forChild(ROUTES)]<\/p><p> * })<\/p><p> * class MyNgModule {}<\/p><p> * ```<\/p><p> *<\/p><p> * \\@description<\/p><p> *<\/p><p> * Managing state transitions is one of the hardest parts of building applications. This is<\/p><p> * especially true on the web, where you also need to ensure that the state is reflected in the URL.<\/p><p> * In addition, we often want to split applications into multiple bundles and load them on demand.<\/p><p> * Doing this transparently is not trivial.<\/p><p> *<\/p><p> * The Angular router solves these problems. Using the router, you can declaratively specify<\/p><p> * application states, manage state transitions while taking care of the URL, and load bundles on<\/p><p> * demand.<\/p><p> *<\/p><p> * [Read this developer guide](https://angular.io/docs/ts/latest/guide/router.html) to get an<\/p><p> * overview of how the router should be used.<\/p><p> *<\/p><p> * \\@stable<\/p><p> */<\/p><p>var RouterModule = (function () {<\/p><p>    /**<\/p><p>     * @param {?} guard<\/p><p>     * @param {?} router<\/p><p>     */<\/p><p>    function RouterModule(guard, router) {<\/p><p>    }<\/p><p>    /**<\/p><p>     * Creates a module with all the router providers and directives. It also optionally sets up an<\/p><p>     * application listener to perform an initial navigation.<\/p><p>     *<\/p><p>     * Options:<\/p><p>     * * `enableTracing` makes the router log all its internal events to the console.<\/p><p>     * * `useHash` enables the location strategy that uses the URL fragment instead of the history<\/p><p>     * API.<\/p><p>     * * `initialNavigation` disables the initial navigation.<\/p><p>     * * `errorHandler` provides a custom error handler.<\/p><p>     * @param {?} routes<\/p><p>     * @param {?=} config<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouterModule.forRoot = function (routes, config) {<\/p><p>        return {<\/p><p>            ngModule: RouterModule,<\/p><p>            providers: [<\/p><p>                ROUTER_PROVIDERS,<\/p><p>                provideRoutes(routes),<\/p><p>                {<\/p><p>                    provide: ROUTER_FORROOT_GUARD,<\/p><p>                    useFactory: provideForRootGuard,<\/p><p>                    deps: [[Router, new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Optional\"](), new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"SkipSelf\"]()]]<\/p><p>                },<\/p><p>                { provide: ROUTER_CONFIGURATION, useValue: config ? config : {} },<\/p><p>                {<\/p><p>                    provide: __WEBPACK_IMPORTED_MODULE_1__angular_common__[\"LocationStrategy\"],<\/p><p>                    useFactory: provideLocationStrategy,<\/p><p>                    deps: [<\/p><p>                        __WEBPACK_IMPORTED_MODULE_1__angular_common__[\"PlatformLocation\"], [new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Inject\"](__WEBPACK_IMPORTED_MODULE_1__angular_common__[\"APP_BASE_HREF\"]), new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Optional\"]()], ROUTER_CONFIGURATION<\/p><p>                    ]<\/p><p>                },<\/p><p>                {<\/p><p>                    provide: PreloadingStrategy,<\/p><p>                    useExisting: config && config.preloadingStrategy ? config.preloadingStrategy :<\/p><p>                        NoPreloading<\/p><p>                },<\/p><p>                { provide: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"NgProbeToken\"], multi: true, useFactory: routerNgProbeToken },<\/p><p>                provideRouterInitializer(),<\/p><p>            ],<\/p><p>        };<\/p><p>    };<\/p><p>    /**<\/p><p>     * Creates a module with all the router directives and a provider registering routes.<\/p><p>     * @param {?} routes<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouterModule.forChild = function (routes) {<\/p><p>        return { ngModule: RouterModule, providers: [provideRoutes(routes)] };<\/p><p>    };<\/p><p>    return RouterModule;<\/p><p>}());<\/p><p>RouterModule.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"NgModule\"], args: [{ declarations: ROUTER_DIRECTIVES, exports: ROUTER_DIRECTIVES },] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>RouterModule.ctorParameters = function () { return [<\/p><p>    { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Inject\"], args: [ROUTER_FORROOT_GUARD,] },] },<\/p><p>    { type: Router, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Optional\"] },] },<\/p><p>]; };<\/p><p>/**<\/p><p> * @param {?} platformLocationStrategy<\/p><p> * @param {?} baseHref<\/p><p> * @param {?=} options<\/p><p> * @return {?}<\/p><p> */<\/p><p>function provideLocationStrategy(platformLocationStrategy, baseHref, options) {<\/p><p>    if (options === void 0) { options = {}; }<\/p><p>    return options.useHash ? new __WEBPACK_IMPORTED_MODULE_1__angular_common__[\"HashLocationStrategy\"](platformLocationStrategy, baseHref) :<\/p><p>        new __WEBPACK_IMPORTED_MODULE_1__angular_common__[\"PathLocationStrategy\"](platformLocationStrategy, baseHref);<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} router<\/p><p> * @return {?}<\/p><p> */<\/p><p>function provideForRootGuard(router) {<\/p><p>    if (router) {<\/p><p>        throw new Error(\"RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.\");<\/p><p>    }<\/p><p>    return 'guarded';<\/p><p>}<\/p><p>/**<\/p><p> * \\@whatItDoes Registers routes.<\/p><p> *<\/p><p> * \\@howToUse<\/p><p> *<\/p><p> * ```<\/p><p> * \\@NgModule({<\/p><p> *   imports: [RouterModule.forChild(ROUTES)],<\/p><p> *   providers: [provideRoutes(EXTRA_ROUTES)]<\/p><p> * })<\/p><p> * class MyNgModule {}<\/p><p> * ```<\/p><p> *<\/p><p> * \\@stable<\/p><p> * @param {?} routes<\/p><p> * @return {?}<\/p><p> */<\/p><p>function provideRoutes(routes) {<\/p><p>    return [<\/p><p>        { provide: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ANALYZE_FOR_ENTRY_COMPONENTS\"], multi: true, useValue: routes },<\/p><p>        { provide: ROUTES, multi: true, useValue: routes },<\/p><p>    ];<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} ref<\/p><p> * @param {?} urlSerializer<\/p><p> * @param {?} contexts<\/p><p> * @param {?} location<\/p><p> * @param {?} injector<\/p><p> * @param {?} loader<\/p><p> * @param {?} compiler<\/p><p> * @param {?} config<\/p><p> * @param {?=} opts<\/p><p> * @param {?=} urlHandlingStrategy<\/p><p> * @param {?=} routeReuseStrategy<\/p><p> * @return {?}<\/p><p> */<\/p><p>function setupRouter(ref, urlSerializer, contexts, location, injector, loader, compiler, config, opts, urlHandlingStrategy, routeReuseStrategy) {<\/p><p>    if (opts === void 0) { opts = {}; }<\/p><p>    var /** @type {?} */ router = new Router(null, urlSerializer, contexts, location, injector, loader, compiler, flatten(config));<\/p><p>    if (urlHandlingStrategy) {<\/p><p>        router.urlHandlingStrategy = urlHandlingStrategy;<\/p><p>    }<\/p><p>    if (routeReuseStrategy) {<\/p><p>        router.routeReuseStrategy = routeReuseStrategy;<\/p><p>    }<\/p><p>    if (opts.errorHandler) {<\/p><p>        router.errorHandler = opts.errorHandler;<\/p><p>    }<\/p><p>    if (opts.enableTracing) {<\/p><p>        var /** @type {?} */ dom_1 = Object(__WEBPACK_IMPORTED_MODULE_20__angular_platform_browser__[\"ɵgetDOM\"])();<\/p><p>        router.events.subscribe(function (e) {<\/p><p>            dom_1.logGroup(\"Router Event: \" + ((e.constructor)).name);<\/p><p>            dom_1.log(e.toString());<\/p><p>            dom_1.log(e);<\/p><p>            dom_1.logGroupEnd();<\/p><p>        });<\/p><p>    }<\/p><p>    return router;<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} router<\/p><p> * @return {?}<\/p><p> */<\/p><p>function rootRoute(router) {<\/p><p>    return router.routerState.root;<\/p><p>}<\/p><p>/**<\/p><p> * To initialize the router properly we need to do in two steps:<\/p><p> *<\/p><p> * We need to start the navigation in a APP_INITIALIZER to block the bootstrap if<\/p><p> * a resolver or a guards executes asynchronously. Second, we need to actually run<\/p><p> * activation in a BOOTSTRAP_LISTENER. We utilize the afterPreactivation<\/p><p> * hook provided by the router to do that.<\/p><p> *<\/p><p> * The router navigation starts, reaches the point when preactivation is done, and then<\/p><p> * pauses. It waits for the hook to be resolved. We then resolve it only in a bootstrap listener.<\/p><p> */<\/p><p>var RouterInitializer = (function () {<\/p><p>    /**<\/p><p>     * @param {?} injector<\/p><p>     */<\/p><p>    function RouterInitializer(injector) {<\/p><p>        this.injector = injector;<\/p><p>        this.initNavigation = false;<\/p><p>        this.resultOfPreactivationDone = new __WEBPACK_IMPORTED_MODULE_4_rxjs_Subject__[\"Subject\"]();<\/p><p>    }<\/p><p>    /**<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouterInitializer.prototype.appInitializer = function () {<\/p><p>        var _this = this;<\/p><p>        var /** @type {?} */ p = this.injector.get(__WEBPACK_IMPORTED_MODULE_1__angular_common__[\"LOCATION_INITIALIZED\"], Promise.resolve(null));<\/p><p>        return p.then(function () {<\/p><p>            var /** @type {?} */ resolve = ((null));<\/p><p>            var /** @type {?} */ res = new Promise(function (r) { return resolve = r; });<\/p><p>            var /** @type {?} */ router = _this.injector.get(Router);<\/p><p>            var /** @type {?} */ opts = _this.injector.get(ROUTER_CONFIGURATION);<\/p><p>            if (_this.isLegacyDisabled(opts) || _this.isLegacyEnabled(opts)) {<\/p><p>                resolve(true);<\/p><p>            }<\/p><p>            else if (opts.initialNavigation === 'disabled') {<\/p><p>                router.setUpLocationChangeListener();<\/p><p>                resolve(true);<\/p><p>            }<\/p><p>            else if (opts.initialNavigation === 'enabled') {<\/p><p>                router.hooks.afterPreactivation = function () {<\/p><p>                    // only the initial navigation should be delayed<\/p><p>                    if (!_this.initNavigation) {<\/p><p>                        _this.initNavigation = true;<\/p><p>                        resolve(true);<\/p><p>                        return _this.resultOfPreactivationDone;<\/p><p>                        // subsequent navigations should not be delayed<\/p><p>                    }<\/p><p>                    else {<\/p><p>                        return (Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_observable_of__[\"of\"])(null));<\/p><p>                    }<\/p><p>                };<\/p><p>                router.initialNavigation();<\/p><p>            }<\/p><p>            else {<\/p><p>                throw new Error(\"Invalid initialNavigation options: '\" + opts.initialNavigation + \"'\");<\/p><p>            }<\/p><p>            return res;<\/p><p>        });<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} bootstrappedComponentRef<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouterInitializer.prototype.bootstrapListener = function (bootstrappedComponentRef) {<\/p><p>        var /** @type {?} */ opts = this.injector.get(ROUTER_CONFIGURATION);<\/p><p>        var /** @type {?} */ preloader = this.injector.get(RouterPreloader);<\/p><p>        var /** @type {?} */ router = this.injector.get(Router);<\/p><p>        var /** @type {?} */ ref = this.injector.get(__WEBPACK_IMPORTED_MODULE_2__angular_core__[\"ApplicationRef\"]);<\/p><p>        if (bootstrappedComponentRef !== ref.components[0]) {<\/p><p>            return;<\/p><p>        }<\/p><p>        if (this.isLegacyEnabled(opts)) {<\/p><p>            router.initialNavigation();<\/p><p>        }<\/p><p>        else if (this.isLegacyDisabled(opts)) {<\/p><p>            router.setUpLocationChangeListener();<\/p><p>        }<\/p><p>        preloader.setUpPreloading();<\/p><p>        router.resetRootComponentType(ref.componentTypes[0]);<\/p><p>        this.resultOfPreactivationDone.next(/** @type {?} */ ((null)));<\/p><p>        this.resultOfPreactivationDone.complete();<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} opts<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouterInitializer.prototype.isLegacyEnabled = function (opts) {<\/p><p>        return opts.initialNavigation === 'legacy_enabled' || opts.initialNavigation === true ||<\/p><p>            opts.initialNavigation === undefined;<\/p><p>    };<\/p><p>    /**<\/p><p>     * @param {?} opts<\/p><p>     * @return {?}<\/p><p>     */<\/p><p>    RouterInitializer.prototype.isLegacyDisabled = function (opts) {<\/p><p>        return opts.initialNavigation === 'legacy_disabled' || opts.initialNavigation === false;<\/p><p>    };<\/p><p>    return RouterInitializer;<\/p><p>}());<\/p><p>RouterInitializer.decorators = [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injectable\"] },<\/p><p>];<\/p><p>/**<\/p><p> * @nocollapse<\/p><p> */<\/p><p>RouterInitializer.ctorParameters = function () { return [<\/p><p>    { type: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Injector\"], },<\/p><p>]; };<\/p><p>/**<\/p><p> * @param {?} r<\/p><p> * @return {?}<\/p><p> */<\/p><p>function getAppInitializer(r) {<\/p><p>    return r.appInitializer.bind(r);<\/p><p>}<\/p><p>/**<\/p><p> * @param {?} r<\/p><p> * @return {?}<\/p><p> */<\/p><p>function getBootstrapListener(r) {<\/p><p>    return r.bootstrapListener.bind(r);<\/p><p>}<\/p><p>/**<\/p><p> * A token for the router initializer that will be called after the app is bootstrapped.<\/p><p> *<\/p><p> * \\@experimental<\/p><p> */<\/p><p>var ROUTER_INITIALIZER = new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"InjectionToken\"]('Router Initializer');<\/p><p>/**<\/p><p> * @return {?}<\/p><p> */<\/p><p>function provideRouterInitializer() {<\/p><p>    return [<\/p><p>        RouterInitializer,<\/p><p>        {<\/p><p>            provide: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"APP_INITIALIZER\"],<\/p><p>            multi: true,<\/p><p>            useFactory: getAppInitializer,<\/p><p>            deps: [RouterInitializer]<\/p><p>        },<\/p><p>        { provide: ROUTER_INITIALIZER, useFactory: getBootstrapListener, deps: [RouterInitializer] },<\/p><p>        { provide: __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"APP_BOOTSTRAP_LISTENER\"], multi: true, useExisting: ROUTER_INITIALIZER },<\/p><p>    ];<\/p><p>}<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * @module<\/p><p> * @description<\/p><p> * Entry point for all public APIs of the common package.<\/p><p> */<\/p><p>/**<\/p><p> * \\@stable<\/p><p> */<\/p><p>var VERSION = new __WEBPACK_IMPORTED_MODULE_2__angular_core__[\"Version\"]('4.3.5');<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * @license<\/p><p> * Copyright Google Inc. All Rights Reserved.<\/p><p> *<\/p><p> * Use of this source code is governed by an MIT-style license that can be<\/p><p> * found in the LICENSE file at https://angular.io/license<\/p><p> */<\/p><p>/**<\/p><p> * @module<\/p><p> * @description<\/p><p> * Entry point for all public APIs of the router package.<\/p><p> */<\/p><p>// This file only reexports content of the `src` folder. Keep it that way.<\/p><p>/**<\/p><p> * Generated bundle index. Do not edit.<\/p><p> */<\/p><p><\/p><p>//# sourceMappingURL=router.es5.js.map<\/p><p><\/p><p><\/p><p>/***/ })<\/p><p><\/p><p>}<\/p>","reference":"<p>http://blogs.wsj.com/cio/2013/10/08/adobe-source-code-leak-is-bad-news-for-u-s-government/<\/p>","cweid":"540","wascid":"13","sourceid":"3"}]}]}
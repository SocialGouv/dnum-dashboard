on:
  workflow_dispatch:
    inputs:
      url:
        description: "Single url to scan or any"
        required: false
        default: ""

#  schedule:
#    - cron: "0 6 */7 * *"

name: Scans
jobs:
  init:
    runs-on: ubuntu-latest
    name: Prepare
    outputs:
      urls: ${{ steps.parse-urls.outputs.urls }}
      urls_json: ${{ steps.parse-urls.outputs.urls_json }}
    steps:
      - uses: actions/checkout@v2

      - name: "Parse urls for matrix"
        id: "parse-urls"
        shell: bash
        run: |

          if [[ -n "${{ github.event.inputs.url }}" ]]
          then
            URLS="${{ github.event.inputs.url }}"
            URLS_JSON="[\"${{ github.event.inputs.url }}\"]"
          else
            # parse the input urls so we can make use jobs in a "matrix"
            URLS=$(cat urls.txt | grep -e "^http")

            # todo: remove scanned recently

            URLS="${URLS//'%'/'%25'}"
            URLS="${URLS//$'\n'/'%0A'}"
            URLS="${URLS//$'\r'/'%0D'}"

            URLS_JSON=$(cat urls.txt | grep -e "^http" | jq -Rsc 'split("\n") [0:-1]' -)
          fi

          echo $URLS
          echo $URLS_JSON

          echo "::set-output name=urls_json::$URLS_JSON"
          echo "::set-output name=urls::$URLS"

  scans:
    runs-on: ubuntu-latest
    name: Scan
    needs: init
    continue-on-error: true
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        url: ${{fromJson(needs.init.outputs.urls_json)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master

      - uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install packages
        run: |
          mkdir -p scans || true
          yarn

      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.4.0
        continue-on-error: true
        with:
          # token: "${{ secrets.GITHUB_TOKEN }}"
          docker_name: "owasp/zap2docker-stable"
          target: "${{ matrix.url }}"
          cmd_options: "-a"

      - name: Lighthouse scan
        continue-on-error: true
        uses: treosh/lighthouse-ci-action@v7
        with:
          urls: "${{ matrix.url }}"
          uploadArtifacts: true
          temporaryPublicStorage: false
          configPath: "./lighthouserc.json"

      - name: SSL Labs scan
        continue-on-error: true
        shell: bash
        run: |
          SCAN_OUTPUT=scans/ssl.json
          node src/ssl/scan.js ${{ matrix.url }} > $SCAN_OUTPUT

      - name: Mozilla HTTP scan
        continue-on-error: true
        shell: bash
        run: |
          SCAN_OUTPUT=scans/http.json
          node src/http/scan.js ${{ matrix.url }} > $SCAN_OUTPUT

      - name: Third parties scan
        continue-on-error: true
        shell: bash
        run: |
          SCAN_OUTPUT=scans/thirdparties.json
          node src/thirdparties/scan.js ${{ matrix.url }} > $SCAN_OUTPUT

      - name: Nuclei scan
        continue-on-error: true
        uses: "./.github/actions/nuclei"
        with:
          url: ${{ matrix.url }}
          output: "scans/nuclei.log"

      - uses: actions/upload-artifact@v2
        with:
          name: scans
          path: scans

      - name: Download lighthouse
        uses: actions/download-artifact@v2
        with:
          name: lighthouse-results
          path: lighthouse-results

      - name: Save results
        run: |
          # store results in a folder with then base64 encoded url
          URL=${{Â matrix.url }}
          URL_BASE64=$(printf "%s" "$URL" | base64)
          NOW=$(date +"%Y%m%d_%H%M%S")
          OUT_PATH="./results/${URL_BASE64}/${NOW}"

          mkdir -p $OUT_PATH || true

          # filter and jsonify nuclei logs
          cat scans/nuclei.log | jq -s > scans/nuclei.json || true
          rm scans/nuclei.log || true

          # archive results in dedicated folder
          mv scans/* $OUT_PATH/
          mv report_json.json $OUT_PATH/zap.json
          mv report_md.md $OUT_PATH/zap.md
          mv report_html.html $OUT_PATH/zap.html

          # due to https://github.com/treosh/lighthouse-ci-action/pull/81
          for LHR_JSON_PATH in ./lighthouse-results/lhr-*.json; do
              LHR_URL=$(jq -r ".requestedUrl" $LHR_JSON_PATH)
              if [[ "${URL%/}" == "${LHR_URL%/}" ]]
              then
                  LHR_TIMESTAMP=$(basename $LHR_JSON_PATH | sed -e "s/lhr-\([0-9]*\)\.json/\1/")
                  mv lighthouse-results/lhr-${LHR_TIMESTAMP}.json $OUT_PATH/lhr.json
                  mv lighthouse-results/lhr-${LHR_TIMESTAMP}.html $OUT_PATH/lhr.html
              fi
          done

      - uses: EndBug/add-and-commit@v7
        with:
          add: '["results"]'
          author_name: ${{ secrets.SOCIALGROOVYBOT_NAME }}
          author_email: ${{ secrets.SOCIALGROOVYBOT_EMAIL }}
          message: "update: ${{ matrix.url }}"
